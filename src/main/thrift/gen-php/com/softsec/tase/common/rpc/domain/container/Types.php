<?php
namespace com\softsec\tase\common\rpc\domain\container;

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Exception\TApplicationException;


final class BundleType {
  const ZIP = 1;
  const JAR = 2;
  static public $__names = array(
    1 => 'ZIP',
    2 => 'JAR',
  );
}

class Programme {
  static $_TSPEC;

  public $committer = null;
  public $programmeName = null;
  public $appType = null;
  public $jobLifecycle = null;
  public $jobPhase = null;
  public $nodeType = null;
  public $scriptName = null;
  public $script = null;
  public $scriptMd5 = null;
  public $executableName = null;
  public $executable = null;
  public $executableMd5 = null;
  public $envVariables = null;
  public $description = null;
  public $minMem = null;
  public $minFs = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'committer',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'programmeName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'appType',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'jobLifecycle',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'jobPhase',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'nodeType',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'scriptName',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'script',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'scriptMd5',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'executableName',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'executable',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'executableMd5',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'envVariables',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'minMem',
          'type' => TType::I32,
          ),
        16 => array(
          'var' => 'minFs',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['committer'])) {
        $this->committer = $vals['committer'];
      }
      if (isset($vals['programmeName'])) {
        $this->programmeName = $vals['programmeName'];
      }
      if (isset($vals['appType'])) {
        $this->appType = $vals['appType'];
      }
      if (isset($vals['jobLifecycle'])) {
        $this->jobLifecycle = $vals['jobLifecycle'];
      }
      if (isset($vals['jobPhase'])) {
        $this->jobPhase = $vals['jobPhase'];
      }
      if (isset($vals['nodeType'])) {
        $this->nodeType = $vals['nodeType'];
      }
      if (isset($vals['scriptName'])) {
        $this->scriptName = $vals['scriptName'];
      }
      if (isset($vals['script'])) {
        $this->script = $vals['script'];
      }
      if (isset($vals['scriptMd5'])) {
        $this->scriptMd5 = $vals['scriptMd5'];
      }
      if (isset($vals['executableName'])) {
        $this->executableName = $vals['executableName'];
      }
      if (isset($vals['executable'])) {
        $this->executable = $vals['executable'];
      }
      if (isset($vals['executableMd5'])) {
        $this->executableMd5 = $vals['executableMd5'];
      }
      if (isset($vals['envVariables'])) {
        $this->envVariables = $vals['envVariables'];
      }
      if (isset($vals['description'])) {
        $this->description = $vals['description'];
      }
      if (isset($vals['minMem'])) {
        $this->minMem = $vals['minMem'];
      }
      if (isset($vals['minFs'])) {
        $this->minFs = $vals['minFs'];
      }
    }
  }

  public function getName() {
    return 'Programme';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->committer);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->programmeName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->appType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->jobLifecycle);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->jobPhase);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->nodeType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->scriptName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->script);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->scriptMd5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->executableName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->executable);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->executableMd5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->envVariables);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->description);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->minMem);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->minFs);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Programme');
    if ($this->committer !== null) {
      $xfer += $output->writeFieldBegin('committer', TType::STRING, 1);
      $xfer += $output->writeString($this->committer);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->programmeName !== null) {
      $xfer += $output->writeFieldBegin('programmeName', TType::STRING, 2);
      $xfer += $output->writeString($this->programmeName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appType !== null) {
      $xfer += $output->writeFieldBegin('appType', TType::I32, 3);
      $xfer += $output->writeI32($this->appType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jobLifecycle !== null) {
      $xfer += $output->writeFieldBegin('jobLifecycle', TType::I32, 4);
      $xfer += $output->writeI32($this->jobLifecycle);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jobPhase !== null) {
      $xfer += $output->writeFieldBegin('jobPhase', TType::I32, 5);
      $xfer += $output->writeI32($this->jobPhase);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nodeType !== null) {
      $xfer += $output->writeFieldBegin('nodeType', TType::I32, 6);
      $xfer += $output->writeI32($this->nodeType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->scriptName !== null) {
      $xfer += $output->writeFieldBegin('scriptName', TType::STRING, 7);
      $xfer += $output->writeString($this->scriptName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->script !== null) {
      $xfer += $output->writeFieldBegin('script', TType::STRING, 8);
      $xfer += $output->writeString($this->script);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->scriptMd5 !== null) {
      $xfer += $output->writeFieldBegin('scriptMd5', TType::STRING, 9);
      $xfer += $output->writeString($this->scriptMd5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->executableName !== null) {
      $xfer += $output->writeFieldBegin('executableName', TType::STRING, 10);
      $xfer += $output->writeString($this->executableName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->executable !== null) {
      $xfer += $output->writeFieldBegin('executable', TType::STRING, 11);
      $xfer += $output->writeString($this->executable);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->executableMd5 !== null) {
      $xfer += $output->writeFieldBegin('executableMd5', TType::STRING, 12);
      $xfer += $output->writeString($this->executableMd5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->envVariables !== null) {
      $xfer += $output->writeFieldBegin('envVariables', TType::STRING, 13);
      $xfer += $output->writeString($this->envVariables);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->description !== null) {
      $xfer += $output->writeFieldBegin('description', TType::STRING, 14);
      $xfer += $output->writeString($this->description);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->minMem !== null) {
      $xfer += $output->writeFieldBegin('minMem', TType::I32, 15);
      $xfer += $output->writeI32($this->minMem);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->minFs !== null) {
      $xfer += $output->writeFieldBegin('minFs', TType::I32, 16);
      $xfer += $output->writeI32($this->minFs);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Context {
  static $_TSPEC;

  public $taskId = null;
  public $priority = null;
  public $jobExecutionMode = null;
  public $jobReturnMode = null;
  public $timeout = null;
  public $programId = null;
  public $bundleType = null;
  public $programName = null;
  public $scriptName = null;
  public $scriptPath = null;
  public $scriptMd5 = null;
  public $executableName = null;
  public $executablePath = null;
  public $executableMd5 = null;
  public $envVariables = null;
  public $parameter = null;
  public $resultAddress = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'taskId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'priority',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'jobExecutionMode',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'jobReturnMode',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'timeout',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'programId',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'bundleType',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'programName',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'scriptName',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'scriptPath',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'scriptMd5',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'executableName',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'executablePath',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'executableMd5',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'envVariables',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'parameter',
          'type' => TType::STRUCT,
          'class' => '\com\softsec\tase\common\rpc\domain\job\JobParameter',
          ),
        17 => array(
          'var' => 'resultAddress',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['taskId'])) {
        $this->taskId = $vals['taskId'];
      }
      if (isset($vals['priority'])) {
        $this->priority = $vals['priority'];
      }
      if (isset($vals['jobExecutionMode'])) {
        $this->jobExecutionMode = $vals['jobExecutionMode'];
      }
      if (isset($vals['jobReturnMode'])) {
        $this->jobReturnMode = $vals['jobReturnMode'];
      }
      if (isset($vals['timeout'])) {
        $this->timeout = $vals['timeout'];
      }
      if (isset($vals['programId'])) {
        $this->programId = $vals['programId'];
      }
      if (isset($vals['bundleType'])) {
        $this->bundleType = $vals['bundleType'];
      }
      if (isset($vals['programName'])) {
        $this->programName = $vals['programName'];
      }
      if (isset($vals['scriptName'])) {
        $this->scriptName = $vals['scriptName'];
      }
      if (isset($vals['scriptPath'])) {
        $this->scriptPath = $vals['scriptPath'];
      }
      if (isset($vals['scriptMd5'])) {
        $this->scriptMd5 = $vals['scriptMd5'];
      }
      if (isset($vals['executableName'])) {
        $this->executableName = $vals['executableName'];
      }
      if (isset($vals['executablePath'])) {
        $this->executablePath = $vals['executablePath'];
      }
      if (isset($vals['executableMd5'])) {
        $this->executableMd5 = $vals['executableMd5'];
      }
      if (isset($vals['envVariables'])) {
        $this->envVariables = $vals['envVariables'];
      }
      if (isset($vals['parameter'])) {
        $this->parameter = $vals['parameter'];
      }
      if (isset($vals['resultAddress'])) {
        $this->resultAddress = $vals['resultAddress'];
      }
    }
  }

  public function getName() {
    return 'Context';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->taskId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->priority);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->jobExecutionMode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->jobReturnMode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timeout);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->programId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->bundleType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->programName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->scriptName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->scriptPath);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->scriptMd5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->executableName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->executablePath);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->executableMd5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->envVariables);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRUCT) {
            $this->parameter = new \com\softsec\tase\common\rpc\domain\job\JobParameter();
            $xfer += $this->parameter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->resultAddress);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Context');
    if ($this->taskId !== null) {
      $xfer += $output->writeFieldBegin('taskId', TType::I64, 1);
      $xfer += $output->writeI64($this->taskId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->priority !== null) {
      $xfer += $output->writeFieldBegin('priority', TType::I32, 2);
      $xfer += $output->writeI32($this->priority);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jobExecutionMode !== null) {
      $xfer += $output->writeFieldBegin('jobExecutionMode', TType::I32, 3);
      $xfer += $output->writeI32($this->jobExecutionMode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jobReturnMode !== null) {
      $xfer += $output->writeFieldBegin('jobReturnMode', TType::I32, 4);
      $xfer += $output->writeI32($this->jobReturnMode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timeout !== null) {
      $xfer += $output->writeFieldBegin('timeout', TType::I64, 5);
      $xfer += $output->writeI64($this->timeout);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->programId !== null) {
      $xfer += $output->writeFieldBegin('programId', TType::I64, 6);
      $xfer += $output->writeI64($this->programId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bundleType !== null) {
      $xfer += $output->writeFieldBegin('bundleType', TType::I32, 7);
      $xfer += $output->writeI32($this->bundleType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->programName !== null) {
      $xfer += $output->writeFieldBegin('programName', TType::STRING, 8);
      $xfer += $output->writeString($this->programName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->scriptName !== null) {
      $xfer += $output->writeFieldBegin('scriptName', TType::STRING, 9);
      $xfer += $output->writeString($this->scriptName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->scriptPath !== null) {
      $xfer += $output->writeFieldBegin('scriptPath', TType::STRING, 10);
      $xfer += $output->writeString($this->scriptPath);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->scriptMd5 !== null) {
      $xfer += $output->writeFieldBegin('scriptMd5', TType::STRING, 11);
      $xfer += $output->writeString($this->scriptMd5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->executableName !== null) {
      $xfer += $output->writeFieldBegin('executableName', TType::STRING, 12);
      $xfer += $output->writeString($this->executableName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->executablePath !== null) {
      $xfer += $output->writeFieldBegin('executablePath', TType::STRING, 13);
      $xfer += $output->writeString($this->executablePath);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->executableMd5 !== null) {
      $xfer += $output->writeFieldBegin('executableMd5', TType::STRING, 14);
      $xfer += $output->writeString($this->executableMd5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->envVariables !== null) {
      $xfer += $output->writeFieldBegin('envVariables', TType::STRING, 15);
      $xfer += $output->writeString($this->envVariables);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parameter !== null) {
      if (!is_object($this->parameter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('parameter', TType::STRUCT, 16);
      $xfer += $this->parameter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->resultAddress !== null) {
      $xfer += $output->writeFieldBegin('resultAddress', TType::STRING, 17);
      $xfer += $output->writeString($this->resultAddress);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


