<?php
namespace com\softsec\tase\common\rpc\domain\job;

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Exception\TApplicationException;


final class JobLifecycle {
  const ANALYSIS = 0;
  const REINFORCE = 1;
  static public $__names = array(
    0 => 'ANALYSIS',
    1 => 'REINFORCE',
  );
}

final class JobPhase {
  const INITIALIZE = 1;
  const PREPARE = 2;
  const GENERATE = 3;
  const VALIDATE = 4;
  const PRE_PROCESS = 5;
  const PRE_STATIC = 6;
  const ON_STATIC = 7;
  const POST_STATIC = 8;
  const TEST = 9;
  const EVALUATE = 10;
  const PRE_DYNAMIC = 11;
  const ON_DYNAMIC = 12;
  const POST_DYNAMIC = 13;
  const INTEGRATE = 14;
  const VERIFY = 15;
  const PACKAGE = 16;
  const DEPLOY = 17;
  static public $__names = array(
    1 => 'INITIALIZE',
    2 => 'PREPARE',
    3 => 'GENERATE',
    4 => 'VALIDATE',
    5 => 'PRE_PROCESS',
    6 => 'PRE_STATIC',
    7 => 'ON_STATIC',
    8 => 'POST_STATIC',
    9 => 'TEST',
    10 => 'EVALUATE',
    11 => 'PRE_DYNAMIC',
    12 => 'ON_DYNAMIC',
    13 => 'POST_DYNAMIC',
    14 => 'INTEGRATE',
    15 => 'VERIFY',
    16 => 'PACKAGE',
    17 => 'DEPLOY',
  );
}

final class JobDistributionMode {
  const SERIAL = 0;
  const PARALLEL = 1;
  static public $__names = array(
    0 => 'SERIAL',
    1 => 'PARALLEL',
  );
}

final class JobExecutionMode {
  const CONCURRENT = 0;
  const EXCLUSIVE = 1;
  static public $__names = array(
    0 => 'CONCURRENT',
    1 => 'EXCLUSIVE',
  );
}

final class JobReturnMode {
  const PASSIVE = 0;
  const ACTIVE = 1;
  static public $__names = array(
    0 => 'PASSIVE',
    1 => 'ACTIVE',
  );
}

final class JobStatus {
  const COMMITTED = 0;
  const SCHEDULED = 1;
  const ISSUE_FAILED = 2;
  const ISSUED = 3;
  const RUNNING = 4;
  const INTERRUPTED = 5;
  const KILLED = 6;
  const TIMEOUT = 7;
  const FAILURE = 8;
  const FINISHED = 9;
  static public $__names = array(
    0 => 'COMMITTED',
    1 => 'SCHEDULED',
    2 => 'ISSUE_FAILED',
    3 => 'ISSUED',
    4 => 'RUNNING',
    5 => 'INTERRUPTED',
    6 => 'KILLED',
    7 => 'TIMEOUT',
    8 => 'FAILURE',
    9 => 'FINISHED',
  );
}

final class JobPriority {
  const HIGHER = 1;
  const HIGH = 2;
  const MEDIUM = 3;
  const LOW = 4;
  const LOWER = 5;
  static public $__names = array(
    1 => 'HIGHER',
    2 => 'HIGH',
    3 => 'MEDIUM',
    4 => 'LOW',
    5 => 'LOWER',
  );
}

class JobOperationRequirement {
  static $_TSPEC;

  public $jobLifecycle = null;
  public $jobPhase = null;
  public $jobExecutionMode = null;
  public $jobReturnMode = null;
  public $timeout = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'jobLifecycle',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'jobPhase',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'jobExecutionMode',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'jobReturnMode',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'timeout',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['jobLifecycle'])) {
        $this->jobLifecycle = $vals['jobLifecycle'];
      }
      if (isset($vals['jobPhase'])) {
        $this->jobPhase = $vals['jobPhase'];
      }
      if (isset($vals['jobExecutionMode'])) {
        $this->jobExecutionMode = $vals['jobExecutionMode'];
      }
      if (isset($vals['jobReturnMode'])) {
        $this->jobReturnMode = $vals['jobReturnMode'];
      }
      if (isset($vals['timeout'])) {
        $this->timeout = $vals['timeout'];
      }
    }
  }

  public function getName() {
    return 'JobOperationRequirement';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->jobLifecycle);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->jobPhase);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->jobExecutionMode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->jobReturnMode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timeout);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JobOperationRequirement');
    if ($this->jobLifecycle !== null) {
      $xfer += $output->writeFieldBegin('jobLifecycle', TType::I32, 1);
      $xfer += $output->writeI32($this->jobLifecycle);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jobPhase !== null) {
      $xfer += $output->writeFieldBegin('jobPhase', TType::I32, 2);
      $xfer += $output->writeI32($this->jobPhase);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jobExecutionMode !== null) {
      $xfer += $output->writeFieldBegin('jobExecutionMode', TType::I32, 3);
      $xfer += $output->writeI32($this->jobExecutionMode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jobReturnMode !== null) {
      $xfer += $output->writeFieldBegin('jobReturnMode', TType::I32, 4);
      $xfer += $output->writeI32($this->jobReturnMode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timeout !== null) {
      $xfer += $output->writeFieldBegin('timeout', TType::I64, 5);
      $xfer += $output->writeI64($this->timeout);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class JobResourceRequirement {
  static $_TSPEC;

  public $jobLifecycle = null;
  public $jobPhase = null;
  public $programId = null;
  public $executorId = null;
  public $clusterType = null;
  public $nodeType = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'jobLifecycle',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'jobPhase',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'programId',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'executorId',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'clusterType',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'nodeType',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['jobLifecycle'])) {
        $this->jobLifecycle = $vals['jobLifecycle'];
      }
      if (isset($vals['jobPhase'])) {
        $this->jobPhase = $vals['jobPhase'];
      }
      if (isset($vals['programId'])) {
        $this->programId = $vals['programId'];
      }
      if (isset($vals['executorId'])) {
        $this->executorId = $vals['executorId'];
      }
      if (isset($vals['clusterType'])) {
        $this->clusterType = $vals['clusterType'];
      }
      if (isset($vals['nodeType'])) {
        $this->nodeType = $vals['nodeType'];
      }
    }
  }

  public function getName() {
    return 'JobResourceRequirement';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->jobLifecycle);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->jobPhase);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->programId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->executorId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->clusterType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->nodeType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JobResourceRequirement');
    if ($this->jobLifecycle !== null) {
      $xfer += $output->writeFieldBegin('jobLifecycle', TType::I32, 1);
      $xfer += $output->writeI32($this->jobLifecycle);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jobPhase !== null) {
      $xfer += $output->writeFieldBegin('jobPhase', TType::I32, 2);
      $xfer += $output->writeI32($this->jobPhase);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->programId !== null) {
      $xfer += $output->writeFieldBegin('programId', TType::I64, 3);
      $xfer += $output->writeI64($this->programId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->executorId !== null) {
      $xfer += $output->writeFieldBegin('executorId', TType::STRING, 4);
      $xfer += $output->writeString($this->executorId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clusterType !== null) {
      $xfer += $output->writeFieldBegin('clusterType', TType::I32, 5);
      $xfer += $output->writeI32($this->clusterType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nodeType !== null) {
      $xfer += $output->writeFieldBegin('nodeType', TType::I32, 6);
      $xfer += $output->writeI32($this->nodeType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContextParameter {
  static $_TSPEC;

  public $sequenceNum = null;
  public $option = null;
  public $content = null;
  public $needDownload = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sequenceNum',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'option',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'needDownload',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sequenceNum'])) {
        $this->sequenceNum = $vals['sequenceNum'];
      }
      if (isset($vals['option'])) {
        $this->option = $vals['option'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
      if (isset($vals['needDownload'])) {
        $this->needDownload = $vals['needDownload'];
      }
    }
  }

  public function getName() {
    return 'ContextParameter';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sequenceNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->option);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->needDownload);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContextParameter');
    if ($this->sequenceNum !== null) {
      $xfer += $output->writeFieldBegin('sequenceNum', TType::I32, 1);
      $xfer += $output->writeI32($this->sequenceNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->option !== null) {
      $xfer += $output->writeFieldBegin('option', TType::STRING, 2);
      $xfer += $output->writeString($this->option);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 3);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->needDownload !== null) {
      $xfer += $output->writeFieldBegin('needDownload', TType::BOOL, 4);
      $xfer += $output->writeBool($this->needDownload);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class JobParameter {
  static $_TSPEC;

  public $jobPhase = null;
  public $parameterList = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'jobPhase',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'parameterList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\com\softsec\tase\common\rpc\domain\job\ContextParameter',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['jobPhase'])) {
        $this->jobPhase = $vals['jobPhase'];
      }
      if (isset($vals['parameterList'])) {
        $this->parameterList = $vals['parameterList'];
      }
    }
  }

  public function getName() {
    return 'JobParameter';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->jobPhase);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->parameterList = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \com\softsec\tase\common\rpc\domain\job\ContextParameter();
              $xfer += $elem5->read($input);
              $this->parameterList []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JobParameter');
    if ($this->jobPhase !== null) {
      $xfer += $output->writeFieldBegin('jobPhase', TType::I32, 1);
      $xfer += $output->writeI32($this->jobPhase);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parameterList !== null) {
      if (!is_array($this->parameterList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('parameterList', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->parameterList));
        {
          foreach ($this->parameterList as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class JobReinforceRequest {
  static $_TSPEC;

  public $userId = null;
  public $appType = null;
  public $jobLifecycle = null;
  public $jobPhaseList = null;
  public $jobDistributionMode = null;
  public $jobPriority = null;
  public $jobOperationRequirementList = null;
  public $jobResourceRequirementList = null;
  public $jobParameterList = null;
  public $impatienceTime = null;
  public $appPath = null;
  public $appInfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'appType',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'jobLifecycle',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'jobPhaseList',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        5 => array(
          'var' => 'jobDistributionMode',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'jobPriority',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'jobOperationRequirementList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\com\softsec\tase\common\rpc\domain\job\JobOperationRequirement',
            ),
          ),
        8 => array(
          'var' => 'jobResourceRequirementList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\com\softsec\tase\common\rpc\domain\job\JobResourceRequirement',
            ),
          ),
        9 => array(
          'var' => 'jobParameterList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\com\softsec\tase\common\rpc\domain\job\JobParameter',
            ),
          ),
        10 => array(
          'var' => 'impatienceTime',
          'type' => TType::I64,
          ),
        12 => array(
          'var' => 'appPath',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'appInfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['appType'])) {
        $this->appType = $vals['appType'];
      }
      if (isset($vals['jobLifecycle'])) {
        $this->jobLifecycle = $vals['jobLifecycle'];
      }
      if (isset($vals['jobPhaseList'])) {
        $this->jobPhaseList = $vals['jobPhaseList'];
      }
      if (isset($vals['jobDistributionMode'])) {
        $this->jobDistributionMode = $vals['jobDistributionMode'];
      }
      if (isset($vals['jobPriority'])) {
        $this->jobPriority = $vals['jobPriority'];
      }
      if (isset($vals['jobOperationRequirementList'])) {
        $this->jobOperationRequirementList = $vals['jobOperationRequirementList'];
      }
      if (isset($vals['jobResourceRequirementList'])) {
        $this->jobResourceRequirementList = $vals['jobResourceRequirementList'];
      }
      if (isset($vals['jobParameterList'])) {
        $this->jobParameterList = $vals['jobParameterList'];
      }
      if (isset($vals['impatienceTime'])) {
        $this->impatienceTime = $vals['impatienceTime'];
      }
      if (isset($vals['appPath'])) {
        $this->appPath = $vals['appPath'];
      }
      if (isset($vals['appInfo'])) {
        $this->appInfo = $vals['appInfo'];
      }
    }
  }

  public function getName() {
    return 'JobReinforceRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->appType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->jobLifecycle);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->jobPhaseList = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $xfer += $input->readI32($elem12);
              $this->jobPhaseList []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->jobDistributionMode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->jobPriority);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::LST) {
            $this->jobOperationRequirementList = array();
            $_size13 = 0;
            $_etype16 = 0;
            $xfer += $input->readListBegin($_etype16, $_size13);
            for ($_i17 = 0; $_i17 < $_size13; ++$_i17)
            {
              $elem18 = null;
              $elem18 = new \com\softsec\tase\common\rpc\domain\job\JobOperationRequirement();
              $xfer += $elem18->read($input);
              $this->jobOperationRequirementList []= $elem18;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::LST) {
            $this->jobResourceRequirementList = array();
            $_size19 = 0;
            $_etype22 = 0;
            $xfer += $input->readListBegin($_etype22, $_size19);
            for ($_i23 = 0; $_i23 < $_size19; ++$_i23)
            {
              $elem24 = null;
              $elem24 = new \com\softsec\tase\common\rpc\domain\job\JobResourceRequirement();
              $xfer += $elem24->read($input);
              $this->jobResourceRequirementList []= $elem24;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::LST) {
            $this->jobParameterList = array();
            $_size25 = 0;
            $_etype28 = 0;
            $xfer += $input->readListBegin($_etype28, $_size25);
            for ($_i29 = 0; $_i29 < $_size25; ++$_i29)
            {
              $elem30 = null;
              $elem30 = new \com\softsec\tase\common\rpc\domain\job\JobParameter();
              $xfer += $elem30->read($input);
              $this->jobParameterList []= $elem30;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->impatienceTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appPath);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appInfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JobReinforceRequest');
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 1);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appType !== null) {
      $xfer += $output->writeFieldBegin('appType', TType::I32, 2);
      $xfer += $output->writeI32($this->appType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jobLifecycle !== null) {
      $xfer += $output->writeFieldBegin('jobLifecycle', TType::I32, 3);
      $xfer += $output->writeI32($this->jobLifecycle);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jobPhaseList !== null) {
      if (!is_array($this->jobPhaseList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('jobPhaseList', TType::LST, 4);
      {
        $output->writeListBegin(TType::I32, count($this->jobPhaseList));
        {
          foreach ($this->jobPhaseList as $iter31)
          {
            $xfer += $output->writeI32($iter31);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jobDistributionMode !== null) {
      $xfer += $output->writeFieldBegin('jobDistributionMode', TType::I32, 5);
      $xfer += $output->writeI32($this->jobDistributionMode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jobPriority !== null) {
      $xfer += $output->writeFieldBegin('jobPriority', TType::I32, 6);
      $xfer += $output->writeI32($this->jobPriority);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jobOperationRequirementList !== null) {
      if (!is_array($this->jobOperationRequirementList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('jobOperationRequirementList', TType::LST, 7);
      {
        $output->writeListBegin(TType::STRUCT, count($this->jobOperationRequirementList));
        {
          foreach ($this->jobOperationRequirementList as $iter32)
          {
            $xfer += $iter32->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jobResourceRequirementList !== null) {
      if (!is_array($this->jobResourceRequirementList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('jobResourceRequirementList', TType::LST, 8);
      {
        $output->writeListBegin(TType::STRUCT, count($this->jobResourceRequirementList));
        {
          foreach ($this->jobResourceRequirementList as $iter33)
          {
            $xfer += $iter33->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jobParameterList !== null) {
      if (!is_array($this->jobParameterList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('jobParameterList', TType::LST, 9);
      {
        $output->writeListBegin(TType::STRUCT, count($this->jobParameterList));
        {
          foreach ($this->jobParameterList as $iter34)
          {
            $xfer += $iter34->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->impatienceTime !== null) {
      $xfer += $output->writeFieldBegin('impatienceTime', TType::I64, 10);
      $xfer += $output->writeI64($this->impatienceTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appPath !== null) {
      $xfer += $output->writeFieldBegin('appPath', TType::STRING, 12);
      $xfer += $output->writeString($this->appPath);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appInfo !== null) {
      $xfer += $output->writeFieldBegin('appInfo', TType::STRING, 13);
      $xfer += $output->writeString($this->appInfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


