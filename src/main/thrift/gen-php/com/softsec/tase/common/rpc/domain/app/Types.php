<?php
namespace com\softsec\tase\common\rpc\domain\app;

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Exception\TApplicationException;


final class AppType {
  const COMMON = 0;
  const APK = 1;
  const IPA = 2;
  static public $__names = array(
    0 => 'COMMON',
    1 => 'APK',
    2 => 'IPA',
  );
}

final class OriginType {
  const OFFICIAL_STORE = 0;
  const UNOFFICIAL_STORE = 1;
  const USER = 2;
  const DEVICE = 3;
  static public $__names = array(
    0 => 'OFFICIAL_STORE',
    1 => 'UNOFFICIAL_STORE',
    2 => 'USER',
    3 => 'DEVICE',
  );
}

final class AppStatus {
  const INITIALIZED = 0;
  const PREPROCESSED = 1;
  const GENERATED = 2;
  static public $__names = array(
    0 => 'INITIALIZED',
    1 => 'PREPROCESSED',
    2 => 'GENERATED',
  );
}

final class FileStatus {
  const EVALUATED = 0;
  const STATIC = 1;
  const DYNAMIC = 2;
  const PACKAGED = 3;
  const DEPLOYED = 4;
  static public $__names = array(
    0 => 'EVALUATED',
    1 => 'STATIC',
    2 => 'DYNAMIC',
    3 => 'PACKAGED',
    4 => 'DEPLOYED',
  );
}

class AppAdvertiser {
  static $_TSPEC;

  public $advertiserName = null;
  public $advertiserWebsite = null;
  public $advertiserEmail = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'advertiserName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'advertiserWebsite',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'advertiserEmail',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['advertiserName'])) {
        $this->advertiserName = $vals['advertiserName'];
      }
      if (isset($vals['advertiserWebsite'])) {
        $this->advertiserWebsite = $vals['advertiserWebsite'];
      }
      if (isset($vals['advertiserEmail'])) {
        $this->advertiserEmail = $vals['advertiserEmail'];
      }
    }
  }

  public function getName() {
    return 'AppAdvertiser';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->advertiserName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->advertiserWebsite);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->advertiserEmail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AppAdvertiser');
    if ($this->advertiserName !== null) {
      $xfer += $output->writeFieldBegin('advertiserName', TType::STRING, 1);
      $xfer += $output->writeString($this->advertiserName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->advertiserWebsite !== null) {
      $xfer += $output->writeFieldBegin('advertiserWebsite', TType::STRING, 2);
      $xfer += $output->writeString($this->advertiserWebsite);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->advertiserEmail !== null) {
      $xfer += $output->writeFieldBegin('advertiserEmail', TType::STRING, 3);
      $xfer += $output->writeString($this->advertiserEmail);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AppComment {
  static $_TSPEC;

  public $userName = null;
  public $content = null;
  public $commentTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'commentTime',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userName'])) {
        $this->userName = $vals['userName'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
      if (isset($vals['commentTime'])) {
        $this->commentTime = $vals['commentTime'];
      }
    }
  }

  public function getName() {
    return 'AppComment';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->commentTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AppComment');
    if ($this->userName !== null) {
      $xfer += $output->writeFieldBegin('userName', TType::STRING, 1);
      $xfer += $output->writeString($this->userName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 2);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commentTime !== null) {
      $xfer += $output->writeFieldBegin('commentTime', TType::I64, 3);
      $xfer += $output->writeI64($this->commentTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AppExternalLink {
  static $_TSPEC;

  public $externalStoreName = null;
  public $externalUrl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'externalStoreName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'externalUrl',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['externalStoreName'])) {
        $this->externalStoreName = $vals['externalStoreName'];
      }
      if (isset($vals['externalUrl'])) {
        $this->externalUrl = $vals['externalUrl'];
      }
    }
  }

  public function getName() {
    return 'AppExternalLink';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->externalStoreName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->externalUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AppExternalLink');
    if ($this->externalStoreName !== null) {
      $xfer += $output->writeFieldBegin('externalStoreName', TType::STRING, 1);
      $xfer += $output->writeString($this->externalStoreName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->externalUrl !== null) {
      $xfer += $output->writeFieldBegin('externalUrl', TType::STRING, 2);
      $xfer += $output->writeString($this->externalUrl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AppPermission {
  static $_TSPEC;

  public $permissionGroup = null;
  public $permissionDesc = null;
  public $permissionDescFull = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'permissionGroup',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'permissionDesc',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'permissionDescFull',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['permissionGroup'])) {
        $this->permissionGroup = $vals['permissionGroup'];
      }
      if (isset($vals['permissionDesc'])) {
        $this->permissionDesc = $vals['permissionDesc'];
      }
      if (isset($vals['permissionDescFull'])) {
        $this->permissionDescFull = $vals['permissionDescFull'];
      }
    }
  }

  public function getName() {
    return 'AppPermission';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->permissionGroup);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->permissionDesc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->permissionDescFull);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AppPermission');
    if ($this->permissionGroup !== null) {
      $xfer += $output->writeFieldBegin('permissionGroup', TType::STRING, 1);
      $xfer += $output->writeString($this->permissionGroup);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->permissionDesc !== null) {
      $xfer += $output->writeFieldBegin('permissionDesc', TType::STRING, 2);
      $xfer += $output->writeString($this->permissionDesc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->permissionDescFull !== null) {
      $xfer += $output->writeFieldBegin('permissionDescFull', TType::STRING, 3);
      $xfer += $output->writeString($this->permissionDescFull);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AppAntivirus {
  static $_TSPEC;

  public $antivirusVendor = null;
  public $antivirusResult = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'antivirusVendor',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'antivirusResult',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['antivirusVendor'])) {
        $this->antivirusVendor = $vals['antivirusVendor'];
      }
      if (isset($vals['antivirusResult'])) {
        $this->antivirusResult = $vals['antivirusResult'];
      }
    }
  }

  public function getName() {
    return 'AppAntivirus';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->antivirusVendor);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->antivirusResult);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AppAntivirus');
    if ($this->antivirusVendor !== null) {
      $xfer += $output->writeFieldBegin('antivirusVendor', TType::STRING, 1);
      $xfer += $output->writeString($this->antivirusVendor);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->antivirusResult !== null) {
      $xfer += $output->writeFieldBegin('antivirusResult', TType::STRING, 2);
      $xfer += $output->writeString($this->antivirusResult);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AppWeb {
  static $_TSPEC;

  public $appType = null;
  public $originType = null;
  public $storeName = null;
  public $storeDisplayName = null;
  public $storeUrl = null;
  public $storeType = null;
  public $category = null;
  public $appName = null;
  public $innerId = null;
  public $appVersion = null;
  public $updatedTime = null;
  public $collectedTime = null;
  public $updateHistory = null;
  public $platform = null;
  public $osType = null;
  public $osVersion = null;
  public $device = null;
  public $country = null;
  public $language = null;
  public $description = null;
  public $size = null;
  public $price = null;
  public $url = null;
  public $downloadUrl = null;
  public $snapshotUrlList = null;
  public $logoUrl = null;
  public $developerName = null;
  public $developerWebsite = null;
  public $developerEmail = null;
  public $privacyPolicy = null;
  public $downloadFloor = null;
  public $downloadCeiling = null;
  public $rating = null;
  public $ratingCount = null;
  public $review = null;
  public $contentRating = null;
  public $appAdvertiserList = null;
  public $appAntivirusList = null;
  public $appCommentList = null;
  public $appExternalLinkList = null;
  public $appPermissionList = null;
  public $appChecksum = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'appType',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'originType',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'storeName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'storeDisplayName',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'storeUrl',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'storeType',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'category',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'appName',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'innerId',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'appVersion',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'updatedTime',
          'type' => TType::I64,
          ),
        12 => array(
          'var' => 'collectedTime',
          'type' => TType::I64,
          ),
        13 => array(
          'var' => 'updateHistory',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'platform',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'osType',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'osVersion',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'device',
          'type' => TType::STRING,
          ),
        18 => array(
          'var' => 'country',
          'type' => TType::STRING,
          ),
        19 => array(
          'var' => 'language',
          'type' => TType::STRING,
          ),
        20 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        21 => array(
          'var' => 'size',
          'type' => TType::STRING,
          ),
        22 => array(
          'var' => 'price',
          'type' => TType::STRING,
          ),
        23 => array(
          'var' => 'url',
          'type' => TType::STRING,
          ),
        24 => array(
          'var' => 'downloadUrl',
          'type' => TType::STRING,
          ),
        25 => array(
          'var' => 'snapshotUrlList',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        26 => array(
          'var' => 'logoUrl',
          'type' => TType::STRING,
          ),
        27 => array(
          'var' => 'developerName',
          'type' => TType::STRING,
          ),
        28 => array(
          'var' => 'developerWebsite',
          'type' => TType::STRING,
          ),
        29 => array(
          'var' => 'developerEmail',
          'type' => TType::STRING,
          ),
        30 => array(
          'var' => 'privacyPolicy',
          'type' => TType::STRING,
          ),
        31 => array(
          'var' => 'downloadFloor',
          'type' => TType::I64,
          ),
        32 => array(
          'var' => 'downloadCeiling',
          'type' => TType::I64,
          ),
        33 => array(
          'var' => 'rating',
          'type' => TType::DOUBLE,
          ),
        34 => array(
          'var' => 'ratingCount',
          'type' => TType::I64,
          ),
        35 => array(
          'var' => 'review',
          'type' => TType::STRING,
          ),
        36 => array(
          'var' => 'contentRating',
          'type' => TType::STRING,
          ),
        37 => array(
          'var' => 'appAdvertiserList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\com\softsec\tase\common\rpc\domain\app\AppAdvertiser',
            ),
          ),
        38 => array(
          'var' => 'appAntivirusList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\com\softsec\tase\common\rpc\domain\app\AppAntivirus',
            ),
          ),
        39 => array(
          'var' => 'appCommentList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\com\softsec\tase\common\rpc\domain\app\AppComment',
            ),
          ),
        40 => array(
          'var' => 'appExternalLinkList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\com\softsec\tase\common\rpc\domain\app\AppExternalLink',
            ),
          ),
        41 => array(
          'var' => 'appPermissionList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\com\softsec\tase\common\rpc\domain\app\AppPermission',
            ),
          ),
        42 => array(
          'var' => 'appChecksum',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['appType'])) {
        $this->appType = $vals['appType'];
      }
      if (isset($vals['originType'])) {
        $this->originType = $vals['originType'];
      }
      if (isset($vals['storeName'])) {
        $this->storeName = $vals['storeName'];
      }
      if (isset($vals['storeDisplayName'])) {
        $this->storeDisplayName = $vals['storeDisplayName'];
      }
      if (isset($vals['storeUrl'])) {
        $this->storeUrl = $vals['storeUrl'];
      }
      if (isset($vals['storeType'])) {
        $this->storeType = $vals['storeType'];
      }
      if (isset($vals['category'])) {
        $this->category = $vals['category'];
      }
      if (isset($vals['appName'])) {
        $this->appName = $vals['appName'];
      }
      if (isset($vals['innerId'])) {
        $this->innerId = $vals['innerId'];
      }
      if (isset($vals['appVersion'])) {
        $this->appVersion = $vals['appVersion'];
      }
      if (isset($vals['updatedTime'])) {
        $this->updatedTime = $vals['updatedTime'];
      }
      if (isset($vals['collectedTime'])) {
        $this->collectedTime = $vals['collectedTime'];
      }
      if (isset($vals['updateHistory'])) {
        $this->updateHistory = $vals['updateHistory'];
      }
      if (isset($vals['platform'])) {
        $this->platform = $vals['platform'];
      }
      if (isset($vals['osType'])) {
        $this->osType = $vals['osType'];
      }
      if (isset($vals['osVersion'])) {
        $this->osVersion = $vals['osVersion'];
      }
      if (isset($vals['device'])) {
        $this->device = $vals['device'];
      }
      if (isset($vals['country'])) {
        $this->country = $vals['country'];
      }
      if (isset($vals['language'])) {
        $this->language = $vals['language'];
      }
      if (isset($vals['description'])) {
        $this->description = $vals['description'];
      }
      if (isset($vals['size'])) {
        $this->size = $vals['size'];
      }
      if (isset($vals['price'])) {
        $this->price = $vals['price'];
      }
      if (isset($vals['url'])) {
        $this->url = $vals['url'];
      }
      if (isset($vals['downloadUrl'])) {
        $this->downloadUrl = $vals['downloadUrl'];
      }
      if (isset($vals['snapshotUrlList'])) {
        $this->snapshotUrlList = $vals['snapshotUrlList'];
      }
      if (isset($vals['logoUrl'])) {
        $this->logoUrl = $vals['logoUrl'];
      }
      if (isset($vals['developerName'])) {
        $this->developerName = $vals['developerName'];
      }
      if (isset($vals['developerWebsite'])) {
        $this->developerWebsite = $vals['developerWebsite'];
      }
      if (isset($vals['developerEmail'])) {
        $this->developerEmail = $vals['developerEmail'];
      }
      if (isset($vals['privacyPolicy'])) {
        $this->privacyPolicy = $vals['privacyPolicy'];
      }
      if (isset($vals['downloadFloor'])) {
        $this->downloadFloor = $vals['downloadFloor'];
      }
      if (isset($vals['downloadCeiling'])) {
        $this->downloadCeiling = $vals['downloadCeiling'];
      }
      if (isset($vals['rating'])) {
        $this->rating = $vals['rating'];
      }
      if (isset($vals['ratingCount'])) {
        $this->ratingCount = $vals['ratingCount'];
      }
      if (isset($vals['review'])) {
        $this->review = $vals['review'];
      }
      if (isset($vals['contentRating'])) {
        $this->contentRating = $vals['contentRating'];
      }
      if (isset($vals['appAdvertiserList'])) {
        $this->appAdvertiserList = $vals['appAdvertiserList'];
      }
      if (isset($vals['appAntivirusList'])) {
        $this->appAntivirusList = $vals['appAntivirusList'];
      }
      if (isset($vals['appCommentList'])) {
        $this->appCommentList = $vals['appCommentList'];
      }
      if (isset($vals['appExternalLinkList'])) {
        $this->appExternalLinkList = $vals['appExternalLinkList'];
      }
      if (isset($vals['appPermissionList'])) {
        $this->appPermissionList = $vals['appPermissionList'];
      }
      if (isset($vals['appChecksum'])) {
        $this->appChecksum = $vals['appChecksum'];
      }
    }
  }

  public function getName() {
    return 'AppWeb';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->appType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->originType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->storeName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->storeDisplayName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->storeUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->storeType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->category);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->innerId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appVersion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->updatedTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->collectedTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->updateHistory);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->platform);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->osType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->osVersion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->device);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->country);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->language);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->description);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->downloadUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::LST) {
            $this->snapshotUrlList = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readString($elem5);
              $this->snapshotUrlList []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 26:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->logoUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 27:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->developerName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 28:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->developerWebsite);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 29:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->developerEmail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 30:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->privacyPolicy);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 31:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->downloadFloor);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 32:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->downloadCeiling);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 33:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->rating);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 34:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->ratingCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 35:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->review);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 36:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->contentRating);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 37:
          if ($ftype == TType::LST) {
            $this->appAdvertiserList = array();
            $_size6 = 0;
            $_etype9 = 0;
            $xfer += $input->readListBegin($_etype9, $_size6);
            for ($_i10 = 0; $_i10 < $_size6; ++$_i10)
            {
              $elem11 = null;
              $elem11 = new \com\softsec\tase\common\rpc\domain\app\AppAdvertiser();
              $xfer += $elem11->read($input);
              $this->appAdvertiserList []= $elem11;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 38:
          if ($ftype == TType::LST) {
            $this->appAntivirusList = array();
            $_size12 = 0;
            $_etype15 = 0;
            $xfer += $input->readListBegin($_etype15, $_size12);
            for ($_i16 = 0; $_i16 < $_size12; ++$_i16)
            {
              $elem17 = null;
              $elem17 = new \com\softsec\tase\common\rpc\domain\app\AppAntivirus();
              $xfer += $elem17->read($input);
              $this->appAntivirusList []= $elem17;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 39:
          if ($ftype == TType::LST) {
            $this->appCommentList = array();
            $_size18 = 0;
            $_etype21 = 0;
            $xfer += $input->readListBegin($_etype21, $_size18);
            for ($_i22 = 0; $_i22 < $_size18; ++$_i22)
            {
              $elem23 = null;
              $elem23 = new \com\softsec\tase\common\rpc\domain\app\AppComment();
              $xfer += $elem23->read($input);
              $this->appCommentList []= $elem23;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 40:
          if ($ftype == TType::LST) {
            $this->appExternalLinkList = array();
            $_size24 = 0;
            $_etype27 = 0;
            $xfer += $input->readListBegin($_etype27, $_size24);
            for ($_i28 = 0; $_i28 < $_size24; ++$_i28)
            {
              $elem29 = null;
              $elem29 = new \com\softsec\tase\common\rpc\domain\app\AppExternalLink();
              $xfer += $elem29->read($input);
              $this->appExternalLinkList []= $elem29;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 41:
          if ($ftype == TType::LST) {
            $this->appPermissionList = array();
            $_size30 = 0;
            $_etype33 = 0;
            $xfer += $input->readListBegin($_etype33, $_size30);
            for ($_i34 = 0; $_i34 < $_size30; ++$_i34)
            {
              $elem35 = null;
              $elem35 = new \com\softsec\tase\common\rpc\domain\app\AppPermission();
              $xfer += $elem35->read($input);
              $this->appPermissionList []= $elem35;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 42:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appChecksum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AppWeb');
    if ($this->appType !== null) {
      $xfer += $output->writeFieldBegin('appType', TType::I32, 1);
      $xfer += $output->writeI32($this->appType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->originType !== null) {
      $xfer += $output->writeFieldBegin('originType', TType::I32, 2);
      $xfer += $output->writeI32($this->originType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->storeName !== null) {
      $xfer += $output->writeFieldBegin('storeName', TType::STRING, 3);
      $xfer += $output->writeString($this->storeName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->storeDisplayName !== null) {
      $xfer += $output->writeFieldBegin('storeDisplayName', TType::STRING, 4);
      $xfer += $output->writeString($this->storeDisplayName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->storeUrl !== null) {
      $xfer += $output->writeFieldBegin('storeUrl', TType::STRING, 5);
      $xfer += $output->writeString($this->storeUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->storeType !== null) {
      $xfer += $output->writeFieldBegin('storeType', TType::I32, 6);
      $xfer += $output->writeI32($this->storeType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->category !== null) {
      $xfer += $output->writeFieldBegin('category', TType::STRING, 7);
      $xfer += $output->writeString($this->category);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appName !== null) {
      $xfer += $output->writeFieldBegin('appName', TType::STRING, 8);
      $xfer += $output->writeString($this->appName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->innerId !== null) {
      $xfer += $output->writeFieldBegin('innerId', TType::STRING, 9);
      $xfer += $output->writeString($this->innerId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appVersion !== null) {
      $xfer += $output->writeFieldBegin('appVersion', TType::STRING, 10);
      $xfer += $output->writeString($this->appVersion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updatedTime !== null) {
      $xfer += $output->writeFieldBegin('updatedTime', TType::I64, 11);
      $xfer += $output->writeI64($this->updatedTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->collectedTime !== null) {
      $xfer += $output->writeFieldBegin('collectedTime', TType::I64, 12);
      $xfer += $output->writeI64($this->collectedTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updateHistory !== null) {
      $xfer += $output->writeFieldBegin('updateHistory', TType::STRING, 13);
      $xfer += $output->writeString($this->updateHistory);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->platform !== null) {
      $xfer += $output->writeFieldBegin('platform', TType::STRING, 14);
      $xfer += $output->writeString($this->platform);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->osType !== null) {
      $xfer += $output->writeFieldBegin('osType', TType::STRING, 15);
      $xfer += $output->writeString($this->osType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->osVersion !== null) {
      $xfer += $output->writeFieldBegin('osVersion', TType::STRING, 16);
      $xfer += $output->writeString($this->osVersion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->device !== null) {
      $xfer += $output->writeFieldBegin('device', TType::STRING, 17);
      $xfer += $output->writeString($this->device);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->country !== null) {
      $xfer += $output->writeFieldBegin('country', TType::STRING, 18);
      $xfer += $output->writeString($this->country);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->language !== null) {
      $xfer += $output->writeFieldBegin('language', TType::STRING, 19);
      $xfer += $output->writeString($this->language);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->description !== null) {
      $xfer += $output->writeFieldBegin('description', TType::STRING, 20);
      $xfer += $output->writeString($this->description);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->size !== null) {
      $xfer += $output->writeFieldBegin('size', TType::STRING, 21);
      $xfer += $output->writeString($this->size);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->price !== null) {
      $xfer += $output->writeFieldBegin('price', TType::STRING, 22);
      $xfer += $output->writeString($this->price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->url !== null) {
      $xfer += $output->writeFieldBegin('url', TType::STRING, 23);
      $xfer += $output->writeString($this->url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->downloadUrl !== null) {
      $xfer += $output->writeFieldBegin('downloadUrl', TType::STRING, 24);
      $xfer += $output->writeString($this->downloadUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->snapshotUrlList !== null) {
      if (!is_array($this->snapshotUrlList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('snapshotUrlList', TType::LST, 25);
      {
        $output->writeListBegin(TType::STRING, count($this->snapshotUrlList));
        {
          foreach ($this->snapshotUrlList as $iter36)
          {
            $xfer += $output->writeString($iter36);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->logoUrl !== null) {
      $xfer += $output->writeFieldBegin('logoUrl', TType::STRING, 26);
      $xfer += $output->writeString($this->logoUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->developerName !== null) {
      $xfer += $output->writeFieldBegin('developerName', TType::STRING, 27);
      $xfer += $output->writeString($this->developerName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->developerWebsite !== null) {
      $xfer += $output->writeFieldBegin('developerWebsite', TType::STRING, 28);
      $xfer += $output->writeString($this->developerWebsite);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->developerEmail !== null) {
      $xfer += $output->writeFieldBegin('developerEmail', TType::STRING, 29);
      $xfer += $output->writeString($this->developerEmail);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->privacyPolicy !== null) {
      $xfer += $output->writeFieldBegin('privacyPolicy', TType::STRING, 30);
      $xfer += $output->writeString($this->privacyPolicy);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->downloadFloor !== null) {
      $xfer += $output->writeFieldBegin('downloadFloor', TType::I64, 31);
      $xfer += $output->writeI64($this->downloadFloor);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->downloadCeiling !== null) {
      $xfer += $output->writeFieldBegin('downloadCeiling', TType::I64, 32);
      $xfer += $output->writeI64($this->downloadCeiling);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rating !== null) {
      $xfer += $output->writeFieldBegin('rating', TType::DOUBLE, 33);
      $xfer += $output->writeDouble($this->rating);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ratingCount !== null) {
      $xfer += $output->writeFieldBegin('ratingCount', TType::I64, 34);
      $xfer += $output->writeI64($this->ratingCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->review !== null) {
      $xfer += $output->writeFieldBegin('review', TType::STRING, 35);
      $xfer += $output->writeString($this->review);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contentRating !== null) {
      $xfer += $output->writeFieldBegin('contentRating', TType::STRING, 36);
      $xfer += $output->writeString($this->contentRating);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appAdvertiserList !== null) {
      if (!is_array($this->appAdvertiserList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('appAdvertiserList', TType::LST, 37);
      {
        $output->writeListBegin(TType::STRUCT, count($this->appAdvertiserList));
        {
          foreach ($this->appAdvertiserList as $iter37)
          {
            $xfer += $iter37->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appAntivirusList !== null) {
      if (!is_array($this->appAntivirusList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('appAntivirusList', TType::LST, 38);
      {
        $output->writeListBegin(TType::STRUCT, count($this->appAntivirusList));
        {
          foreach ($this->appAntivirusList as $iter38)
          {
            $xfer += $iter38->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appCommentList !== null) {
      if (!is_array($this->appCommentList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('appCommentList', TType::LST, 39);
      {
        $output->writeListBegin(TType::STRUCT, count($this->appCommentList));
        {
          foreach ($this->appCommentList as $iter39)
          {
            $xfer += $iter39->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appExternalLinkList !== null) {
      if (!is_array($this->appExternalLinkList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('appExternalLinkList', TType::LST, 40);
      {
        $output->writeListBegin(TType::STRUCT, count($this->appExternalLinkList));
        {
          foreach ($this->appExternalLinkList as $iter40)
          {
            $xfer += $iter40->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appPermissionList !== null) {
      if (!is_array($this->appPermissionList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('appPermissionList', TType::LST, 41);
      {
        $output->writeListBegin(TType::STRUCT, count($this->appPermissionList));
        {
          foreach ($this->appPermissionList as $iter41)
          {
            $xfer += $iter41->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appChecksum !== null) {
      $xfer += $output->writeFieldBegin('appChecksum', TType::STRING, 42);
      $xfer += $output->writeString($this->appChecksum);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AppTransfer {
  static $_TSPEC;

  public $appChecksum = null;
  public $appName = null;
  public $wrapperId = null;
  public $wrapperName = null;
  public $subject = null;
  public $version = null;
  public $updateTime = null;
  public $savedTime = null;
  public $size = null;
  public $description = null;
  public $country = null;
  public $price = null;
  public $developer = null;
  public $device = null;
  public $os = null;
  public $osVersion = null;
  public $url = null;
  public $downUrl = null;
  public $downloadId = null;
  public $snapshotUrlList = null;
  public $downloadNum = null;
  public $isImageLoaded = null;
  public $isApkLoaded = null;
  public $appPath = null;
  public $checkValue = null;
  public $risk = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'appChecksum',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'appName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'wrapperId',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'wrapperName',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'subject',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'version',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'updateTime',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'savedTime',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'size',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'country',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'price',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'developer',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'device',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'os',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'osVersion',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'url',
          'type' => TType::STRING,
          ),
        18 => array(
          'var' => 'downUrl',
          'type' => TType::STRING,
          ),
        19 => array(
          'var' => 'downloadId',
          'type' => TType::STRING,
          ),
        20 => array(
          'var' => 'snapshotUrlList',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        21 => array(
          'var' => 'downloadNum',
          'type' => TType::I32,
          ),
        22 => array(
          'var' => 'isImageLoaded',
          'type' => TType::I32,
          ),
        23 => array(
          'var' => 'isApkLoaded',
          'type' => TType::I32,
          ),
        24 => array(
          'var' => 'appPath',
          'type' => TType::STRING,
          ),
        25 => array(
          'var' => 'checkValue',
          'type' => TType::I32,
          ),
        26 => array(
          'var' => 'risk',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['appChecksum'])) {
        $this->appChecksum = $vals['appChecksum'];
      }
      if (isset($vals['appName'])) {
        $this->appName = $vals['appName'];
      }
      if (isset($vals['wrapperId'])) {
        $this->wrapperId = $vals['wrapperId'];
      }
      if (isset($vals['wrapperName'])) {
        $this->wrapperName = $vals['wrapperName'];
      }
      if (isset($vals['subject'])) {
        $this->subject = $vals['subject'];
      }
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
      if (isset($vals['updateTime'])) {
        $this->updateTime = $vals['updateTime'];
      }
      if (isset($vals['savedTime'])) {
        $this->savedTime = $vals['savedTime'];
      }
      if (isset($vals['size'])) {
        $this->size = $vals['size'];
      }
      if (isset($vals['description'])) {
        $this->description = $vals['description'];
      }
      if (isset($vals['country'])) {
        $this->country = $vals['country'];
      }
      if (isset($vals['price'])) {
        $this->price = $vals['price'];
      }
      if (isset($vals['developer'])) {
        $this->developer = $vals['developer'];
      }
      if (isset($vals['device'])) {
        $this->device = $vals['device'];
      }
      if (isset($vals['os'])) {
        $this->os = $vals['os'];
      }
      if (isset($vals['osVersion'])) {
        $this->osVersion = $vals['osVersion'];
      }
      if (isset($vals['url'])) {
        $this->url = $vals['url'];
      }
      if (isset($vals['downUrl'])) {
        $this->downUrl = $vals['downUrl'];
      }
      if (isset($vals['downloadId'])) {
        $this->downloadId = $vals['downloadId'];
      }
      if (isset($vals['snapshotUrlList'])) {
        $this->snapshotUrlList = $vals['snapshotUrlList'];
      }
      if (isset($vals['downloadNum'])) {
        $this->downloadNum = $vals['downloadNum'];
      }
      if (isset($vals['isImageLoaded'])) {
        $this->isImageLoaded = $vals['isImageLoaded'];
      }
      if (isset($vals['isApkLoaded'])) {
        $this->isApkLoaded = $vals['isApkLoaded'];
      }
      if (isset($vals['appPath'])) {
        $this->appPath = $vals['appPath'];
      }
      if (isset($vals['checkValue'])) {
        $this->checkValue = $vals['checkValue'];
      }
      if (isset($vals['risk'])) {
        $this->risk = $vals['risk'];
      }
    }
  }

  public function getName() {
    return 'AppTransfer';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appChecksum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->wrapperId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->wrapperName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->subject);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->updateTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->savedTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->description);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->country);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->developer);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->device);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->os);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->osVersion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->downUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->downloadId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::LST) {
            $this->snapshotUrlList = array();
            $_size42 = 0;
            $_etype45 = 0;
            $xfer += $input->readListBegin($_etype45, $_size42);
            for ($_i46 = 0; $_i46 < $_size42; ++$_i46)
            {
              $elem47 = null;
              $xfer += $input->readString($elem47);
              $this->snapshotUrlList []= $elem47;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->downloadNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isImageLoaded);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isApkLoaded);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appPath);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->checkValue);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 26:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->risk);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AppTransfer');
    if ($this->appChecksum !== null) {
      $xfer += $output->writeFieldBegin('appChecksum', TType::STRING, 1);
      $xfer += $output->writeString($this->appChecksum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appName !== null) {
      $xfer += $output->writeFieldBegin('appName', TType::STRING, 2);
      $xfer += $output->writeString($this->appName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wrapperId !== null) {
      $xfer += $output->writeFieldBegin('wrapperId', TType::STRING, 3);
      $xfer += $output->writeString($this->wrapperId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wrapperName !== null) {
      $xfer += $output->writeFieldBegin('wrapperName', TType::STRING, 4);
      $xfer += $output->writeString($this->wrapperName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->subject !== null) {
      $xfer += $output->writeFieldBegin('subject', TType::STRING, 5);
      $xfer += $output->writeString($this->subject);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->version !== null) {
      $xfer += $output->writeFieldBegin('version', TType::STRING, 6);
      $xfer += $output->writeString($this->version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updateTime !== null) {
      $xfer += $output->writeFieldBegin('updateTime', TType::I64, 7);
      $xfer += $output->writeI64($this->updateTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->savedTime !== null) {
      $xfer += $output->writeFieldBegin('savedTime', TType::I64, 8);
      $xfer += $output->writeI64($this->savedTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->size !== null) {
      $xfer += $output->writeFieldBegin('size', TType::STRING, 9);
      $xfer += $output->writeString($this->size);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->description !== null) {
      $xfer += $output->writeFieldBegin('description', TType::STRING, 10);
      $xfer += $output->writeString($this->description);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->country !== null) {
      $xfer += $output->writeFieldBegin('country', TType::STRING, 11);
      $xfer += $output->writeString($this->country);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->price !== null) {
      $xfer += $output->writeFieldBegin('price', TType::STRING, 12);
      $xfer += $output->writeString($this->price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->developer !== null) {
      $xfer += $output->writeFieldBegin('developer', TType::STRING, 13);
      $xfer += $output->writeString($this->developer);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->device !== null) {
      $xfer += $output->writeFieldBegin('device', TType::STRING, 14);
      $xfer += $output->writeString($this->device);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->os !== null) {
      $xfer += $output->writeFieldBegin('os', TType::STRING, 15);
      $xfer += $output->writeString($this->os);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->osVersion !== null) {
      $xfer += $output->writeFieldBegin('osVersion', TType::STRING, 16);
      $xfer += $output->writeString($this->osVersion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->url !== null) {
      $xfer += $output->writeFieldBegin('url', TType::STRING, 17);
      $xfer += $output->writeString($this->url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->downUrl !== null) {
      $xfer += $output->writeFieldBegin('downUrl', TType::STRING, 18);
      $xfer += $output->writeString($this->downUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->downloadId !== null) {
      $xfer += $output->writeFieldBegin('downloadId', TType::STRING, 19);
      $xfer += $output->writeString($this->downloadId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->snapshotUrlList !== null) {
      if (!is_array($this->snapshotUrlList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('snapshotUrlList', TType::LST, 20);
      {
        $output->writeListBegin(TType::STRING, count($this->snapshotUrlList));
        {
          foreach ($this->snapshotUrlList as $iter48)
          {
            $xfer += $output->writeString($iter48);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->downloadNum !== null) {
      $xfer += $output->writeFieldBegin('downloadNum', TType::I32, 21);
      $xfer += $output->writeI32($this->downloadNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isImageLoaded !== null) {
      $xfer += $output->writeFieldBegin('isImageLoaded', TType::I32, 22);
      $xfer += $output->writeI32($this->isImageLoaded);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isApkLoaded !== null) {
      $xfer += $output->writeFieldBegin('isApkLoaded', TType::I32, 23);
      $xfer += $output->writeI32($this->isApkLoaded);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appPath !== null) {
      $xfer += $output->writeFieldBegin('appPath', TType::STRING, 24);
      $xfer += $output->writeString($this->appPath);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->checkValue !== null) {
      $xfer += $output->writeFieldBegin('checkValue', TType::I32, 25);
      $xfer += $output->writeI32($this->checkValue);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->risk !== null) {
      $xfer += $output->writeFieldBegin('risk', TType::I32, 26);
      $xfer += $output->writeI32($this->risk);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


