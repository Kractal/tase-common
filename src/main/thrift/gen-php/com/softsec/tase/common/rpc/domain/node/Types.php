<?php
namespace com\softsec\tase\common\rpc\domain\node;

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Exception\TApplicationException;


final class ClusterType {
  const DEDICATED = 0;
  const GENERAL = 1;
  static public $__names = array(
    0 => 'DEDICATED',
    1 => 'GENERAL',
  );
}

final class NodeType {
  const BASIC = 0;
  const INTERNET_ACCESSIBLE = 1;
  const ANTIVIRUS = 2;
  const ANDROID_ACCESSIBLE = 4;
  const IOS_ACCESSIBLE = 8;
  static public $__names = array(
    0 => 'BASIC',
    1 => 'INTERNET_ACCESSIBLE',
    2 => 'ANTIVIRUS',
    4 => 'ANDROID_ACCESSIBLE',
    8 => 'IOS_ACCESSIBLE',
  );
}

class NodeRuntime {
  static $_TSPEC;

  public $cpuCount = null;
  public $cpuCores = null;
  public $cpuMhz = null;
  public $cpuUsedPerc = null;
  public $freeMem = null;
  public $jvmFreeMem = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cpuCount',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'cpuCores',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'cpuMhz',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'cpuUsedPerc',
          'type' => TType::DOUBLE,
          ),
        5 => array(
          'var' => 'freeMem',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'jvmFreeMem',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['cpuCount'])) {
        $this->cpuCount = $vals['cpuCount'];
      }
      if (isset($vals['cpuCores'])) {
        $this->cpuCores = $vals['cpuCores'];
      }
      if (isset($vals['cpuMhz'])) {
        $this->cpuMhz = $vals['cpuMhz'];
      }
      if (isset($vals['cpuUsedPerc'])) {
        $this->cpuUsedPerc = $vals['cpuUsedPerc'];
      }
      if (isset($vals['freeMem'])) {
        $this->freeMem = $vals['freeMem'];
      }
      if (isset($vals['jvmFreeMem'])) {
        $this->jvmFreeMem = $vals['jvmFreeMem'];
      }
    }
  }

  public function getName() {
    return 'NodeRuntime';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cpuCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cpuCores);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cpuMhz);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->cpuUsedPerc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->freeMem);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->jvmFreeMem);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NodeRuntime');
    if ($this->cpuCount !== null) {
      $xfer += $output->writeFieldBegin('cpuCount', TType::I32, 1);
      $xfer += $output->writeI32($this->cpuCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cpuCores !== null) {
      $xfer += $output->writeFieldBegin('cpuCores', TType::I32, 2);
      $xfer += $output->writeI32($this->cpuCores);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cpuMhz !== null) {
      $xfer += $output->writeFieldBegin('cpuMhz', TType::I32, 3);
      $xfer += $output->writeI32($this->cpuMhz);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cpuUsedPerc !== null) {
      $xfer += $output->writeFieldBegin('cpuUsedPerc', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->cpuUsedPerc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->freeMem !== null) {
      $xfer += $output->writeFieldBegin('freeMem', TType::I64, 5);
      $xfer += $output->writeI64($this->freeMem);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jvmFreeMem !== null) {
      $xfer += $output->writeFieldBegin('jvmFreeMem', TType::I64, 6);
      $xfer += $output->writeI64($this->jvmFreeMem);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NodePayload {
  static $_TSPEC;

  public $nodeId = null;
  public $clusterType = null;
  public $nodeTypeList = null;
  public $nodeRuntime = null;
  public $queueLimit = null;
  public $queueNum = null;
  public $expectedDelay = null;
  public $preferredProgramTypeList = null;
  public $preferredProgramIdList = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'nodeId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'clusterType',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'nodeTypeList',
          'type' => TType::SET,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        4 => array(
          'var' => 'nodeRuntime',
          'type' => TType::STRUCT,
          'class' => '\com\softsec\tase\common\rpc\domain\node\NodeRuntime',
          ),
        5 => array(
          'var' => 'queueLimit',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'queueNum',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'expectedDelay',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'preferredProgramTypeList',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        9 => array(
          'var' => 'preferredProgramIdList',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['nodeId'])) {
        $this->nodeId = $vals['nodeId'];
      }
      if (isset($vals['clusterType'])) {
        $this->clusterType = $vals['clusterType'];
      }
      if (isset($vals['nodeTypeList'])) {
        $this->nodeTypeList = $vals['nodeTypeList'];
      }
      if (isset($vals['nodeRuntime'])) {
        $this->nodeRuntime = $vals['nodeRuntime'];
      }
      if (isset($vals['queueLimit'])) {
        $this->queueLimit = $vals['queueLimit'];
      }
      if (isset($vals['queueNum'])) {
        $this->queueNum = $vals['queueNum'];
      }
      if (isset($vals['expectedDelay'])) {
        $this->expectedDelay = $vals['expectedDelay'];
      }
      if (isset($vals['preferredProgramTypeList'])) {
        $this->preferredProgramTypeList = $vals['preferredProgramTypeList'];
      }
      if (isset($vals['preferredProgramIdList'])) {
        $this->preferredProgramIdList = $vals['preferredProgramIdList'];
      }
    }
  }

  public function getName() {
    return 'NodePayload';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nodeId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->clusterType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::SET) {
            $this->nodeTypeList = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readSetBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readI32($elem5);
              if (is_scalar($elem5)) {
                $this->nodeTypeList[$elem5] = true;
              } else {
                $this->nodeTypeList []= $elem5;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->nodeRuntime = new \com\softsec\tase\common\rpc\domain\node\NodeRuntime();
            $xfer += $this->nodeRuntime->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->queueLimit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->queueNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->expectedDelay);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::LST) {
            $this->preferredProgramTypeList = array();
            $_size6 = 0;
            $_etype9 = 0;
            $xfer += $input->readListBegin($_etype9, $_size6);
            for ($_i10 = 0; $_i10 < $_size6; ++$_i10)
            {
              $elem11 = null;
              $xfer += $input->readI32($elem11);
              $this->preferredProgramTypeList []= $elem11;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::LST) {
            $this->preferredProgramIdList = array();
            $_size12 = 0;
            $_etype15 = 0;
            $xfer += $input->readListBegin($_etype15, $_size12);
            for ($_i16 = 0; $_i16 < $_size12; ++$_i16)
            {
              $elem17 = null;
              $xfer += $input->readI64($elem17);
              $this->preferredProgramIdList []= $elem17;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NodePayload');
    if ($this->nodeId !== null) {
      $xfer += $output->writeFieldBegin('nodeId', TType::STRING, 1);
      $xfer += $output->writeString($this->nodeId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clusterType !== null) {
      $xfer += $output->writeFieldBegin('clusterType', TType::I32, 2);
      $xfer += $output->writeI32($this->clusterType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nodeTypeList !== null) {
      if (!is_array($this->nodeTypeList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('nodeTypeList', TType::SET, 3);
      {
        $output->writeSetBegin(TType::I32, count($this->nodeTypeList));
        {
          foreach ($this->nodeTypeList as $iter18 => $iter19)
          {
            if (is_scalar($iter19)) {
            $xfer += $output->writeI32($iter18);
            } else {
            $xfer += $output->writeI32($iter19);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nodeRuntime !== null) {
      if (!is_object($this->nodeRuntime)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('nodeRuntime', TType::STRUCT, 4);
      $xfer += $this->nodeRuntime->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->queueLimit !== null) {
      $xfer += $output->writeFieldBegin('queueLimit', TType::I32, 5);
      $xfer += $output->writeI32($this->queueLimit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->queueNum !== null) {
      $xfer += $output->writeFieldBegin('queueNum', TType::I32, 6);
      $xfer += $output->writeI32($this->queueNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expectedDelay !== null) {
      $xfer += $output->writeFieldBegin('expectedDelay', TType::I64, 7);
      $xfer += $output->writeI64($this->expectedDelay);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->preferredProgramTypeList !== null) {
      if (!is_array($this->preferredProgramTypeList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('preferredProgramTypeList', TType::LST, 8);
      {
        $output->writeListBegin(TType::I32, count($this->preferredProgramTypeList));
        {
          foreach ($this->preferredProgramTypeList as $iter20)
          {
            $xfer += $output->writeI32($iter20);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->preferredProgramIdList !== null) {
      if (!is_array($this->preferredProgramIdList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('preferredProgramIdList', TType::LST, 9);
      {
        $output->writeListBegin(TType::I64, count($this->preferredProgramIdList));
        {
          foreach ($this->preferredProgramIdList as $iter21)
          {
            $xfer += $output->writeI64($iter21);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NodeInfo {
  static $_TSPEC;

  public $nodeId = null;
  public $cpuVendor = null;
  public $cpuModel = null;
  public $cpuCores = null;
  public $cpuMhz = null;
  public $memSize = null;
  public $fsName = null;
  public $fsType = null;
  public $fsFormat = null;
  public $fsSize = null;
  public $osArch = null;
  public $osName = null;
  public $osDesc = null;
  public $osVersion = null;
  public $jvmName = null;
  public $jvmVersion = null;
  public $jvmMaxMem = null;
  public $nodeType = null;
  public $queueLimit = null;
  public $domain = null;
  public $macAddress = null;
  public $internetConnectivity = null;
  public $ipAddress = null;
  public $rpcPort = null;
  public $pid = null;
  public $user = null;
  public $startTime = null;
  public $procName = null;
  public $programIdList = null;
  public $cpuPerc = null;
  public $memUsed = null;
  public $jvmAllocMem = null;
  public $jvmFreeMem = null;
  public $fsAvail = null;
  public $fsUsed = null;
  public $fsUsedPerc = null;
  public $queueNum = null;
  public $configUpdated = null;
  public $payloadUpdated = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'nodeId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'cpuVendor',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'cpuModel',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'cpuCores',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'cpuMhz',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'memSize',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'fsName',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'fsType',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'fsFormat',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'fsSize',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'osArch',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'osName',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'osDesc',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'osVersion',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'jvmName',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'jvmVersion',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'jvmMaxMem',
          'type' => TType::I32,
          ),
        18 => array(
          'var' => 'nodeType',
          'type' => TType::I32,
          ),
        19 => array(
          'var' => 'queueLimit',
          'type' => TType::I32,
          ),
        20 => array(
          'var' => 'domain',
          'type' => TType::STRING,
          ),
        21 => array(
          'var' => 'macAddress',
          'type' => TType::STRING,
          ),
        22 => array(
          'var' => 'internetConnectivity',
          'type' => TType::I32,
          ),
        23 => array(
          'var' => 'ipAddress',
          'type' => TType::STRING,
          ),
        24 => array(
          'var' => 'rpcPort',
          'type' => TType::I32,
          ),
        25 => array(
          'var' => 'pid',
          'type' => TType::I32,
          ),
        26 => array(
          'var' => 'user',
          'type' => TType::STRING,
          ),
        27 => array(
          'var' => 'startTime',
          'type' => TType::STRING,
          ),
        28 => array(
          'var' => 'procName',
          'type' => TType::STRING,
          ),
        29 => array(
          'var' => 'programIdList',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        30 => array(
          'var' => 'cpuPerc',
          'type' => TType::DOUBLE,
          ),
        31 => array(
          'var' => 'memUsed',
          'type' => TType::I32,
          ),
        32 => array(
          'var' => 'jvmAllocMem',
          'type' => TType::I32,
          ),
        33 => array(
          'var' => 'jvmFreeMem',
          'type' => TType::I32,
          ),
        34 => array(
          'var' => 'fsAvail',
          'type' => TType::I32,
          ),
        35 => array(
          'var' => 'fsUsed',
          'type' => TType::I32,
          ),
        36 => array(
          'var' => 'fsUsedPerc',
          'type' => TType::DOUBLE,
          ),
        37 => array(
          'var' => 'queueNum',
          'type' => TType::I32,
          ),
        38 => array(
          'var' => 'configUpdated',
          'type' => TType::I64,
          ),
        39 => array(
          'var' => 'payloadUpdated',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['nodeId'])) {
        $this->nodeId = $vals['nodeId'];
      }
      if (isset($vals['cpuVendor'])) {
        $this->cpuVendor = $vals['cpuVendor'];
      }
      if (isset($vals['cpuModel'])) {
        $this->cpuModel = $vals['cpuModel'];
      }
      if (isset($vals['cpuCores'])) {
        $this->cpuCores = $vals['cpuCores'];
      }
      if (isset($vals['cpuMhz'])) {
        $this->cpuMhz = $vals['cpuMhz'];
      }
      if (isset($vals['memSize'])) {
        $this->memSize = $vals['memSize'];
      }
      if (isset($vals['fsName'])) {
        $this->fsName = $vals['fsName'];
      }
      if (isset($vals['fsType'])) {
        $this->fsType = $vals['fsType'];
      }
      if (isset($vals['fsFormat'])) {
        $this->fsFormat = $vals['fsFormat'];
      }
      if (isset($vals['fsSize'])) {
        $this->fsSize = $vals['fsSize'];
      }
      if (isset($vals['osArch'])) {
        $this->osArch = $vals['osArch'];
      }
      if (isset($vals['osName'])) {
        $this->osName = $vals['osName'];
      }
      if (isset($vals['osDesc'])) {
        $this->osDesc = $vals['osDesc'];
      }
      if (isset($vals['osVersion'])) {
        $this->osVersion = $vals['osVersion'];
      }
      if (isset($vals['jvmName'])) {
        $this->jvmName = $vals['jvmName'];
      }
      if (isset($vals['jvmVersion'])) {
        $this->jvmVersion = $vals['jvmVersion'];
      }
      if (isset($vals['jvmMaxMem'])) {
        $this->jvmMaxMem = $vals['jvmMaxMem'];
      }
      if (isset($vals['nodeType'])) {
        $this->nodeType = $vals['nodeType'];
      }
      if (isset($vals['queueLimit'])) {
        $this->queueLimit = $vals['queueLimit'];
      }
      if (isset($vals['domain'])) {
        $this->domain = $vals['domain'];
      }
      if (isset($vals['macAddress'])) {
        $this->macAddress = $vals['macAddress'];
      }
      if (isset($vals['internetConnectivity'])) {
        $this->internetConnectivity = $vals['internetConnectivity'];
      }
      if (isset($vals['ipAddress'])) {
        $this->ipAddress = $vals['ipAddress'];
      }
      if (isset($vals['rpcPort'])) {
        $this->rpcPort = $vals['rpcPort'];
      }
      if (isset($vals['pid'])) {
        $this->pid = $vals['pid'];
      }
      if (isset($vals['user'])) {
        $this->user = $vals['user'];
      }
      if (isset($vals['startTime'])) {
        $this->startTime = $vals['startTime'];
      }
      if (isset($vals['procName'])) {
        $this->procName = $vals['procName'];
      }
      if (isset($vals['programIdList'])) {
        $this->programIdList = $vals['programIdList'];
      }
      if (isset($vals['cpuPerc'])) {
        $this->cpuPerc = $vals['cpuPerc'];
      }
      if (isset($vals['memUsed'])) {
        $this->memUsed = $vals['memUsed'];
      }
      if (isset($vals['jvmAllocMem'])) {
        $this->jvmAllocMem = $vals['jvmAllocMem'];
      }
      if (isset($vals['jvmFreeMem'])) {
        $this->jvmFreeMem = $vals['jvmFreeMem'];
      }
      if (isset($vals['fsAvail'])) {
        $this->fsAvail = $vals['fsAvail'];
      }
      if (isset($vals['fsUsed'])) {
        $this->fsUsed = $vals['fsUsed'];
      }
      if (isset($vals['fsUsedPerc'])) {
        $this->fsUsedPerc = $vals['fsUsedPerc'];
      }
      if (isset($vals['queueNum'])) {
        $this->queueNum = $vals['queueNum'];
      }
      if (isset($vals['configUpdated'])) {
        $this->configUpdated = $vals['configUpdated'];
      }
      if (isset($vals['payloadUpdated'])) {
        $this->payloadUpdated = $vals['payloadUpdated'];
      }
    }
  }

  public function getName() {
    return 'NodeInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nodeId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cpuVendor);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cpuModel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cpuCores);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cpuMhz);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->memSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fsName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fsType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fsFormat);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->fsSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->osArch);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->osName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->osDesc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->osVersion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->jvmName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->jvmVersion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->jvmMaxMem);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->nodeType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->queueLimit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->domain);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->macAddress);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->internetConnectivity);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ipAddress);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rpcPort);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 26:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->user);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 27:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->startTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 28:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->procName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 29:
          if ($ftype == TType::LST) {
            $this->programIdList = array();
            $_size22 = 0;
            $_etype25 = 0;
            $xfer += $input->readListBegin($_etype25, $_size22);
            for ($_i26 = 0; $_i26 < $_size22; ++$_i26)
            {
              $elem27 = null;
              $xfer += $input->readI64($elem27);
              $this->programIdList []= $elem27;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 30:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->cpuPerc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 31:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->memUsed);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 32:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->jvmAllocMem);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 33:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->jvmFreeMem);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 34:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->fsAvail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 35:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->fsUsed);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 36:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->fsUsedPerc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 37:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->queueNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 38:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->configUpdated);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 39:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->payloadUpdated);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NodeInfo');
    if ($this->nodeId !== null) {
      $xfer += $output->writeFieldBegin('nodeId', TType::STRING, 1);
      $xfer += $output->writeString($this->nodeId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cpuVendor !== null) {
      $xfer += $output->writeFieldBegin('cpuVendor', TType::STRING, 2);
      $xfer += $output->writeString($this->cpuVendor);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cpuModel !== null) {
      $xfer += $output->writeFieldBegin('cpuModel', TType::STRING, 3);
      $xfer += $output->writeString($this->cpuModel);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cpuCores !== null) {
      $xfer += $output->writeFieldBegin('cpuCores', TType::I32, 4);
      $xfer += $output->writeI32($this->cpuCores);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cpuMhz !== null) {
      $xfer += $output->writeFieldBegin('cpuMhz', TType::I32, 5);
      $xfer += $output->writeI32($this->cpuMhz);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->memSize !== null) {
      $xfer += $output->writeFieldBegin('memSize', TType::I32, 6);
      $xfer += $output->writeI32($this->memSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fsName !== null) {
      $xfer += $output->writeFieldBegin('fsName', TType::STRING, 7);
      $xfer += $output->writeString($this->fsName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fsType !== null) {
      $xfer += $output->writeFieldBegin('fsType', TType::STRING, 8);
      $xfer += $output->writeString($this->fsType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fsFormat !== null) {
      $xfer += $output->writeFieldBegin('fsFormat', TType::STRING, 9);
      $xfer += $output->writeString($this->fsFormat);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fsSize !== null) {
      $xfer += $output->writeFieldBegin('fsSize', TType::I32, 10);
      $xfer += $output->writeI32($this->fsSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->osArch !== null) {
      $xfer += $output->writeFieldBegin('osArch', TType::STRING, 11);
      $xfer += $output->writeString($this->osArch);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->osName !== null) {
      $xfer += $output->writeFieldBegin('osName', TType::STRING, 12);
      $xfer += $output->writeString($this->osName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->osDesc !== null) {
      $xfer += $output->writeFieldBegin('osDesc', TType::STRING, 13);
      $xfer += $output->writeString($this->osDesc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->osVersion !== null) {
      $xfer += $output->writeFieldBegin('osVersion', TType::STRING, 14);
      $xfer += $output->writeString($this->osVersion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jvmName !== null) {
      $xfer += $output->writeFieldBegin('jvmName', TType::STRING, 15);
      $xfer += $output->writeString($this->jvmName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jvmVersion !== null) {
      $xfer += $output->writeFieldBegin('jvmVersion', TType::STRING, 16);
      $xfer += $output->writeString($this->jvmVersion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jvmMaxMem !== null) {
      $xfer += $output->writeFieldBegin('jvmMaxMem', TType::I32, 17);
      $xfer += $output->writeI32($this->jvmMaxMem);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nodeType !== null) {
      $xfer += $output->writeFieldBegin('nodeType', TType::I32, 18);
      $xfer += $output->writeI32($this->nodeType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->queueLimit !== null) {
      $xfer += $output->writeFieldBegin('queueLimit', TType::I32, 19);
      $xfer += $output->writeI32($this->queueLimit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->domain !== null) {
      $xfer += $output->writeFieldBegin('domain', TType::STRING, 20);
      $xfer += $output->writeString($this->domain);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->macAddress !== null) {
      $xfer += $output->writeFieldBegin('macAddress', TType::STRING, 21);
      $xfer += $output->writeString($this->macAddress);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->internetConnectivity !== null) {
      $xfer += $output->writeFieldBegin('internetConnectivity', TType::I32, 22);
      $xfer += $output->writeI32($this->internetConnectivity);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ipAddress !== null) {
      $xfer += $output->writeFieldBegin('ipAddress', TType::STRING, 23);
      $xfer += $output->writeString($this->ipAddress);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rpcPort !== null) {
      $xfer += $output->writeFieldBegin('rpcPort', TType::I32, 24);
      $xfer += $output->writeI32($this->rpcPort);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pid !== null) {
      $xfer += $output->writeFieldBegin('pid', TType::I32, 25);
      $xfer += $output->writeI32($this->pid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->user !== null) {
      $xfer += $output->writeFieldBegin('user', TType::STRING, 26);
      $xfer += $output->writeString($this->user);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->startTime !== null) {
      $xfer += $output->writeFieldBegin('startTime', TType::STRING, 27);
      $xfer += $output->writeString($this->startTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->procName !== null) {
      $xfer += $output->writeFieldBegin('procName', TType::STRING, 28);
      $xfer += $output->writeString($this->procName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->programIdList !== null) {
      if (!is_array($this->programIdList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('programIdList', TType::LST, 29);
      {
        $output->writeListBegin(TType::I64, count($this->programIdList));
        {
          foreach ($this->programIdList as $iter28)
          {
            $xfer += $output->writeI64($iter28);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cpuPerc !== null) {
      $xfer += $output->writeFieldBegin('cpuPerc', TType::DOUBLE, 30);
      $xfer += $output->writeDouble($this->cpuPerc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->memUsed !== null) {
      $xfer += $output->writeFieldBegin('memUsed', TType::I32, 31);
      $xfer += $output->writeI32($this->memUsed);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jvmAllocMem !== null) {
      $xfer += $output->writeFieldBegin('jvmAllocMem', TType::I32, 32);
      $xfer += $output->writeI32($this->jvmAllocMem);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jvmFreeMem !== null) {
      $xfer += $output->writeFieldBegin('jvmFreeMem', TType::I32, 33);
      $xfer += $output->writeI32($this->jvmFreeMem);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fsAvail !== null) {
      $xfer += $output->writeFieldBegin('fsAvail', TType::I32, 34);
      $xfer += $output->writeI32($this->fsAvail);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fsUsed !== null) {
      $xfer += $output->writeFieldBegin('fsUsed', TType::I32, 35);
      $xfer += $output->writeI32($this->fsUsed);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fsUsedPerc !== null) {
      $xfer += $output->writeFieldBegin('fsUsedPerc', TType::DOUBLE, 36);
      $xfer += $output->writeDouble($this->fsUsedPerc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->queueNum !== null) {
      $xfer += $output->writeFieldBegin('queueNum', TType::I32, 37);
      $xfer += $output->writeI32($this->queueNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->configUpdated !== null) {
      $xfer += $output->writeFieldBegin('configUpdated', TType::I64, 38);
      $xfer += $output->writeI64($this->configUpdated);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payloadUpdated !== null) {
      $xfer += $output->writeFieldBegin('payloadUpdated', TType::I64, 39);
      $xfer += $output->writeI64($this->payloadUpdated);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


