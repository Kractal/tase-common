/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.softsec.tase.common.rpc.domain.app;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * App Web Info
 */
public class AppWeb implements org.apache.thrift.TBase<AppWeb, AppWeb._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppWeb");

  private static final org.apache.thrift.protocol.TField APP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("appType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ORIGIN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("originType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField STORE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("storeName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField STORE_DISPLAY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("storeDisplayName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField STORE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("storeUrl", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField STORE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("storeType", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("category", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField APP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("appName", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField INNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("innerId", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField APP_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("appVersion", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField UPDATED_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updatedTime", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField COLLECTED_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("collectedTime", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField UPDATE_HISTORY_FIELD_DESC = new org.apache.thrift.protocol.TField("updateHistory", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("platform", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField OS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("osType", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField OS_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("osVersion", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField DEVICE_FIELD_DESC = new org.apache.thrift.protocol.TField("device", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField COUNTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("country", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField LANGUAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("language", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("size", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("price", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField DOWNLOAD_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("downloadUrl", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField SNAPSHOT_URL_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("snapshotUrlList", org.apache.thrift.protocol.TType.LIST, (short)25);
  private static final org.apache.thrift.protocol.TField LOGO_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("logoUrl", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField DEVELOPER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("developerName", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField DEVELOPER_WEBSITE_FIELD_DESC = new org.apache.thrift.protocol.TField("developerWebsite", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField DEVELOPER_EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("developerEmail", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField PRIVACY_POLICY_FIELD_DESC = new org.apache.thrift.protocol.TField("privacyPolicy", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField DOWNLOAD_FLOOR_FIELD_DESC = new org.apache.thrift.protocol.TField("downloadFloor", org.apache.thrift.protocol.TType.I64, (short)31);
  private static final org.apache.thrift.protocol.TField DOWNLOAD_CEILING_FIELD_DESC = new org.apache.thrift.protocol.TField("downloadCeiling", org.apache.thrift.protocol.TType.I64, (short)32);
  private static final org.apache.thrift.protocol.TField RATING_FIELD_DESC = new org.apache.thrift.protocol.TField("rating", org.apache.thrift.protocol.TType.DOUBLE, (short)33);
  private static final org.apache.thrift.protocol.TField RATING_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("ratingCount", org.apache.thrift.protocol.TType.I64, (short)34);
  private static final org.apache.thrift.protocol.TField REVIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("review", org.apache.thrift.protocol.TType.STRING, (short)35);
  private static final org.apache.thrift.protocol.TField CONTENT_RATING_FIELD_DESC = new org.apache.thrift.protocol.TField("contentRating", org.apache.thrift.protocol.TType.STRING, (short)36);
  private static final org.apache.thrift.protocol.TField APP_ADVERTISER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("appAdvertiserList", org.apache.thrift.protocol.TType.LIST, (short)37);
  private static final org.apache.thrift.protocol.TField APP_ANTIVIRUS_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("appAntivirusList", org.apache.thrift.protocol.TType.LIST, (short)38);
  private static final org.apache.thrift.protocol.TField APP_COMMENT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("appCommentList", org.apache.thrift.protocol.TType.LIST, (short)39);
  private static final org.apache.thrift.protocol.TField APP_EXTERNAL_LINK_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("appExternalLinkList", org.apache.thrift.protocol.TType.LIST, (short)40);
  private static final org.apache.thrift.protocol.TField APP_PERMISSION_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("appPermissionList", org.apache.thrift.protocol.TType.LIST, (short)41);
  private static final org.apache.thrift.protocol.TField APP_CHECKSUM_FIELD_DESC = new org.apache.thrift.protocol.TField("appChecksum", org.apache.thrift.protocol.TType.STRING, (short)42);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AppWebStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AppWebTupleSchemeFactory());
  }

  /**
   * 
   * @see AppType
   */
  public AppType appType; // required
  /**
   * 
   * @see OriginType
   */
  public OriginType originType; // required
  public String storeName; // required
  public String storeDisplayName; // optional
  public String storeUrl; // optional
  public int storeType; // optional
  public String category; // required
  public String appName; // required
  public String innerId; // optional
  public String appVersion; // required
  public long updatedTime; // required
  public long collectedTime; // required
  public String updateHistory; // optional
  public String platform; // optional
  public String osType; // optional
  public String osVersion; // optional
  public String device; // optional
  public String country; // optional
  public String language; // optional
  public String description; // optional
  public String size; // optional
  public String price; // optional
  public String url; // required
  public String downloadUrl; // required
  public List<String> snapshotUrlList; // optional
  public String logoUrl; // optional
  public String developerName; // optional
  public String developerWebsite; // optional
  public String developerEmail; // optional
  public String privacyPolicy; // optional
  public long downloadFloor; // optional
  public long downloadCeiling; // optional
  public double rating; // optional
  public long ratingCount; // optional
  public String review; // optional
  public String contentRating; // optional
  public List<AppAdvertiser> appAdvertiserList; // optional
  public List<AppAntivirus> appAntivirusList; // optional
  public List<AppComment> appCommentList; // optional
  public List<AppExternalLink> appExternalLinkList; // optional
  public List<AppPermission> appPermissionList; // optional
  public String appChecksum; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see AppType
     */
    APP_TYPE((short)1, "appType"),
    /**
     * 
     * @see OriginType
     */
    ORIGIN_TYPE((short)2, "originType"),
    STORE_NAME((short)3, "storeName"),
    STORE_DISPLAY_NAME((short)4, "storeDisplayName"),
    STORE_URL((short)5, "storeUrl"),
    STORE_TYPE((short)6, "storeType"),
    CATEGORY((short)7, "category"),
    APP_NAME((short)8, "appName"),
    INNER_ID((short)9, "innerId"),
    APP_VERSION((short)10, "appVersion"),
    UPDATED_TIME((short)11, "updatedTime"),
    COLLECTED_TIME((short)12, "collectedTime"),
    UPDATE_HISTORY((short)13, "updateHistory"),
    PLATFORM((short)14, "platform"),
    OS_TYPE((short)15, "osType"),
    OS_VERSION((short)16, "osVersion"),
    DEVICE((short)17, "device"),
    COUNTRY((short)18, "country"),
    LANGUAGE((short)19, "language"),
    DESCRIPTION((short)20, "description"),
    SIZE((short)21, "size"),
    PRICE((short)22, "price"),
    URL((short)23, "url"),
    DOWNLOAD_URL((short)24, "downloadUrl"),
    SNAPSHOT_URL_LIST((short)25, "snapshotUrlList"),
    LOGO_URL((short)26, "logoUrl"),
    DEVELOPER_NAME((short)27, "developerName"),
    DEVELOPER_WEBSITE((short)28, "developerWebsite"),
    DEVELOPER_EMAIL((short)29, "developerEmail"),
    PRIVACY_POLICY((short)30, "privacyPolicy"),
    DOWNLOAD_FLOOR((short)31, "downloadFloor"),
    DOWNLOAD_CEILING((short)32, "downloadCeiling"),
    RATING((short)33, "rating"),
    RATING_COUNT((short)34, "ratingCount"),
    REVIEW((short)35, "review"),
    CONTENT_RATING((short)36, "contentRating"),
    APP_ADVERTISER_LIST((short)37, "appAdvertiserList"),
    APP_ANTIVIRUS_LIST((short)38, "appAntivirusList"),
    APP_COMMENT_LIST((short)39, "appCommentList"),
    APP_EXTERNAL_LINK_LIST((short)40, "appExternalLinkList"),
    APP_PERMISSION_LIST((short)41, "appPermissionList"),
    APP_CHECKSUM((short)42, "appChecksum");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // APP_TYPE
          return APP_TYPE;
        case 2: // ORIGIN_TYPE
          return ORIGIN_TYPE;
        case 3: // STORE_NAME
          return STORE_NAME;
        case 4: // STORE_DISPLAY_NAME
          return STORE_DISPLAY_NAME;
        case 5: // STORE_URL
          return STORE_URL;
        case 6: // STORE_TYPE
          return STORE_TYPE;
        case 7: // CATEGORY
          return CATEGORY;
        case 8: // APP_NAME
          return APP_NAME;
        case 9: // INNER_ID
          return INNER_ID;
        case 10: // APP_VERSION
          return APP_VERSION;
        case 11: // UPDATED_TIME
          return UPDATED_TIME;
        case 12: // COLLECTED_TIME
          return COLLECTED_TIME;
        case 13: // UPDATE_HISTORY
          return UPDATE_HISTORY;
        case 14: // PLATFORM
          return PLATFORM;
        case 15: // OS_TYPE
          return OS_TYPE;
        case 16: // OS_VERSION
          return OS_VERSION;
        case 17: // DEVICE
          return DEVICE;
        case 18: // COUNTRY
          return COUNTRY;
        case 19: // LANGUAGE
          return LANGUAGE;
        case 20: // DESCRIPTION
          return DESCRIPTION;
        case 21: // SIZE
          return SIZE;
        case 22: // PRICE
          return PRICE;
        case 23: // URL
          return URL;
        case 24: // DOWNLOAD_URL
          return DOWNLOAD_URL;
        case 25: // SNAPSHOT_URL_LIST
          return SNAPSHOT_URL_LIST;
        case 26: // LOGO_URL
          return LOGO_URL;
        case 27: // DEVELOPER_NAME
          return DEVELOPER_NAME;
        case 28: // DEVELOPER_WEBSITE
          return DEVELOPER_WEBSITE;
        case 29: // DEVELOPER_EMAIL
          return DEVELOPER_EMAIL;
        case 30: // PRIVACY_POLICY
          return PRIVACY_POLICY;
        case 31: // DOWNLOAD_FLOOR
          return DOWNLOAD_FLOOR;
        case 32: // DOWNLOAD_CEILING
          return DOWNLOAD_CEILING;
        case 33: // RATING
          return RATING;
        case 34: // RATING_COUNT
          return RATING_COUNT;
        case 35: // REVIEW
          return REVIEW;
        case 36: // CONTENT_RATING
          return CONTENT_RATING;
        case 37: // APP_ADVERTISER_LIST
          return APP_ADVERTISER_LIST;
        case 38: // APP_ANTIVIRUS_LIST
          return APP_ANTIVIRUS_LIST;
        case 39: // APP_COMMENT_LIST
          return APP_COMMENT_LIST;
        case 40: // APP_EXTERNAL_LINK_LIST
          return APP_EXTERNAL_LINK_LIST;
        case 41: // APP_PERMISSION_LIST
          return APP_PERMISSION_LIST;
        case 42: // APP_CHECKSUM
          return APP_CHECKSUM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STORETYPE_ISSET_ID = 0;
  private static final int __UPDATEDTIME_ISSET_ID = 1;
  private static final int __COLLECTEDTIME_ISSET_ID = 2;
  private static final int __DOWNLOADFLOOR_ISSET_ID = 3;
  private static final int __DOWNLOADCEILING_ISSET_ID = 4;
  private static final int __RATING_ISSET_ID = 5;
  private static final int __RATINGCOUNT_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.STORE_DISPLAY_NAME,_Fields.STORE_URL,_Fields.STORE_TYPE,_Fields.INNER_ID,_Fields.UPDATE_HISTORY,_Fields.PLATFORM,_Fields.OS_TYPE,_Fields.OS_VERSION,_Fields.DEVICE,_Fields.COUNTRY,_Fields.LANGUAGE,_Fields.DESCRIPTION,_Fields.SIZE,_Fields.PRICE,_Fields.SNAPSHOT_URL_LIST,_Fields.LOGO_URL,_Fields.DEVELOPER_NAME,_Fields.DEVELOPER_WEBSITE,_Fields.DEVELOPER_EMAIL,_Fields.PRIVACY_POLICY,_Fields.DOWNLOAD_FLOOR,_Fields.DOWNLOAD_CEILING,_Fields.RATING,_Fields.RATING_COUNT,_Fields.REVIEW,_Fields.CONTENT_RATING,_Fields.APP_ADVERTISER_LIST,_Fields.APP_ANTIVIRUS_LIST,_Fields.APP_COMMENT_LIST,_Fields.APP_EXTERNAL_LINK_LIST,_Fields.APP_PERMISSION_LIST};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.APP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("appType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, AppType.class)));
    tmpMap.put(_Fields.ORIGIN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("originType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, OriginType.class)));
    tmpMap.put(_Fields.STORE_NAME, new org.apache.thrift.meta_data.FieldMetaData("storeName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STORE_DISPLAY_NAME, new org.apache.thrift.meta_data.FieldMetaData("storeDisplayName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STORE_URL, new org.apache.thrift.meta_data.FieldMetaData("storeUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STORE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("storeType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("category", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_NAME, new org.apache.thrift.meta_data.FieldMetaData("appName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INNER_ID, new org.apache.thrift.meta_data.FieldMetaData("innerId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_VERSION, new org.apache.thrift.meta_data.FieldMetaData("appVersion", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATED_TIME, new org.apache.thrift.meta_data.FieldMetaData("updatedTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COLLECTED_TIME, new org.apache.thrift.meta_data.FieldMetaData("collectedTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UPDATE_HISTORY, new org.apache.thrift.meta_data.FieldMetaData("updateHistory", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("platform", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("osType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OS_VERSION, new org.apache.thrift.meta_data.FieldMetaData("osVersion", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEVICE, new org.apache.thrift.meta_data.FieldMetaData("device", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COUNTRY, new org.apache.thrift.meta_data.FieldMetaData("country", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LANGUAGE, new org.apache.thrift.meta_data.FieldMetaData("language", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SIZE, new org.apache.thrift.meta_data.FieldMetaData("size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRICE, new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOWNLOAD_URL, new org.apache.thrift.meta_data.FieldMetaData("downloadUrl", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SNAPSHOT_URL_LIST, new org.apache.thrift.meta_data.FieldMetaData("snapshotUrlList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.LOGO_URL, new org.apache.thrift.meta_data.FieldMetaData("logoUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEVELOPER_NAME, new org.apache.thrift.meta_data.FieldMetaData("developerName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEVELOPER_WEBSITE, new org.apache.thrift.meta_data.FieldMetaData("developerWebsite", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEVELOPER_EMAIL, new org.apache.thrift.meta_data.FieldMetaData("developerEmail", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRIVACY_POLICY, new org.apache.thrift.meta_data.FieldMetaData("privacyPolicy", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOWNLOAD_FLOOR, new org.apache.thrift.meta_data.FieldMetaData("downloadFloor", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DOWNLOAD_CEILING, new org.apache.thrift.meta_data.FieldMetaData("downloadCeiling", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RATING, new org.apache.thrift.meta_data.FieldMetaData("rating", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RATING_COUNT, new org.apache.thrift.meta_data.FieldMetaData("ratingCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REVIEW, new org.apache.thrift.meta_data.FieldMetaData("review", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT_RATING, new org.apache.thrift.meta_data.FieldMetaData("contentRating", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_ADVERTISER_LIST, new org.apache.thrift.meta_data.FieldMetaData("appAdvertiserList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AppAdvertiser.class))));
    tmpMap.put(_Fields.APP_ANTIVIRUS_LIST, new org.apache.thrift.meta_data.FieldMetaData("appAntivirusList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AppAntivirus.class))));
    tmpMap.put(_Fields.APP_COMMENT_LIST, new org.apache.thrift.meta_data.FieldMetaData("appCommentList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AppComment.class))));
    tmpMap.put(_Fields.APP_EXTERNAL_LINK_LIST, new org.apache.thrift.meta_data.FieldMetaData("appExternalLinkList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AppExternalLink.class))));
    tmpMap.put(_Fields.APP_PERMISSION_LIST, new org.apache.thrift.meta_data.FieldMetaData("appPermissionList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AppPermission.class))));
    tmpMap.put(_Fields.APP_CHECKSUM, new org.apache.thrift.meta_data.FieldMetaData("appChecksum", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AppWeb.class, metaDataMap);
  }

  public AppWeb() {
  }

  public AppWeb(
    AppType appType,
    OriginType originType,
    String storeName,
    String category,
    String appName,
    String appVersion,
    long updatedTime,
    long collectedTime,
    String url,
    String downloadUrl,
    String appChecksum)
  {
    this();
    this.appType = appType;
    this.originType = originType;
    this.storeName = storeName;
    this.category = category;
    this.appName = appName;
    this.appVersion = appVersion;
    this.updatedTime = updatedTime;
    setUpdatedTimeIsSet(true);
    this.collectedTime = collectedTime;
    setCollectedTimeIsSet(true);
    this.url = url;
    this.downloadUrl = downloadUrl;
    this.appChecksum = appChecksum;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AppWeb(AppWeb other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAppType()) {
      this.appType = other.appType;
    }
    if (other.isSetOriginType()) {
      this.originType = other.originType;
    }
    if (other.isSetStoreName()) {
      this.storeName = other.storeName;
    }
    if (other.isSetStoreDisplayName()) {
      this.storeDisplayName = other.storeDisplayName;
    }
    if (other.isSetStoreUrl()) {
      this.storeUrl = other.storeUrl;
    }
    this.storeType = other.storeType;
    if (other.isSetCategory()) {
      this.category = other.category;
    }
    if (other.isSetAppName()) {
      this.appName = other.appName;
    }
    if (other.isSetInnerId()) {
      this.innerId = other.innerId;
    }
    if (other.isSetAppVersion()) {
      this.appVersion = other.appVersion;
    }
    this.updatedTime = other.updatedTime;
    this.collectedTime = other.collectedTime;
    if (other.isSetUpdateHistory()) {
      this.updateHistory = other.updateHistory;
    }
    if (other.isSetPlatform()) {
      this.platform = other.platform;
    }
    if (other.isSetOsType()) {
      this.osType = other.osType;
    }
    if (other.isSetOsVersion()) {
      this.osVersion = other.osVersion;
    }
    if (other.isSetDevice()) {
      this.device = other.device;
    }
    if (other.isSetCountry()) {
      this.country = other.country;
    }
    if (other.isSetLanguage()) {
      this.language = other.language;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetSize()) {
      this.size = other.size;
    }
    if (other.isSetPrice()) {
      this.price = other.price;
    }
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    if (other.isSetDownloadUrl()) {
      this.downloadUrl = other.downloadUrl;
    }
    if (other.isSetSnapshotUrlList()) {
      List<String> __this__snapshotUrlList = new ArrayList<String>();
      for (String other_element : other.snapshotUrlList) {
        __this__snapshotUrlList.add(other_element);
      }
      this.snapshotUrlList = __this__snapshotUrlList;
    }
    if (other.isSetLogoUrl()) {
      this.logoUrl = other.logoUrl;
    }
    if (other.isSetDeveloperName()) {
      this.developerName = other.developerName;
    }
    if (other.isSetDeveloperWebsite()) {
      this.developerWebsite = other.developerWebsite;
    }
    if (other.isSetDeveloperEmail()) {
      this.developerEmail = other.developerEmail;
    }
    if (other.isSetPrivacyPolicy()) {
      this.privacyPolicy = other.privacyPolicy;
    }
    this.downloadFloor = other.downloadFloor;
    this.downloadCeiling = other.downloadCeiling;
    this.rating = other.rating;
    this.ratingCount = other.ratingCount;
    if (other.isSetReview()) {
      this.review = other.review;
    }
    if (other.isSetContentRating()) {
      this.contentRating = other.contentRating;
    }
    if (other.isSetAppAdvertiserList()) {
      List<AppAdvertiser> __this__appAdvertiserList = new ArrayList<AppAdvertiser>();
      for (AppAdvertiser other_element : other.appAdvertiserList) {
        __this__appAdvertiserList.add(new AppAdvertiser(other_element));
      }
      this.appAdvertiserList = __this__appAdvertiserList;
    }
    if (other.isSetAppAntivirusList()) {
      List<AppAntivirus> __this__appAntivirusList = new ArrayList<AppAntivirus>();
      for (AppAntivirus other_element : other.appAntivirusList) {
        __this__appAntivirusList.add(new AppAntivirus(other_element));
      }
      this.appAntivirusList = __this__appAntivirusList;
    }
    if (other.isSetAppCommentList()) {
      List<AppComment> __this__appCommentList = new ArrayList<AppComment>();
      for (AppComment other_element : other.appCommentList) {
        __this__appCommentList.add(new AppComment(other_element));
      }
      this.appCommentList = __this__appCommentList;
    }
    if (other.isSetAppExternalLinkList()) {
      List<AppExternalLink> __this__appExternalLinkList = new ArrayList<AppExternalLink>();
      for (AppExternalLink other_element : other.appExternalLinkList) {
        __this__appExternalLinkList.add(new AppExternalLink(other_element));
      }
      this.appExternalLinkList = __this__appExternalLinkList;
    }
    if (other.isSetAppPermissionList()) {
      List<AppPermission> __this__appPermissionList = new ArrayList<AppPermission>();
      for (AppPermission other_element : other.appPermissionList) {
        __this__appPermissionList.add(new AppPermission(other_element));
      }
      this.appPermissionList = __this__appPermissionList;
    }
    if (other.isSetAppChecksum()) {
      this.appChecksum = other.appChecksum;
    }
  }

  public AppWeb deepCopy() {
    return new AppWeb(this);
  }

  @Override
  public void clear() {
    this.appType = null;
    this.originType = null;
    this.storeName = null;
    this.storeDisplayName = null;
    this.storeUrl = null;
    setStoreTypeIsSet(false);
    this.storeType = 0;
    this.category = null;
    this.appName = null;
    this.innerId = null;
    this.appVersion = null;
    setUpdatedTimeIsSet(false);
    this.updatedTime = 0;
    setCollectedTimeIsSet(false);
    this.collectedTime = 0;
    this.updateHistory = null;
    this.platform = null;
    this.osType = null;
    this.osVersion = null;
    this.device = null;
    this.country = null;
    this.language = null;
    this.description = null;
    this.size = null;
    this.price = null;
    this.url = null;
    this.downloadUrl = null;
    this.snapshotUrlList = null;
    this.logoUrl = null;
    this.developerName = null;
    this.developerWebsite = null;
    this.developerEmail = null;
    this.privacyPolicy = null;
    setDownloadFloorIsSet(false);
    this.downloadFloor = 0;
    setDownloadCeilingIsSet(false);
    this.downloadCeiling = 0;
    setRatingIsSet(false);
    this.rating = 0.0;
    setRatingCountIsSet(false);
    this.ratingCount = 0;
    this.review = null;
    this.contentRating = null;
    this.appAdvertiserList = null;
    this.appAntivirusList = null;
    this.appCommentList = null;
    this.appExternalLinkList = null;
    this.appPermissionList = null;
    this.appChecksum = null;
  }

  /**
   * 
   * @see AppType
   */
  public AppType getAppType() {
    return this.appType;
  }

  /**
   * 
   * @see AppType
   */
  public AppWeb setAppType(AppType appType) {
    this.appType = appType;
    return this;
  }

  public void unsetAppType() {
    this.appType = null;
  }

  /** Returns true if field appType is set (has been assigned a value) and false otherwise */
  public boolean isSetAppType() {
    return this.appType != null;
  }

  public void setAppTypeIsSet(boolean value) {
    if (!value) {
      this.appType = null;
    }
  }

  /**
   * 
   * @see OriginType
   */
  public OriginType getOriginType() {
    return this.originType;
  }

  /**
   * 
   * @see OriginType
   */
  public AppWeb setOriginType(OriginType originType) {
    this.originType = originType;
    return this;
  }

  public void unsetOriginType() {
    this.originType = null;
  }

  /** Returns true if field originType is set (has been assigned a value) and false otherwise */
  public boolean isSetOriginType() {
    return this.originType != null;
  }

  public void setOriginTypeIsSet(boolean value) {
    if (!value) {
      this.originType = null;
    }
  }

  public String getStoreName() {
    return this.storeName;
  }

  public AppWeb setStoreName(String storeName) {
    this.storeName = storeName;
    return this;
  }

  public void unsetStoreName() {
    this.storeName = null;
  }

  /** Returns true if field storeName is set (has been assigned a value) and false otherwise */
  public boolean isSetStoreName() {
    return this.storeName != null;
  }

  public void setStoreNameIsSet(boolean value) {
    if (!value) {
      this.storeName = null;
    }
  }

  public String getStoreDisplayName() {
    return this.storeDisplayName;
  }

  public AppWeb setStoreDisplayName(String storeDisplayName) {
    this.storeDisplayName = storeDisplayName;
    return this;
  }

  public void unsetStoreDisplayName() {
    this.storeDisplayName = null;
  }

  /** Returns true if field storeDisplayName is set (has been assigned a value) and false otherwise */
  public boolean isSetStoreDisplayName() {
    return this.storeDisplayName != null;
  }

  public void setStoreDisplayNameIsSet(boolean value) {
    if (!value) {
      this.storeDisplayName = null;
    }
  }

  public String getStoreUrl() {
    return this.storeUrl;
  }

  public AppWeb setStoreUrl(String storeUrl) {
    this.storeUrl = storeUrl;
    return this;
  }

  public void unsetStoreUrl() {
    this.storeUrl = null;
  }

  /** Returns true if field storeUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetStoreUrl() {
    return this.storeUrl != null;
  }

  public void setStoreUrlIsSet(boolean value) {
    if (!value) {
      this.storeUrl = null;
    }
  }

  public int getStoreType() {
    return this.storeType;
  }

  public AppWeb setStoreType(int storeType) {
    this.storeType = storeType;
    setStoreTypeIsSet(true);
    return this;
  }

  public void unsetStoreType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STORETYPE_ISSET_ID);
  }

  /** Returns true if field storeType is set (has been assigned a value) and false otherwise */
  public boolean isSetStoreType() {
    return EncodingUtils.testBit(__isset_bitfield, __STORETYPE_ISSET_ID);
  }

  public void setStoreTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STORETYPE_ISSET_ID, value);
  }

  public String getCategory() {
    return this.category;
  }

  public AppWeb setCategory(String category) {
    this.category = category;
    return this;
  }

  public void unsetCategory() {
    this.category = null;
  }

  /** Returns true if field category is set (has been assigned a value) and false otherwise */
  public boolean isSetCategory() {
    return this.category != null;
  }

  public void setCategoryIsSet(boolean value) {
    if (!value) {
      this.category = null;
    }
  }

  public String getAppName() {
    return this.appName;
  }

  public AppWeb setAppName(String appName) {
    this.appName = appName;
    return this;
  }

  public void unsetAppName() {
    this.appName = null;
  }

  /** Returns true if field appName is set (has been assigned a value) and false otherwise */
  public boolean isSetAppName() {
    return this.appName != null;
  }

  public void setAppNameIsSet(boolean value) {
    if (!value) {
      this.appName = null;
    }
  }

  public String getInnerId() {
    return this.innerId;
  }

  public AppWeb setInnerId(String innerId) {
    this.innerId = innerId;
    return this;
  }

  public void unsetInnerId() {
    this.innerId = null;
  }

  /** Returns true if field innerId is set (has been assigned a value) and false otherwise */
  public boolean isSetInnerId() {
    return this.innerId != null;
  }

  public void setInnerIdIsSet(boolean value) {
    if (!value) {
      this.innerId = null;
    }
  }

  public String getAppVersion() {
    return this.appVersion;
  }

  public AppWeb setAppVersion(String appVersion) {
    this.appVersion = appVersion;
    return this;
  }

  public void unsetAppVersion() {
    this.appVersion = null;
  }

  /** Returns true if field appVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetAppVersion() {
    return this.appVersion != null;
  }

  public void setAppVersionIsSet(boolean value) {
    if (!value) {
      this.appVersion = null;
    }
  }

  public long getUpdatedTime() {
    return this.updatedTime;
  }

  public AppWeb setUpdatedTime(long updatedTime) {
    this.updatedTime = updatedTime;
    setUpdatedTimeIsSet(true);
    return this;
  }

  public void unsetUpdatedTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATEDTIME_ISSET_ID);
  }

  /** Returns true if field updatedTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdatedTime() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATEDTIME_ISSET_ID);
  }

  public void setUpdatedTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATEDTIME_ISSET_ID, value);
  }

  public long getCollectedTime() {
    return this.collectedTime;
  }

  public AppWeb setCollectedTime(long collectedTime) {
    this.collectedTime = collectedTime;
    setCollectedTimeIsSet(true);
    return this;
  }

  public void unsetCollectedTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COLLECTEDTIME_ISSET_ID);
  }

  /** Returns true if field collectedTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCollectedTime() {
    return EncodingUtils.testBit(__isset_bitfield, __COLLECTEDTIME_ISSET_ID);
  }

  public void setCollectedTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COLLECTEDTIME_ISSET_ID, value);
  }

  public String getUpdateHistory() {
    return this.updateHistory;
  }

  public AppWeb setUpdateHistory(String updateHistory) {
    this.updateHistory = updateHistory;
    return this;
  }

  public void unsetUpdateHistory() {
    this.updateHistory = null;
  }

  /** Returns true if field updateHistory is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateHistory() {
    return this.updateHistory != null;
  }

  public void setUpdateHistoryIsSet(boolean value) {
    if (!value) {
      this.updateHistory = null;
    }
  }

  public String getPlatform() {
    return this.platform;
  }

  public AppWeb setPlatform(String platform) {
    this.platform = platform;
    return this;
  }

  public void unsetPlatform() {
    this.platform = null;
  }

  /** Returns true if field platform is set (has been assigned a value) and false otherwise */
  public boolean isSetPlatform() {
    return this.platform != null;
  }

  public void setPlatformIsSet(boolean value) {
    if (!value) {
      this.platform = null;
    }
  }

  public String getOsType() {
    return this.osType;
  }

  public AppWeb setOsType(String osType) {
    this.osType = osType;
    return this;
  }

  public void unsetOsType() {
    this.osType = null;
  }

  /** Returns true if field osType is set (has been assigned a value) and false otherwise */
  public boolean isSetOsType() {
    return this.osType != null;
  }

  public void setOsTypeIsSet(boolean value) {
    if (!value) {
      this.osType = null;
    }
  }

  public String getOsVersion() {
    return this.osVersion;
  }

  public AppWeb setOsVersion(String osVersion) {
    this.osVersion = osVersion;
    return this;
  }

  public void unsetOsVersion() {
    this.osVersion = null;
  }

  /** Returns true if field osVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetOsVersion() {
    return this.osVersion != null;
  }

  public void setOsVersionIsSet(boolean value) {
    if (!value) {
      this.osVersion = null;
    }
  }

  public String getDevice() {
    return this.device;
  }

  public AppWeb setDevice(String device) {
    this.device = device;
    return this;
  }

  public void unsetDevice() {
    this.device = null;
  }

  /** Returns true if field device is set (has been assigned a value) and false otherwise */
  public boolean isSetDevice() {
    return this.device != null;
  }

  public void setDeviceIsSet(boolean value) {
    if (!value) {
      this.device = null;
    }
  }

  public String getCountry() {
    return this.country;
  }

  public AppWeb setCountry(String country) {
    this.country = country;
    return this;
  }

  public void unsetCountry() {
    this.country = null;
  }

  /** Returns true if field country is set (has been assigned a value) and false otherwise */
  public boolean isSetCountry() {
    return this.country != null;
  }

  public void setCountryIsSet(boolean value) {
    if (!value) {
      this.country = null;
    }
  }

  public String getLanguage() {
    return this.language;
  }

  public AppWeb setLanguage(String language) {
    this.language = language;
    return this;
  }

  public void unsetLanguage() {
    this.language = null;
  }

  /** Returns true if field language is set (has been assigned a value) and false otherwise */
  public boolean isSetLanguage() {
    return this.language != null;
  }

  public void setLanguageIsSet(boolean value) {
    if (!value) {
      this.language = null;
    }
  }

  public String getDescription() {
    return this.description;
  }

  public AppWeb setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public String getSize() {
    return this.size;
  }

  public AppWeb setSize(String size) {
    this.size = size;
    return this;
  }

  public void unsetSize() {
    this.size = null;
  }

  /** Returns true if field size is set (has been assigned a value) and false otherwise */
  public boolean isSetSize() {
    return this.size != null;
  }

  public void setSizeIsSet(boolean value) {
    if (!value) {
      this.size = null;
    }
  }

  public String getPrice() {
    return this.price;
  }

  public AppWeb setPrice(String price) {
    this.price = price;
    return this;
  }

  public void unsetPrice() {
    this.price = null;
  }

  /** Returns true if field price is set (has been assigned a value) and false otherwise */
  public boolean isSetPrice() {
    return this.price != null;
  }

  public void setPriceIsSet(boolean value) {
    if (!value) {
      this.price = null;
    }
  }

  public String getUrl() {
    return this.url;
  }

  public AppWeb setUrl(String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public String getDownloadUrl() {
    return this.downloadUrl;
  }

  public AppWeb setDownloadUrl(String downloadUrl) {
    this.downloadUrl = downloadUrl;
    return this;
  }

  public void unsetDownloadUrl() {
    this.downloadUrl = null;
  }

  /** Returns true if field downloadUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetDownloadUrl() {
    return this.downloadUrl != null;
  }

  public void setDownloadUrlIsSet(boolean value) {
    if (!value) {
      this.downloadUrl = null;
    }
  }

  public int getSnapshotUrlListSize() {
    return (this.snapshotUrlList == null) ? 0 : this.snapshotUrlList.size();
  }

  public java.util.Iterator<String> getSnapshotUrlListIterator() {
    return (this.snapshotUrlList == null) ? null : this.snapshotUrlList.iterator();
  }

  public void addToSnapshotUrlList(String elem) {
    if (this.snapshotUrlList == null) {
      this.snapshotUrlList = new ArrayList<String>();
    }
    this.snapshotUrlList.add(elem);
  }

  public List<String> getSnapshotUrlList() {
    return this.snapshotUrlList;
  }

  public AppWeb setSnapshotUrlList(List<String> snapshotUrlList) {
    this.snapshotUrlList = snapshotUrlList;
    return this;
  }

  public void unsetSnapshotUrlList() {
    this.snapshotUrlList = null;
  }

  /** Returns true if field snapshotUrlList is set (has been assigned a value) and false otherwise */
  public boolean isSetSnapshotUrlList() {
    return this.snapshotUrlList != null;
  }

  public void setSnapshotUrlListIsSet(boolean value) {
    if (!value) {
      this.snapshotUrlList = null;
    }
  }

  public String getLogoUrl() {
    return this.logoUrl;
  }

  public AppWeb setLogoUrl(String logoUrl) {
    this.logoUrl = logoUrl;
    return this;
  }

  public void unsetLogoUrl() {
    this.logoUrl = null;
  }

  /** Returns true if field logoUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetLogoUrl() {
    return this.logoUrl != null;
  }

  public void setLogoUrlIsSet(boolean value) {
    if (!value) {
      this.logoUrl = null;
    }
  }

  public String getDeveloperName() {
    return this.developerName;
  }

  public AppWeb setDeveloperName(String developerName) {
    this.developerName = developerName;
    return this;
  }

  public void unsetDeveloperName() {
    this.developerName = null;
  }

  /** Returns true if field developerName is set (has been assigned a value) and false otherwise */
  public boolean isSetDeveloperName() {
    return this.developerName != null;
  }

  public void setDeveloperNameIsSet(boolean value) {
    if (!value) {
      this.developerName = null;
    }
  }

  public String getDeveloperWebsite() {
    return this.developerWebsite;
  }

  public AppWeb setDeveloperWebsite(String developerWebsite) {
    this.developerWebsite = developerWebsite;
    return this;
  }

  public void unsetDeveloperWebsite() {
    this.developerWebsite = null;
  }

  /** Returns true if field developerWebsite is set (has been assigned a value) and false otherwise */
  public boolean isSetDeveloperWebsite() {
    return this.developerWebsite != null;
  }

  public void setDeveloperWebsiteIsSet(boolean value) {
    if (!value) {
      this.developerWebsite = null;
    }
  }

  public String getDeveloperEmail() {
    return this.developerEmail;
  }

  public AppWeb setDeveloperEmail(String developerEmail) {
    this.developerEmail = developerEmail;
    return this;
  }

  public void unsetDeveloperEmail() {
    this.developerEmail = null;
  }

  /** Returns true if field developerEmail is set (has been assigned a value) and false otherwise */
  public boolean isSetDeveloperEmail() {
    return this.developerEmail != null;
  }

  public void setDeveloperEmailIsSet(boolean value) {
    if (!value) {
      this.developerEmail = null;
    }
  }

  public String getPrivacyPolicy() {
    return this.privacyPolicy;
  }

  public AppWeb setPrivacyPolicy(String privacyPolicy) {
    this.privacyPolicy = privacyPolicy;
    return this;
  }

  public void unsetPrivacyPolicy() {
    this.privacyPolicy = null;
  }

  /** Returns true if field privacyPolicy is set (has been assigned a value) and false otherwise */
  public boolean isSetPrivacyPolicy() {
    return this.privacyPolicy != null;
  }

  public void setPrivacyPolicyIsSet(boolean value) {
    if (!value) {
      this.privacyPolicy = null;
    }
  }

  public long getDownloadFloor() {
    return this.downloadFloor;
  }

  public AppWeb setDownloadFloor(long downloadFloor) {
    this.downloadFloor = downloadFloor;
    setDownloadFloorIsSet(true);
    return this;
  }

  public void unsetDownloadFloor() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOWNLOADFLOOR_ISSET_ID);
  }

  /** Returns true if field downloadFloor is set (has been assigned a value) and false otherwise */
  public boolean isSetDownloadFloor() {
    return EncodingUtils.testBit(__isset_bitfield, __DOWNLOADFLOOR_ISSET_ID);
  }

  public void setDownloadFloorIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOWNLOADFLOOR_ISSET_ID, value);
  }

  public long getDownloadCeiling() {
    return this.downloadCeiling;
  }

  public AppWeb setDownloadCeiling(long downloadCeiling) {
    this.downloadCeiling = downloadCeiling;
    setDownloadCeilingIsSet(true);
    return this;
  }

  public void unsetDownloadCeiling() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOWNLOADCEILING_ISSET_ID);
  }

  /** Returns true if field downloadCeiling is set (has been assigned a value) and false otherwise */
  public boolean isSetDownloadCeiling() {
    return EncodingUtils.testBit(__isset_bitfield, __DOWNLOADCEILING_ISSET_ID);
  }

  public void setDownloadCeilingIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOWNLOADCEILING_ISSET_ID, value);
  }

  public double getRating() {
    return this.rating;
  }

  public AppWeb setRating(double rating) {
    this.rating = rating;
    setRatingIsSet(true);
    return this;
  }

  public void unsetRating() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RATING_ISSET_ID);
  }

  /** Returns true if field rating is set (has been assigned a value) and false otherwise */
  public boolean isSetRating() {
    return EncodingUtils.testBit(__isset_bitfield, __RATING_ISSET_ID);
  }

  public void setRatingIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RATING_ISSET_ID, value);
  }

  public long getRatingCount() {
    return this.ratingCount;
  }

  public AppWeb setRatingCount(long ratingCount) {
    this.ratingCount = ratingCount;
    setRatingCountIsSet(true);
    return this;
  }

  public void unsetRatingCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RATINGCOUNT_ISSET_ID);
  }

  /** Returns true if field ratingCount is set (has been assigned a value) and false otherwise */
  public boolean isSetRatingCount() {
    return EncodingUtils.testBit(__isset_bitfield, __RATINGCOUNT_ISSET_ID);
  }

  public void setRatingCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RATINGCOUNT_ISSET_ID, value);
  }

  public String getReview() {
    return this.review;
  }

  public AppWeb setReview(String review) {
    this.review = review;
    return this;
  }

  public void unsetReview() {
    this.review = null;
  }

  /** Returns true if field review is set (has been assigned a value) and false otherwise */
  public boolean isSetReview() {
    return this.review != null;
  }

  public void setReviewIsSet(boolean value) {
    if (!value) {
      this.review = null;
    }
  }

  public String getContentRating() {
    return this.contentRating;
  }

  public AppWeb setContentRating(String contentRating) {
    this.contentRating = contentRating;
    return this;
  }

  public void unsetContentRating() {
    this.contentRating = null;
  }

  /** Returns true if field contentRating is set (has been assigned a value) and false otherwise */
  public boolean isSetContentRating() {
    return this.contentRating != null;
  }

  public void setContentRatingIsSet(boolean value) {
    if (!value) {
      this.contentRating = null;
    }
  }

  public int getAppAdvertiserListSize() {
    return (this.appAdvertiserList == null) ? 0 : this.appAdvertiserList.size();
  }

  public java.util.Iterator<AppAdvertiser> getAppAdvertiserListIterator() {
    return (this.appAdvertiserList == null) ? null : this.appAdvertiserList.iterator();
  }

  public void addToAppAdvertiserList(AppAdvertiser elem) {
    if (this.appAdvertiserList == null) {
      this.appAdvertiserList = new ArrayList<AppAdvertiser>();
    }
    this.appAdvertiserList.add(elem);
  }

  public List<AppAdvertiser> getAppAdvertiserList() {
    return this.appAdvertiserList;
  }

  public AppWeb setAppAdvertiserList(List<AppAdvertiser> appAdvertiserList) {
    this.appAdvertiserList = appAdvertiserList;
    return this;
  }

  public void unsetAppAdvertiserList() {
    this.appAdvertiserList = null;
  }

  /** Returns true if field appAdvertiserList is set (has been assigned a value) and false otherwise */
  public boolean isSetAppAdvertiserList() {
    return this.appAdvertiserList != null;
  }

  public void setAppAdvertiserListIsSet(boolean value) {
    if (!value) {
      this.appAdvertiserList = null;
    }
  }

  public int getAppAntivirusListSize() {
    return (this.appAntivirusList == null) ? 0 : this.appAntivirusList.size();
  }

  public java.util.Iterator<AppAntivirus> getAppAntivirusListIterator() {
    return (this.appAntivirusList == null) ? null : this.appAntivirusList.iterator();
  }

  public void addToAppAntivirusList(AppAntivirus elem) {
    if (this.appAntivirusList == null) {
      this.appAntivirusList = new ArrayList<AppAntivirus>();
    }
    this.appAntivirusList.add(elem);
  }

  public List<AppAntivirus> getAppAntivirusList() {
    return this.appAntivirusList;
  }

  public AppWeb setAppAntivirusList(List<AppAntivirus> appAntivirusList) {
    this.appAntivirusList = appAntivirusList;
    return this;
  }

  public void unsetAppAntivirusList() {
    this.appAntivirusList = null;
  }

  /** Returns true if field appAntivirusList is set (has been assigned a value) and false otherwise */
  public boolean isSetAppAntivirusList() {
    return this.appAntivirusList != null;
  }

  public void setAppAntivirusListIsSet(boolean value) {
    if (!value) {
      this.appAntivirusList = null;
    }
  }

  public int getAppCommentListSize() {
    return (this.appCommentList == null) ? 0 : this.appCommentList.size();
  }

  public java.util.Iterator<AppComment> getAppCommentListIterator() {
    return (this.appCommentList == null) ? null : this.appCommentList.iterator();
  }

  public void addToAppCommentList(AppComment elem) {
    if (this.appCommentList == null) {
      this.appCommentList = new ArrayList<AppComment>();
    }
    this.appCommentList.add(elem);
  }

  public List<AppComment> getAppCommentList() {
    return this.appCommentList;
  }

  public AppWeb setAppCommentList(List<AppComment> appCommentList) {
    this.appCommentList = appCommentList;
    return this;
  }

  public void unsetAppCommentList() {
    this.appCommentList = null;
  }

  /** Returns true if field appCommentList is set (has been assigned a value) and false otherwise */
  public boolean isSetAppCommentList() {
    return this.appCommentList != null;
  }

  public void setAppCommentListIsSet(boolean value) {
    if (!value) {
      this.appCommentList = null;
    }
  }

  public int getAppExternalLinkListSize() {
    return (this.appExternalLinkList == null) ? 0 : this.appExternalLinkList.size();
  }

  public java.util.Iterator<AppExternalLink> getAppExternalLinkListIterator() {
    return (this.appExternalLinkList == null) ? null : this.appExternalLinkList.iterator();
  }

  public void addToAppExternalLinkList(AppExternalLink elem) {
    if (this.appExternalLinkList == null) {
      this.appExternalLinkList = new ArrayList<AppExternalLink>();
    }
    this.appExternalLinkList.add(elem);
  }

  public List<AppExternalLink> getAppExternalLinkList() {
    return this.appExternalLinkList;
  }

  public AppWeb setAppExternalLinkList(List<AppExternalLink> appExternalLinkList) {
    this.appExternalLinkList = appExternalLinkList;
    return this;
  }

  public void unsetAppExternalLinkList() {
    this.appExternalLinkList = null;
  }

  /** Returns true if field appExternalLinkList is set (has been assigned a value) and false otherwise */
  public boolean isSetAppExternalLinkList() {
    return this.appExternalLinkList != null;
  }

  public void setAppExternalLinkListIsSet(boolean value) {
    if (!value) {
      this.appExternalLinkList = null;
    }
  }

  public int getAppPermissionListSize() {
    return (this.appPermissionList == null) ? 0 : this.appPermissionList.size();
  }

  public java.util.Iterator<AppPermission> getAppPermissionListIterator() {
    return (this.appPermissionList == null) ? null : this.appPermissionList.iterator();
  }

  public void addToAppPermissionList(AppPermission elem) {
    if (this.appPermissionList == null) {
      this.appPermissionList = new ArrayList<AppPermission>();
    }
    this.appPermissionList.add(elem);
  }

  public List<AppPermission> getAppPermissionList() {
    return this.appPermissionList;
  }

  public AppWeb setAppPermissionList(List<AppPermission> appPermissionList) {
    this.appPermissionList = appPermissionList;
    return this;
  }

  public void unsetAppPermissionList() {
    this.appPermissionList = null;
  }

  /** Returns true if field appPermissionList is set (has been assigned a value) and false otherwise */
  public boolean isSetAppPermissionList() {
    return this.appPermissionList != null;
  }

  public void setAppPermissionListIsSet(boolean value) {
    if (!value) {
      this.appPermissionList = null;
    }
  }

  public String getAppChecksum() {
    return this.appChecksum;
  }

  public AppWeb setAppChecksum(String appChecksum) {
    this.appChecksum = appChecksum;
    return this;
  }

  public void unsetAppChecksum() {
    this.appChecksum = null;
  }

  /** Returns true if field appChecksum is set (has been assigned a value) and false otherwise */
  public boolean isSetAppChecksum() {
    return this.appChecksum != null;
  }

  public void setAppChecksumIsSet(boolean value) {
    if (!value) {
      this.appChecksum = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case APP_TYPE:
      if (value == null) {
        unsetAppType();
      } else {
        setAppType((AppType)value);
      }
      break;

    case ORIGIN_TYPE:
      if (value == null) {
        unsetOriginType();
      } else {
        setOriginType((OriginType)value);
      }
      break;

    case STORE_NAME:
      if (value == null) {
        unsetStoreName();
      } else {
        setStoreName((String)value);
      }
      break;

    case STORE_DISPLAY_NAME:
      if (value == null) {
        unsetStoreDisplayName();
      } else {
        setStoreDisplayName((String)value);
      }
      break;

    case STORE_URL:
      if (value == null) {
        unsetStoreUrl();
      } else {
        setStoreUrl((String)value);
      }
      break;

    case STORE_TYPE:
      if (value == null) {
        unsetStoreType();
      } else {
        setStoreType((Integer)value);
      }
      break;

    case CATEGORY:
      if (value == null) {
        unsetCategory();
      } else {
        setCategory((String)value);
      }
      break;

    case APP_NAME:
      if (value == null) {
        unsetAppName();
      } else {
        setAppName((String)value);
      }
      break;

    case INNER_ID:
      if (value == null) {
        unsetInnerId();
      } else {
        setInnerId((String)value);
      }
      break;

    case APP_VERSION:
      if (value == null) {
        unsetAppVersion();
      } else {
        setAppVersion((String)value);
      }
      break;

    case UPDATED_TIME:
      if (value == null) {
        unsetUpdatedTime();
      } else {
        setUpdatedTime((Long)value);
      }
      break;

    case COLLECTED_TIME:
      if (value == null) {
        unsetCollectedTime();
      } else {
        setCollectedTime((Long)value);
      }
      break;

    case UPDATE_HISTORY:
      if (value == null) {
        unsetUpdateHistory();
      } else {
        setUpdateHistory((String)value);
      }
      break;

    case PLATFORM:
      if (value == null) {
        unsetPlatform();
      } else {
        setPlatform((String)value);
      }
      break;

    case OS_TYPE:
      if (value == null) {
        unsetOsType();
      } else {
        setOsType((String)value);
      }
      break;

    case OS_VERSION:
      if (value == null) {
        unsetOsVersion();
      } else {
        setOsVersion((String)value);
      }
      break;

    case DEVICE:
      if (value == null) {
        unsetDevice();
      } else {
        setDevice((String)value);
      }
      break;

    case COUNTRY:
      if (value == null) {
        unsetCountry();
      } else {
        setCountry((String)value);
      }
      break;

    case LANGUAGE:
      if (value == null) {
        unsetLanguage();
      } else {
        setLanguage((String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case SIZE:
      if (value == null) {
        unsetSize();
      } else {
        setSize((String)value);
      }
      break;

    case PRICE:
      if (value == null) {
        unsetPrice();
      } else {
        setPrice((String)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    case DOWNLOAD_URL:
      if (value == null) {
        unsetDownloadUrl();
      } else {
        setDownloadUrl((String)value);
      }
      break;

    case SNAPSHOT_URL_LIST:
      if (value == null) {
        unsetSnapshotUrlList();
      } else {
        setSnapshotUrlList((List<String>)value);
      }
      break;

    case LOGO_URL:
      if (value == null) {
        unsetLogoUrl();
      } else {
        setLogoUrl((String)value);
      }
      break;

    case DEVELOPER_NAME:
      if (value == null) {
        unsetDeveloperName();
      } else {
        setDeveloperName((String)value);
      }
      break;

    case DEVELOPER_WEBSITE:
      if (value == null) {
        unsetDeveloperWebsite();
      } else {
        setDeveloperWebsite((String)value);
      }
      break;

    case DEVELOPER_EMAIL:
      if (value == null) {
        unsetDeveloperEmail();
      } else {
        setDeveloperEmail((String)value);
      }
      break;

    case PRIVACY_POLICY:
      if (value == null) {
        unsetPrivacyPolicy();
      } else {
        setPrivacyPolicy((String)value);
      }
      break;

    case DOWNLOAD_FLOOR:
      if (value == null) {
        unsetDownloadFloor();
      } else {
        setDownloadFloor((Long)value);
      }
      break;

    case DOWNLOAD_CEILING:
      if (value == null) {
        unsetDownloadCeiling();
      } else {
        setDownloadCeiling((Long)value);
      }
      break;

    case RATING:
      if (value == null) {
        unsetRating();
      } else {
        setRating((Double)value);
      }
      break;

    case RATING_COUNT:
      if (value == null) {
        unsetRatingCount();
      } else {
        setRatingCount((Long)value);
      }
      break;

    case REVIEW:
      if (value == null) {
        unsetReview();
      } else {
        setReview((String)value);
      }
      break;

    case CONTENT_RATING:
      if (value == null) {
        unsetContentRating();
      } else {
        setContentRating((String)value);
      }
      break;

    case APP_ADVERTISER_LIST:
      if (value == null) {
        unsetAppAdvertiserList();
      } else {
        setAppAdvertiserList((List<AppAdvertiser>)value);
      }
      break;

    case APP_ANTIVIRUS_LIST:
      if (value == null) {
        unsetAppAntivirusList();
      } else {
        setAppAntivirusList((List<AppAntivirus>)value);
      }
      break;

    case APP_COMMENT_LIST:
      if (value == null) {
        unsetAppCommentList();
      } else {
        setAppCommentList((List<AppComment>)value);
      }
      break;

    case APP_EXTERNAL_LINK_LIST:
      if (value == null) {
        unsetAppExternalLinkList();
      } else {
        setAppExternalLinkList((List<AppExternalLink>)value);
      }
      break;

    case APP_PERMISSION_LIST:
      if (value == null) {
        unsetAppPermissionList();
      } else {
        setAppPermissionList((List<AppPermission>)value);
      }
      break;

    case APP_CHECKSUM:
      if (value == null) {
        unsetAppChecksum();
      } else {
        setAppChecksum((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case APP_TYPE:
      return getAppType();

    case ORIGIN_TYPE:
      return getOriginType();

    case STORE_NAME:
      return getStoreName();

    case STORE_DISPLAY_NAME:
      return getStoreDisplayName();

    case STORE_URL:
      return getStoreUrl();

    case STORE_TYPE:
      return Integer.valueOf(getStoreType());

    case CATEGORY:
      return getCategory();

    case APP_NAME:
      return getAppName();

    case INNER_ID:
      return getInnerId();

    case APP_VERSION:
      return getAppVersion();

    case UPDATED_TIME:
      return Long.valueOf(getUpdatedTime());

    case COLLECTED_TIME:
      return Long.valueOf(getCollectedTime());

    case UPDATE_HISTORY:
      return getUpdateHistory();

    case PLATFORM:
      return getPlatform();

    case OS_TYPE:
      return getOsType();

    case OS_VERSION:
      return getOsVersion();

    case DEVICE:
      return getDevice();

    case COUNTRY:
      return getCountry();

    case LANGUAGE:
      return getLanguage();

    case DESCRIPTION:
      return getDescription();

    case SIZE:
      return getSize();

    case PRICE:
      return getPrice();

    case URL:
      return getUrl();

    case DOWNLOAD_URL:
      return getDownloadUrl();

    case SNAPSHOT_URL_LIST:
      return getSnapshotUrlList();

    case LOGO_URL:
      return getLogoUrl();

    case DEVELOPER_NAME:
      return getDeveloperName();

    case DEVELOPER_WEBSITE:
      return getDeveloperWebsite();

    case DEVELOPER_EMAIL:
      return getDeveloperEmail();

    case PRIVACY_POLICY:
      return getPrivacyPolicy();

    case DOWNLOAD_FLOOR:
      return Long.valueOf(getDownloadFloor());

    case DOWNLOAD_CEILING:
      return Long.valueOf(getDownloadCeiling());

    case RATING:
      return Double.valueOf(getRating());

    case RATING_COUNT:
      return Long.valueOf(getRatingCount());

    case REVIEW:
      return getReview();

    case CONTENT_RATING:
      return getContentRating();

    case APP_ADVERTISER_LIST:
      return getAppAdvertiserList();

    case APP_ANTIVIRUS_LIST:
      return getAppAntivirusList();

    case APP_COMMENT_LIST:
      return getAppCommentList();

    case APP_EXTERNAL_LINK_LIST:
      return getAppExternalLinkList();

    case APP_PERMISSION_LIST:
      return getAppPermissionList();

    case APP_CHECKSUM:
      return getAppChecksum();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case APP_TYPE:
      return isSetAppType();
    case ORIGIN_TYPE:
      return isSetOriginType();
    case STORE_NAME:
      return isSetStoreName();
    case STORE_DISPLAY_NAME:
      return isSetStoreDisplayName();
    case STORE_URL:
      return isSetStoreUrl();
    case STORE_TYPE:
      return isSetStoreType();
    case CATEGORY:
      return isSetCategory();
    case APP_NAME:
      return isSetAppName();
    case INNER_ID:
      return isSetInnerId();
    case APP_VERSION:
      return isSetAppVersion();
    case UPDATED_TIME:
      return isSetUpdatedTime();
    case COLLECTED_TIME:
      return isSetCollectedTime();
    case UPDATE_HISTORY:
      return isSetUpdateHistory();
    case PLATFORM:
      return isSetPlatform();
    case OS_TYPE:
      return isSetOsType();
    case OS_VERSION:
      return isSetOsVersion();
    case DEVICE:
      return isSetDevice();
    case COUNTRY:
      return isSetCountry();
    case LANGUAGE:
      return isSetLanguage();
    case DESCRIPTION:
      return isSetDescription();
    case SIZE:
      return isSetSize();
    case PRICE:
      return isSetPrice();
    case URL:
      return isSetUrl();
    case DOWNLOAD_URL:
      return isSetDownloadUrl();
    case SNAPSHOT_URL_LIST:
      return isSetSnapshotUrlList();
    case LOGO_URL:
      return isSetLogoUrl();
    case DEVELOPER_NAME:
      return isSetDeveloperName();
    case DEVELOPER_WEBSITE:
      return isSetDeveloperWebsite();
    case DEVELOPER_EMAIL:
      return isSetDeveloperEmail();
    case PRIVACY_POLICY:
      return isSetPrivacyPolicy();
    case DOWNLOAD_FLOOR:
      return isSetDownloadFloor();
    case DOWNLOAD_CEILING:
      return isSetDownloadCeiling();
    case RATING:
      return isSetRating();
    case RATING_COUNT:
      return isSetRatingCount();
    case REVIEW:
      return isSetReview();
    case CONTENT_RATING:
      return isSetContentRating();
    case APP_ADVERTISER_LIST:
      return isSetAppAdvertiserList();
    case APP_ANTIVIRUS_LIST:
      return isSetAppAntivirusList();
    case APP_COMMENT_LIST:
      return isSetAppCommentList();
    case APP_EXTERNAL_LINK_LIST:
      return isSetAppExternalLinkList();
    case APP_PERMISSION_LIST:
      return isSetAppPermissionList();
    case APP_CHECKSUM:
      return isSetAppChecksum();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AppWeb)
      return this.equals((AppWeb)that);
    return false;
  }

  public boolean equals(AppWeb that) {
    if (that == null)
      return false;

    boolean this_present_appType = true && this.isSetAppType();
    boolean that_present_appType = true && that.isSetAppType();
    if (this_present_appType || that_present_appType) {
      if (!(this_present_appType && that_present_appType))
        return false;
      if (!this.appType.equals(that.appType))
        return false;
    }

    boolean this_present_originType = true && this.isSetOriginType();
    boolean that_present_originType = true && that.isSetOriginType();
    if (this_present_originType || that_present_originType) {
      if (!(this_present_originType && that_present_originType))
        return false;
      if (!this.originType.equals(that.originType))
        return false;
    }

    boolean this_present_storeName = true && this.isSetStoreName();
    boolean that_present_storeName = true && that.isSetStoreName();
    if (this_present_storeName || that_present_storeName) {
      if (!(this_present_storeName && that_present_storeName))
        return false;
      if (!this.storeName.equals(that.storeName))
        return false;
    }

    boolean this_present_storeDisplayName = true && this.isSetStoreDisplayName();
    boolean that_present_storeDisplayName = true && that.isSetStoreDisplayName();
    if (this_present_storeDisplayName || that_present_storeDisplayName) {
      if (!(this_present_storeDisplayName && that_present_storeDisplayName))
        return false;
      if (!this.storeDisplayName.equals(that.storeDisplayName))
        return false;
    }

    boolean this_present_storeUrl = true && this.isSetStoreUrl();
    boolean that_present_storeUrl = true && that.isSetStoreUrl();
    if (this_present_storeUrl || that_present_storeUrl) {
      if (!(this_present_storeUrl && that_present_storeUrl))
        return false;
      if (!this.storeUrl.equals(that.storeUrl))
        return false;
    }

    boolean this_present_storeType = true && this.isSetStoreType();
    boolean that_present_storeType = true && that.isSetStoreType();
    if (this_present_storeType || that_present_storeType) {
      if (!(this_present_storeType && that_present_storeType))
        return false;
      if (this.storeType != that.storeType)
        return false;
    }

    boolean this_present_category = true && this.isSetCategory();
    boolean that_present_category = true && that.isSetCategory();
    if (this_present_category || that_present_category) {
      if (!(this_present_category && that_present_category))
        return false;
      if (!this.category.equals(that.category))
        return false;
    }

    boolean this_present_appName = true && this.isSetAppName();
    boolean that_present_appName = true && that.isSetAppName();
    if (this_present_appName || that_present_appName) {
      if (!(this_present_appName && that_present_appName))
        return false;
      if (!this.appName.equals(that.appName))
        return false;
    }

    boolean this_present_innerId = true && this.isSetInnerId();
    boolean that_present_innerId = true && that.isSetInnerId();
    if (this_present_innerId || that_present_innerId) {
      if (!(this_present_innerId && that_present_innerId))
        return false;
      if (!this.innerId.equals(that.innerId))
        return false;
    }

    boolean this_present_appVersion = true && this.isSetAppVersion();
    boolean that_present_appVersion = true && that.isSetAppVersion();
    if (this_present_appVersion || that_present_appVersion) {
      if (!(this_present_appVersion && that_present_appVersion))
        return false;
      if (!this.appVersion.equals(that.appVersion))
        return false;
    }

    boolean this_present_updatedTime = true;
    boolean that_present_updatedTime = true;
    if (this_present_updatedTime || that_present_updatedTime) {
      if (!(this_present_updatedTime && that_present_updatedTime))
        return false;
      if (this.updatedTime != that.updatedTime)
        return false;
    }

    boolean this_present_collectedTime = true;
    boolean that_present_collectedTime = true;
    if (this_present_collectedTime || that_present_collectedTime) {
      if (!(this_present_collectedTime && that_present_collectedTime))
        return false;
      if (this.collectedTime != that.collectedTime)
        return false;
    }

    boolean this_present_updateHistory = true && this.isSetUpdateHistory();
    boolean that_present_updateHistory = true && that.isSetUpdateHistory();
    if (this_present_updateHistory || that_present_updateHistory) {
      if (!(this_present_updateHistory && that_present_updateHistory))
        return false;
      if (!this.updateHistory.equals(that.updateHistory))
        return false;
    }

    boolean this_present_platform = true && this.isSetPlatform();
    boolean that_present_platform = true && that.isSetPlatform();
    if (this_present_platform || that_present_platform) {
      if (!(this_present_platform && that_present_platform))
        return false;
      if (!this.platform.equals(that.platform))
        return false;
    }

    boolean this_present_osType = true && this.isSetOsType();
    boolean that_present_osType = true && that.isSetOsType();
    if (this_present_osType || that_present_osType) {
      if (!(this_present_osType && that_present_osType))
        return false;
      if (!this.osType.equals(that.osType))
        return false;
    }

    boolean this_present_osVersion = true && this.isSetOsVersion();
    boolean that_present_osVersion = true && that.isSetOsVersion();
    if (this_present_osVersion || that_present_osVersion) {
      if (!(this_present_osVersion && that_present_osVersion))
        return false;
      if (!this.osVersion.equals(that.osVersion))
        return false;
    }

    boolean this_present_device = true && this.isSetDevice();
    boolean that_present_device = true && that.isSetDevice();
    if (this_present_device || that_present_device) {
      if (!(this_present_device && that_present_device))
        return false;
      if (!this.device.equals(that.device))
        return false;
    }

    boolean this_present_country = true && this.isSetCountry();
    boolean that_present_country = true && that.isSetCountry();
    if (this_present_country || that_present_country) {
      if (!(this_present_country && that_present_country))
        return false;
      if (!this.country.equals(that.country))
        return false;
    }

    boolean this_present_language = true && this.isSetLanguage();
    boolean that_present_language = true && that.isSetLanguage();
    if (this_present_language || that_present_language) {
      if (!(this_present_language && that_present_language))
        return false;
      if (!this.language.equals(that.language))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_size = true && this.isSetSize();
    boolean that_present_size = true && that.isSetSize();
    if (this_present_size || that_present_size) {
      if (!(this_present_size && that_present_size))
        return false;
      if (!this.size.equals(that.size))
        return false;
    }

    boolean this_present_price = true && this.isSetPrice();
    boolean that_present_price = true && that.isSetPrice();
    if (this_present_price || that_present_price) {
      if (!(this_present_price && that_present_price))
        return false;
      if (!this.price.equals(that.price))
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_downloadUrl = true && this.isSetDownloadUrl();
    boolean that_present_downloadUrl = true && that.isSetDownloadUrl();
    if (this_present_downloadUrl || that_present_downloadUrl) {
      if (!(this_present_downloadUrl && that_present_downloadUrl))
        return false;
      if (!this.downloadUrl.equals(that.downloadUrl))
        return false;
    }

    boolean this_present_snapshotUrlList = true && this.isSetSnapshotUrlList();
    boolean that_present_snapshotUrlList = true && that.isSetSnapshotUrlList();
    if (this_present_snapshotUrlList || that_present_snapshotUrlList) {
      if (!(this_present_snapshotUrlList && that_present_snapshotUrlList))
        return false;
      if (!this.snapshotUrlList.equals(that.snapshotUrlList))
        return false;
    }

    boolean this_present_logoUrl = true && this.isSetLogoUrl();
    boolean that_present_logoUrl = true && that.isSetLogoUrl();
    if (this_present_logoUrl || that_present_logoUrl) {
      if (!(this_present_logoUrl && that_present_logoUrl))
        return false;
      if (!this.logoUrl.equals(that.logoUrl))
        return false;
    }

    boolean this_present_developerName = true && this.isSetDeveloperName();
    boolean that_present_developerName = true && that.isSetDeveloperName();
    if (this_present_developerName || that_present_developerName) {
      if (!(this_present_developerName && that_present_developerName))
        return false;
      if (!this.developerName.equals(that.developerName))
        return false;
    }

    boolean this_present_developerWebsite = true && this.isSetDeveloperWebsite();
    boolean that_present_developerWebsite = true && that.isSetDeveloperWebsite();
    if (this_present_developerWebsite || that_present_developerWebsite) {
      if (!(this_present_developerWebsite && that_present_developerWebsite))
        return false;
      if (!this.developerWebsite.equals(that.developerWebsite))
        return false;
    }

    boolean this_present_developerEmail = true && this.isSetDeveloperEmail();
    boolean that_present_developerEmail = true && that.isSetDeveloperEmail();
    if (this_present_developerEmail || that_present_developerEmail) {
      if (!(this_present_developerEmail && that_present_developerEmail))
        return false;
      if (!this.developerEmail.equals(that.developerEmail))
        return false;
    }

    boolean this_present_privacyPolicy = true && this.isSetPrivacyPolicy();
    boolean that_present_privacyPolicy = true && that.isSetPrivacyPolicy();
    if (this_present_privacyPolicy || that_present_privacyPolicy) {
      if (!(this_present_privacyPolicy && that_present_privacyPolicy))
        return false;
      if (!this.privacyPolicy.equals(that.privacyPolicy))
        return false;
    }

    boolean this_present_downloadFloor = true && this.isSetDownloadFloor();
    boolean that_present_downloadFloor = true && that.isSetDownloadFloor();
    if (this_present_downloadFloor || that_present_downloadFloor) {
      if (!(this_present_downloadFloor && that_present_downloadFloor))
        return false;
      if (this.downloadFloor != that.downloadFloor)
        return false;
    }

    boolean this_present_downloadCeiling = true && this.isSetDownloadCeiling();
    boolean that_present_downloadCeiling = true && that.isSetDownloadCeiling();
    if (this_present_downloadCeiling || that_present_downloadCeiling) {
      if (!(this_present_downloadCeiling && that_present_downloadCeiling))
        return false;
      if (this.downloadCeiling != that.downloadCeiling)
        return false;
    }

    boolean this_present_rating = true && this.isSetRating();
    boolean that_present_rating = true && that.isSetRating();
    if (this_present_rating || that_present_rating) {
      if (!(this_present_rating && that_present_rating))
        return false;
      if (this.rating != that.rating)
        return false;
    }

    boolean this_present_ratingCount = true && this.isSetRatingCount();
    boolean that_present_ratingCount = true && that.isSetRatingCount();
    if (this_present_ratingCount || that_present_ratingCount) {
      if (!(this_present_ratingCount && that_present_ratingCount))
        return false;
      if (this.ratingCount != that.ratingCount)
        return false;
    }

    boolean this_present_review = true && this.isSetReview();
    boolean that_present_review = true && that.isSetReview();
    if (this_present_review || that_present_review) {
      if (!(this_present_review && that_present_review))
        return false;
      if (!this.review.equals(that.review))
        return false;
    }

    boolean this_present_contentRating = true && this.isSetContentRating();
    boolean that_present_contentRating = true && that.isSetContentRating();
    if (this_present_contentRating || that_present_contentRating) {
      if (!(this_present_contentRating && that_present_contentRating))
        return false;
      if (!this.contentRating.equals(that.contentRating))
        return false;
    }

    boolean this_present_appAdvertiserList = true && this.isSetAppAdvertiserList();
    boolean that_present_appAdvertiserList = true && that.isSetAppAdvertiserList();
    if (this_present_appAdvertiserList || that_present_appAdvertiserList) {
      if (!(this_present_appAdvertiserList && that_present_appAdvertiserList))
        return false;
      if (!this.appAdvertiserList.equals(that.appAdvertiserList))
        return false;
    }

    boolean this_present_appAntivirusList = true && this.isSetAppAntivirusList();
    boolean that_present_appAntivirusList = true && that.isSetAppAntivirusList();
    if (this_present_appAntivirusList || that_present_appAntivirusList) {
      if (!(this_present_appAntivirusList && that_present_appAntivirusList))
        return false;
      if (!this.appAntivirusList.equals(that.appAntivirusList))
        return false;
    }

    boolean this_present_appCommentList = true && this.isSetAppCommentList();
    boolean that_present_appCommentList = true && that.isSetAppCommentList();
    if (this_present_appCommentList || that_present_appCommentList) {
      if (!(this_present_appCommentList && that_present_appCommentList))
        return false;
      if (!this.appCommentList.equals(that.appCommentList))
        return false;
    }

    boolean this_present_appExternalLinkList = true && this.isSetAppExternalLinkList();
    boolean that_present_appExternalLinkList = true && that.isSetAppExternalLinkList();
    if (this_present_appExternalLinkList || that_present_appExternalLinkList) {
      if (!(this_present_appExternalLinkList && that_present_appExternalLinkList))
        return false;
      if (!this.appExternalLinkList.equals(that.appExternalLinkList))
        return false;
    }

    boolean this_present_appPermissionList = true && this.isSetAppPermissionList();
    boolean that_present_appPermissionList = true && that.isSetAppPermissionList();
    if (this_present_appPermissionList || that_present_appPermissionList) {
      if (!(this_present_appPermissionList && that_present_appPermissionList))
        return false;
      if (!this.appPermissionList.equals(that.appPermissionList))
        return false;
    }

    boolean this_present_appChecksum = true && this.isSetAppChecksum();
    boolean that_present_appChecksum = true && that.isSetAppChecksum();
    if (this_present_appChecksum || that_present_appChecksum) {
      if (!(this_present_appChecksum && that_present_appChecksum))
        return false;
      if (!this.appChecksum.equals(that.appChecksum))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(AppWeb other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    AppWeb typedOther = (AppWeb)other;

    lastComparison = Boolean.valueOf(isSetAppType()).compareTo(typedOther.isSetAppType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appType, typedOther.appType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOriginType()).compareTo(typedOther.isSetOriginType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOriginType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originType, typedOther.originType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStoreName()).compareTo(typedOther.isSetStoreName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStoreName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storeName, typedOther.storeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStoreDisplayName()).compareTo(typedOther.isSetStoreDisplayName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStoreDisplayName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storeDisplayName, typedOther.storeDisplayName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStoreUrl()).compareTo(typedOther.isSetStoreUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStoreUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storeUrl, typedOther.storeUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStoreType()).compareTo(typedOther.isSetStoreType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStoreType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storeType, typedOther.storeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategory()).compareTo(typedOther.isSetCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, typedOther.category);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppName()).compareTo(typedOther.isSetAppName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appName, typedOther.appName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInnerId()).compareTo(typedOther.isSetInnerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInnerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.innerId, typedOther.innerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppVersion()).compareTo(typedOther.isSetAppVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appVersion, typedOther.appVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdatedTime()).compareTo(typedOther.isSetUpdatedTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdatedTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updatedTime, typedOther.updatedTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCollectedTime()).compareTo(typedOther.isSetCollectedTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollectedTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectedTime, typedOther.collectedTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateHistory()).compareTo(typedOther.isSetUpdateHistory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateHistory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateHistory, typedOther.updateHistory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlatform()).compareTo(typedOther.isSetPlatform());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlatform()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platform, typedOther.platform);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOsType()).compareTo(typedOther.isSetOsType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOsType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.osType, typedOther.osType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOsVersion()).compareTo(typedOther.isSetOsVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOsVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.osVersion, typedOther.osVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDevice()).compareTo(typedOther.isSetDevice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDevice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.device, typedOther.device);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCountry()).compareTo(typedOther.isSetCountry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.country, typedOther.country);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLanguage()).compareTo(typedOther.isSetLanguage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLanguage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.language, typedOther.language);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(typedOther.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, typedOther.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSize()).compareTo(typedOther.isSetSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.size, typedOther.size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrice()).compareTo(typedOther.isSetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, typedOther.price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(typedOther.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, typedOther.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDownloadUrl()).compareTo(typedOther.isSetDownloadUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDownloadUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.downloadUrl, typedOther.downloadUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSnapshotUrlList()).compareTo(typedOther.isSetSnapshotUrlList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSnapshotUrlList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.snapshotUrlList, typedOther.snapshotUrlList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLogoUrl()).compareTo(typedOther.isSetLogoUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogoUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logoUrl, typedOther.logoUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeveloperName()).compareTo(typedOther.isSetDeveloperName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeveloperName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.developerName, typedOther.developerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeveloperWebsite()).compareTo(typedOther.isSetDeveloperWebsite());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeveloperWebsite()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.developerWebsite, typedOther.developerWebsite);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeveloperEmail()).compareTo(typedOther.isSetDeveloperEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeveloperEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.developerEmail, typedOther.developerEmail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrivacyPolicy()).compareTo(typedOther.isSetPrivacyPolicy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrivacyPolicy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.privacyPolicy, typedOther.privacyPolicy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDownloadFloor()).compareTo(typedOther.isSetDownloadFloor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDownloadFloor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.downloadFloor, typedOther.downloadFloor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDownloadCeiling()).compareTo(typedOther.isSetDownloadCeiling());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDownloadCeiling()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.downloadCeiling, typedOther.downloadCeiling);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRating()).compareTo(typedOther.isSetRating());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRating()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rating, typedOther.rating);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRatingCount()).compareTo(typedOther.isSetRatingCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRatingCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ratingCount, typedOther.ratingCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReview()).compareTo(typedOther.isSetReview());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReview()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.review, typedOther.review);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContentRating()).compareTo(typedOther.isSetContentRating());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContentRating()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contentRating, typedOther.contentRating);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppAdvertiserList()).compareTo(typedOther.isSetAppAdvertiserList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppAdvertiserList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appAdvertiserList, typedOther.appAdvertiserList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppAntivirusList()).compareTo(typedOther.isSetAppAntivirusList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppAntivirusList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appAntivirusList, typedOther.appAntivirusList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppCommentList()).compareTo(typedOther.isSetAppCommentList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppCommentList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appCommentList, typedOther.appCommentList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppExternalLinkList()).compareTo(typedOther.isSetAppExternalLinkList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppExternalLinkList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appExternalLinkList, typedOther.appExternalLinkList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppPermissionList()).compareTo(typedOther.isSetAppPermissionList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppPermissionList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appPermissionList, typedOther.appPermissionList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppChecksum()).compareTo(typedOther.isSetAppChecksum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppChecksum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appChecksum, typedOther.appChecksum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AppWeb(");
    boolean first = true;

    sb.append("appType:");
    if (this.appType == null) {
      sb.append("null");
    } else {
      sb.append(this.appType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("originType:");
    if (this.originType == null) {
      sb.append("null");
    } else {
      sb.append(this.originType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("storeName:");
    if (this.storeName == null) {
      sb.append("null");
    } else {
      sb.append(this.storeName);
    }
    first = false;
    if (isSetStoreDisplayName()) {
      if (!first) sb.append(", ");
      sb.append("storeDisplayName:");
      if (this.storeDisplayName == null) {
        sb.append("null");
      } else {
        sb.append(this.storeDisplayName);
      }
      first = false;
    }
    if (isSetStoreUrl()) {
      if (!first) sb.append(", ");
      sb.append("storeUrl:");
      if (this.storeUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.storeUrl);
      }
      first = false;
    }
    if (isSetStoreType()) {
      if (!first) sb.append(", ");
      sb.append("storeType:");
      sb.append(this.storeType);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("category:");
    if (this.category == null) {
      sb.append("null");
    } else {
      sb.append(this.category);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("appName:");
    if (this.appName == null) {
      sb.append("null");
    } else {
      sb.append(this.appName);
    }
    first = false;
    if (isSetInnerId()) {
      if (!first) sb.append(", ");
      sb.append("innerId:");
      if (this.innerId == null) {
        sb.append("null");
      } else {
        sb.append(this.innerId);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("appVersion:");
    if (this.appVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.appVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updatedTime:");
    sb.append(this.updatedTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("collectedTime:");
    sb.append(this.collectedTime);
    first = false;
    if (isSetUpdateHistory()) {
      if (!first) sb.append(", ");
      sb.append("updateHistory:");
      if (this.updateHistory == null) {
        sb.append("null");
      } else {
        sb.append(this.updateHistory);
      }
      first = false;
    }
    if (isSetPlatform()) {
      if (!first) sb.append(", ");
      sb.append("platform:");
      if (this.platform == null) {
        sb.append("null");
      } else {
        sb.append(this.platform);
      }
      first = false;
    }
    if (isSetOsType()) {
      if (!first) sb.append(", ");
      sb.append("osType:");
      if (this.osType == null) {
        sb.append("null");
      } else {
        sb.append(this.osType);
      }
      first = false;
    }
    if (isSetOsVersion()) {
      if (!first) sb.append(", ");
      sb.append("osVersion:");
      if (this.osVersion == null) {
        sb.append("null");
      } else {
        sb.append(this.osVersion);
      }
      first = false;
    }
    if (isSetDevice()) {
      if (!first) sb.append(", ");
      sb.append("device:");
      if (this.device == null) {
        sb.append("null");
      } else {
        sb.append(this.device);
      }
      first = false;
    }
    if (isSetCountry()) {
      if (!first) sb.append(", ");
      sb.append("country:");
      if (this.country == null) {
        sb.append("null");
      } else {
        sb.append(this.country);
      }
      first = false;
    }
    if (isSetLanguage()) {
      if (!first) sb.append(", ");
      sb.append("language:");
      if (this.language == null) {
        sb.append("null");
      } else {
        sb.append(this.language);
      }
      first = false;
    }
    if (isSetDescription()) {
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
    }
    if (isSetSize()) {
      if (!first) sb.append(", ");
      sb.append("size:");
      if (this.size == null) {
        sb.append("null");
      } else {
        sb.append(this.size);
      }
      first = false;
    }
    if (isSetPrice()) {
      if (!first) sb.append(", ");
      sb.append("price:");
      if (this.price == null) {
        sb.append("null");
      } else {
        sb.append(this.price);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("url:");
    if (this.url == null) {
      sb.append("null");
    } else {
      sb.append(this.url);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("downloadUrl:");
    if (this.downloadUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.downloadUrl);
    }
    first = false;
    if (isSetSnapshotUrlList()) {
      if (!first) sb.append(", ");
      sb.append("snapshotUrlList:");
      if (this.snapshotUrlList == null) {
        sb.append("null");
      } else {
        sb.append(this.snapshotUrlList);
      }
      first = false;
    }
    if (isSetLogoUrl()) {
      if (!first) sb.append(", ");
      sb.append("logoUrl:");
      if (this.logoUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.logoUrl);
      }
      first = false;
    }
    if (isSetDeveloperName()) {
      if (!first) sb.append(", ");
      sb.append("developerName:");
      if (this.developerName == null) {
        sb.append("null");
      } else {
        sb.append(this.developerName);
      }
      first = false;
    }
    if (isSetDeveloperWebsite()) {
      if (!first) sb.append(", ");
      sb.append("developerWebsite:");
      if (this.developerWebsite == null) {
        sb.append("null");
      } else {
        sb.append(this.developerWebsite);
      }
      first = false;
    }
    if (isSetDeveloperEmail()) {
      if (!first) sb.append(", ");
      sb.append("developerEmail:");
      if (this.developerEmail == null) {
        sb.append("null");
      } else {
        sb.append(this.developerEmail);
      }
      first = false;
    }
    if (isSetPrivacyPolicy()) {
      if (!first) sb.append(", ");
      sb.append("privacyPolicy:");
      if (this.privacyPolicy == null) {
        sb.append("null");
      } else {
        sb.append(this.privacyPolicy);
      }
      first = false;
    }
    if (isSetDownloadFloor()) {
      if (!first) sb.append(", ");
      sb.append("downloadFloor:");
      sb.append(this.downloadFloor);
      first = false;
    }
    if (isSetDownloadCeiling()) {
      if (!first) sb.append(", ");
      sb.append("downloadCeiling:");
      sb.append(this.downloadCeiling);
      first = false;
    }
    if (isSetRating()) {
      if (!first) sb.append(", ");
      sb.append("rating:");
      sb.append(this.rating);
      first = false;
    }
    if (isSetRatingCount()) {
      if (!first) sb.append(", ");
      sb.append("ratingCount:");
      sb.append(this.ratingCount);
      first = false;
    }
    if (isSetReview()) {
      if (!first) sb.append(", ");
      sb.append("review:");
      if (this.review == null) {
        sb.append("null");
      } else {
        sb.append(this.review);
      }
      first = false;
    }
    if (isSetContentRating()) {
      if (!first) sb.append(", ");
      sb.append("contentRating:");
      if (this.contentRating == null) {
        sb.append("null");
      } else {
        sb.append(this.contentRating);
      }
      first = false;
    }
    if (isSetAppAdvertiserList()) {
      if (!first) sb.append(", ");
      sb.append("appAdvertiserList:");
      if (this.appAdvertiserList == null) {
        sb.append("null");
      } else {
        sb.append(this.appAdvertiserList);
      }
      first = false;
    }
    if (isSetAppAntivirusList()) {
      if (!first) sb.append(", ");
      sb.append("appAntivirusList:");
      if (this.appAntivirusList == null) {
        sb.append("null");
      } else {
        sb.append(this.appAntivirusList);
      }
      first = false;
    }
    if (isSetAppCommentList()) {
      if (!first) sb.append(", ");
      sb.append("appCommentList:");
      if (this.appCommentList == null) {
        sb.append("null");
      } else {
        sb.append(this.appCommentList);
      }
      first = false;
    }
    if (isSetAppExternalLinkList()) {
      if (!first) sb.append(", ");
      sb.append("appExternalLinkList:");
      if (this.appExternalLinkList == null) {
        sb.append("null");
      } else {
        sb.append(this.appExternalLinkList);
      }
      first = false;
    }
    if (isSetAppPermissionList()) {
      if (!first) sb.append(", ");
      sb.append("appPermissionList:");
      if (this.appPermissionList == null) {
        sb.append("null");
      } else {
        sb.append(this.appPermissionList);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("appChecksum:");
    if (this.appChecksum == null) {
      sb.append("null");
    } else {
      sb.append(this.appChecksum);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (appType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'appType' was not present! Struct: " + toString());
    }
    if (originType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'originType' was not present! Struct: " + toString());
    }
    if (storeName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'storeName' was not present! Struct: " + toString());
    }
    if (category == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'category' was not present! Struct: " + toString());
    }
    if (appName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'appName' was not present! Struct: " + toString());
    }
    if (appVersion == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'appVersion' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'updatedTime' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'collectedTime' because it's a primitive and you chose the non-beans generator.
    if (url == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'url' was not present! Struct: " + toString());
    }
    if (downloadUrl == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'downloadUrl' was not present! Struct: " + toString());
    }
    if (appChecksum == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'appChecksum' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AppWebStandardSchemeFactory implements SchemeFactory {
    public AppWebStandardScheme getScheme() {
      return new AppWebStandardScheme();
    }
  }

  private static class AppWebStandardScheme extends StandardScheme<AppWeb> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AppWeb struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // APP_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.appType = AppType.findByValue(iprot.readI32());
              struct.setAppTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ORIGIN_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.originType = OriginType.findByValue(iprot.readI32());
              struct.setOriginTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STORE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.storeName = iprot.readString();
              struct.setStoreNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STORE_DISPLAY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.storeDisplayName = iprot.readString();
              struct.setStoreDisplayNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STORE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.storeUrl = iprot.readString();
              struct.setStoreUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STORE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.storeType = iprot.readI32();
              struct.setStoreTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.category = iprot.readString();
              struct.setCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // APP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appName = iprot.readString();
              struct.setAppNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // INNER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.innerId = iprot.readString();
              struct.setInnerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // APP_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appVersion = iprot.readString();
              struct.setAppVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // UPDATED_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updatedTime = iprot.readI64();
              struct.setUpdatedTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // COLLECTED_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.collectedTime = iprot.readI64();
              struct.setCollectedTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // UPDATE_HISTORY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateHistory = iprot.readString();
              struct.setUpdateHistoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PLATFORM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.platform = iprot.readString();
              struct.setPlatformIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // OS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.osType = iprot.readString();
              struct.setOsTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // OS_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.osVersion = iprot.readString();
              struct.setOsVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // DEVICE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.device = iprot.readString();
              struct.setDeviceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // COUNTRY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.country = iprot.readString();
              struct.setCountryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // LANGUAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.language = iprot.readString();
              struct.setLanguageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.size = iprot.readString();
              struct.setSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.price = iprot.readString();
              struct.setPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // DOWNLOAD_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.downloadUrl = iprot.readString();
              struct.setDownloadUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // SNAPSHOT_URL_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.snapshotUrlList = new ArrayList<String>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  String _elem2; // required
                  _elem2 = iprot.readString();
                  struct.snapshotUrlList.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setSnapshotUrlListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // LOGO_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.logoUrl = iprot.readString();
              struct.setLogoUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // DEVELOPER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.developerName = iprot.readString();
              struct.setDeveloperNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // DEVELOPER_WEBSITE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.developerWebsite = iprot.readString();
              struct.setDeveloperWebsiteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // DEVELOPER_EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.developerEmail = iprot.readString();
              struct.setDeveloperEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // PRIVACY_POLICY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.privacyPolicy = iprot.readString();
              struct.setPrivacyPolicyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // DOWNLOAD_FLOOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.downloadFloor = iprot.readI64();
              struct.setDownloadFloorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // DOWNLOAD_CEILING
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.downloadCeiling = iprot.readI64();
              struct.setDownloadCeilingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // RATING
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.rating = iprot.readDouble();
              struct.setRatingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // RATING_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.ratingCount = iprot.readI64();
              struct.setRatingCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // REVIEW
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.review = iprot.readString();
              struct.setReviewIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // CONTENT_RATING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contentRating = iprot.readString();
              struct.setContentRatingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // APP_ADVERTISER_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.appAdvertiserList = new ArrayList<AppAdvertiser>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  AppAdvertiser _elem5; // required
                  _elem5 = new AppAdvertiser();
                  _elem5.read(iprot);
                  struct.appAdvertiserList.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setAppAdvertiserListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // APP_ANTIVIRUS_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.appAntivirusList = new ArrayList<AppAntivirus>(_list6.size);
                for (int _i7 = 0; _i7 < _list6.size; ++_i7)
                {
                  AppAntivirus _elem8; // required
                  _elem8 = new AppAntivirus();
                  _elem8.read(iprot);
                  struct.appAntivirusList.add(_elem8);
                }
                iprot.readListEnd();
              }
              struct.setAppAntivirusListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // APP_COMMENT_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                struct.appCommentList = new ArrayList<AppComment>(_list9.size);
                for (int _i10 = 0; _i10 < _list9.size; ++_i10)
                {
                  AppComment _elem11; // required
                  _elem11 = new AppComment();
                  _elem11.read(iprot);
                  struct.appCommentList.add(_elem11);
                }
                iprot.readListEnd();
              }
              struct.setAppCommentListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // APP_EXTERNAL_LINK_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                struct.appExternalLinkList = new ArrayList<AppExternalLink>(_list12.size);
                for (int _i13 = 0; _i13 < _list12.size; ++_i13)
                {
                  AppExternalLink _elem14; // required
                  _elem14 = new AppExternalLink();
                  _elem14.read(iprot);
                  struct.appExternalLinkList.add(_elem14);
                }
                iprot.readListEnd();
              }
              struct.setAppExternalLinkListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // APP_PERMISSION_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list15 = iprot.readListBegin();
                struct.appPermissionList = new ArrayList<AppPermission>(_list15.size);
                for (int _i16 = 0; _i16 < _list15.size; ++_i16)
                {
                  AppPermission _elem17; // required
                  _elem17 = new AppPermission();
                  _elem17.read(iprot);
                  struct.appPermissionList.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setAppPermissionListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // APP_CHECKSUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appChecksum = iprot.readString();
              struct.setAppChecksumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetUpdatedTime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'updatedTime' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCollectedTime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'collectedTime' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AppWeb struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.appType != null) {
        oprot.writeFieldBegin(APP_TYPE_FIELD_DESC);
        oprot.writeI32(struct.appType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.originType != null) {
        oprot.writeFieldBegin(ORIGIN_TYPE_FIELD_DESC);
        oprot.writeI32(struct.originType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.storeName != null) {
        oprot.writeFieldBegin(STORE_NAME_FIELD_DESC);
        oprot.writeString(struct.storeName);
        oprot.writeFieldEnd();
      }
      if (struct.storeDisplayName != null) {
        if (struct.isSetStoreDisplayName()) {
          oprot.writeFieldBegin(STORE_DISPLAY_NAME_FIELD_DESC);
          oprot.writeString(struct.storeDisplayName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.storeUrl != null) {
        if (struct.isSetStoreUrl()) {
          oprot.writeFieldBegin(STORE_URL_FIELD_DESC);
          oprot.writeString(struct.storeUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStoreType()) {
        oprot.writeFieldBegin(STORE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.storeType);
        oprot.writeFieldEnd();
      }
      if (struct.category != null) {
        oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
        oprot.writeString(struct.category);
        oprot.writeFieldEnd();
      }
      if (struct.appName != null) {
        oprot.writeFieldBegin(APP_NAME_FIELD_DESC);
        oprot.writeString(struct.appName);
        oprot.writeFieldEnd();
      }
      if (struct.innerId != null) {
        if (struct.isSetInnerId()) {
          oprot.writeFieldBegin(INNER_ID_FIELD_DESC);
          oprot.writeString(struct.innerId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.appVersion != null) {
        oprot.writeFieldBegin(APP_VERSION_FIELD_DESC);
        oprot.writeString(struct.appVersion);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(UPDATED_TIME_FIELD_DESC);
      oprot.writeI64(struct.updatedTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COLLECTED_TIME_FIELD_DESC);
      oprot.writeI64(struct.collectedTime);
      oprot.writeFieldEnd();
      if (struct.updateHistory != null) {
        if (struct.isSetUpdateHistory()) {
          oprot.writeFieldBegin(UPDATE_HISTORY_FIELD_DESC);
          oprot.writeString(struct.updateHistory);
          oprot.writeFieldEnd();
        }
      }
      if (struct.platform != null) {
        if (struct.isSetPlatform()) {
          oprot.writeFieldBegin(PLATFORM_FIELD_DESC);
          oprot.writeString(struct.platform);
          oprot.writeFieldEnd();
        }
      }
      if (struct.osType != null) {
        if (struct.isSetOsType()) {
          oprot.writeFieldBegin(OS_TYPE_FIELD_DESC);
          oprot.writeString(struct.osType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.osVersion != null) {
        if (struct.isSetOsVersion()) {
          oprot.writeFieldBegin(OS_VERSION_FIELD_DESC);
          oprot.writeString(struct.osVersion);
          oprot.writeFieldEnd();
        }
      }
      if (struct.device != null) {
        if (struct.isSetDevice()) {
          oprot.writeFieldBegin(DEVICE_FIELD_DESC);
          oprot.writeString(struct.device);
          oprot.writeFieldEnd();
        }
      }
      if (struct.country != null) {
        if (struct.isSetCountry()) {
          oprot.writeFieldBegin(COUNTRY_FIELD_DESC);
          oprot.writeString(struct.country);
          oprot.writeFieldEnd();
        }
      }
      if (struct.language != null) {
        if (struct.isSetLanguage()) {
          oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
          oprot.writeString(struct.language);
          oprot.writeFieldEnd();
        }
      }
      if (struct.description != null) {
        if (struct.isSetDescription()) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
      }
      if (struct.size != null) {
        if (struct.isSetSize()) {
          oprot.writeFieldBegin(SIZE_FIELD_DESC);
          oprot.writeString(struct.size);
          oprot.writeFieldEnd();
        }
      }
      if (struct.price != null) {
        if (struct.isSetPrice()) {
          oprot.writeFieldBegin(PRICE_FIELD_DESC);
          oprot.writeString(struct.price);
          oprot.writeFieldEnd();
        }
      }
      if (struct.url != null) {
        oprot.writeFieldBegin(URL_FIELD_DESC);
        oprot.writeString(struct.url);
        oprot.writeFieldEnd();
      }
      if (struct.downloadUrl != null) {
        oprot.writeFieldBegin(DOWNLOAD_URL_FIELD_DESC);
        oprot.writeString(struct.downloadUrl);
        oprot.writeFieldEnd();
      }
      if (struct.snapshotUrlList != null) {
        if (struct.isSetSnapshotUrlList()) {
          oprot.writeFieldBegin(SNAPSHOT_URL_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.snapshotUrlList.size()));
            for (String _iter18 : struct.snapshotUrlList)
            {
              oprot.writeString(_iter18);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.logoUrl != null) {
        if (struct.isSetLogoUrl()) {
          oprot.writeFieldBegin(LOGO_URL_FIELD_DESC);
          oprot.writeString(struct.logoUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.developerName != null) {
        if (struct.isSetDeveloperName()) {
          oprot.writeFieldBegin(DEVELOPER_NAME_FIELD_DESC);
          oprot.writeString(struct.developerName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.developerWebsite != null) {
        if (struct.isSetDeveloperWebsite()) {
          oprot.writeFieldBegin(DEVELOPER_WEBSITE_FIELD_DESC);
          oprot.writeString(struct.developerWebsite);
          oprot.writeFieldEnd();
        }
      }
      if (struct.developerEmail != null) {
        if (struct.isSetDeveloperEmail()) {
          oprot.writeFieldBegin(DEVELOPER_EMAIL_FIELD_DESC);
          oprot.writeString(struct.developerEmail);
          oprot.writeFieldEnd();
        }
      }
      if (struct.privacyPolicy != null) {
        if (struct.isSetPrivacyPolicy()) {
          oprot.writeFieldBegin(PRIVACY_POLICY_FIELD_DESC);
          oprot.writeString(struct.privacyPolicy);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDownloadFloor()) {
        oprot.writeFieldBegin(DOWNLOAD_FLOOR_FIELD_DESC);
        oprot.writeI64(struct.downloadFloor);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDownloadCeiling()) {
        oprot.writeFieldBegin(DOWNLOAD_CEILING_FIELD_DESC);
        oprot.writeI64(struct.downloadCeiling);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRating()) {
        oprot.writeFieldBegin(RATING_FIELD_DESC);
        oprot.writeDouble(struct.rating);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRatingCount()) {
        oprot.writeFieldBegin(RATING_COUNT_FIELD_DESC);
        oprot.writeI64(struct.ratingCount);
        oprot.writeFieldEnd();
      }
      if (struct.review != null) {
        if (struct.isSetReview()) {
          oprot.writeFieldBegin(REVIEW_FIELD_DESC);
          oprot.writeString(struct.review);
          oprot.writeFieldEnd();
        }
      }
      if (struct.contentRating != null) {
        if (struct.isSetContentRating()) {
          oprot.writeFieldBegin(CONTENT_RATING_FIELD_DESC);
          oprot.writeString(struct.contentRating);
          oprot.writeFieldEnd();
        }
      }
      if (struct.appAdvertiserList != null) {
        if (struct.isSetAppAdvertiserList()) {
          oprot.writeFieldBegin(APP_ADVERTISER_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.appAdvertiserList.size()));
            for (AppAdvertiser _iter19 : struct.appAdvertiserList)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.appAntivirusList != null) {
        if (struct.isSetAppAntivirusList()) {
          oprot.writeFieldBegin(APP_ANTIVIRUS_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.appAntivirusList.size()));
            for (AppAntivirus _iter20 : struct.appAntivirusList)
            {
              _iter20.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.appCommentList != null) {
        if (struct.isSetAppCommentList()) {
          oprot.writeFieldBegin(APP_COMMENT_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.appCommentList.size()));
            for (AppComment _iter21 : struct.appCommentList)
            {
              _iter21.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.appExternalLinkList != null) {
        if (struct.isSetAppExternalLinkList()) {
          oprot.writeFieldBegin(APP_EXTERNAL_LINK_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.appExternalLinkList.size()));
            for (AppExternalLink _iter22 : struct.appExternalLinkList)
            {
              _iter22.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.appPermissionList != null) {
        if (struct.isSetAppPermissionList()) {
          oprot.writeFieldBegin(APP_PERMISSION_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.appPermissionList.size()));
            for (AppPermission _iter23 : struct.appPermissionList)
            {
              _iter23.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.appChecksum != null) {
        oprot.writeFieldBegin(APP_CHECKSUM_FIELD_DESC);
        oprot.writeString(struct.appChecksum);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AppWebTupleSchemeFactory implements SchemeFactory {
    public AppWebTupleScheme getScheme() {
      return new AppWebTupleScheme();
    }
  }

  private static class AppWebTupleScheme extends TupleScheme<AppWeb> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AppWeb struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.appType.getValue());
      oprot.writeI32(struct.originType.getValue());
      oprot.writeString(struct.storeName);
      oprot.writeString(struct.category);
      oprot.writeString(struct.appName);
      oprot.writeString(struct.appVersion);
      oprot.writeI64(struct.updatedTime);
      oprot.writeI64(struct.collectedTime);
      oprot.writeString(struct.url);
      oprot.writeString(struct.downloadUrl);
      oprot.writeString(struct.appChecksum);
      BitSet optionals = new BitSet();
      if (struct.isSetStoreDisplayName()) {
        optionals.set(0);
      }
      if (struct.isSetStoreUrl()) {
        optionals.set(1);
      }
      if (struct.isSetStoreType()) {
        optionals.set(2);
      }
      if (struct.isSetInnerId()) {
        optionals.set(3);
      }
      if (struct.isSetUpdateHistory()) {
        optionals.set(4);
      }
      if (struct.isSetPlatform()) {
        optionals.set(5);
      }
      if (struct.isSetOsType()) {
        optionals.set(6);
      }
      if (struct.isSetOsVersion()) {
        optionals.set(7);
      }
      if (struct.isSetDevice()) {
        optionals.set(8);
      }
      if (struct.isSetCountry()) {
        optionals.set(9);
      }
      if (struct.isSetLanguage()) {
        optionals.set(10);
      }
      if (struct.isSetDescription()) {
        optionals.set(11);
      }
      if (struct.isSetSize()) {
        optionals.set(12);
      }
      if (struct.isSetPrice()) {
        optionals.set(13);
      }
      if (struct.isSetSnapshotUrlList()) {
        optionals.set(14);
      }
      if (struct.isSetLogoUrl()) {
        optionals.set(15);
      }
      if (struct.isSetDeveloperName()) {
        optionals.set(16);
      }
      if (struct.isSetDeveloperWebsite()) {
        optionals.set(17);
      }
      if (struct.isSetDeveloperEmail()) {
        optionals.set(18);
      }
      if (struct.isSetPrivacyPolicy()) {
        optionals.set(19);
      }
      if (struct.isSetDownloadFloor()) {
        optionals.set(20);
      }
      if (struct.isSetDownloadCeiling()) {
        optionals.set(21);
      }
      if (struct.isSetRating()) {
        optionals.set(22);
      }
      if (struct.isSetRatingCount()) {
        optionals.set(23);
      }
      if (struct.isSetReview()) {
        optionals.set(24);
      }
      if (struct.isSetContentRating()) {
        optionals.set(25);
      }
      if (struct.isSetAppAdvertiserList()) {
        optionals.set(26);
      }
      if (struct.isSetAppAntivirusList()) {
        optionals.set(27);
      }
      if (struct.isSetAppCommentList()) {
        optionals.set(28);
      }
      if (struct.isSetAppExternalLinkList()) {
        optionals.set(29);
      }
      if (struct.isSetAppPermissionList()) {
        optionals.set(30);
      }
      oprot.writeBitSet(optionals, 31);
      if (struct.isSetStoreDisplayName()) {
        oprot.writeString(struct.storeDisplayName);
      }
      if (struct.isSetStoreUrl()) {
        oprot.writeString(struct.storeUrl);
      }
      if (struct.isSetStoreType()) {
        oprot.writeI32(struct.storeType);
      }
      if (struct.isSetInnerId()) {
        oprot.writeString(struct.innerId);
      }
      if (struct.isSetUpdateHistory()) {
        oprot.writeString(struct.updateHistory);
      }
      if (struct.isSetPlatform()) {
        oprot.writeString(struct.platform);
      }
      if (struct.isSetOsType()) {
        oprot.writeString(struct.osType);
      }
      if (struct.isSetOsVersion()) {
        oprot.writeString(struct.osVersion);
      }
      if (struct.isSetDevice()) {
        oprot.writeString(struct.device);
      }
      if (struct.isSetCountry()) {
        oprot.writeString(struct.country);
      }
      if (struct.isSetLanguage()) {
        oprot.writeString(struct.language);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetSize()) {
        oprot.writeString(struct.size);
      }
      if (struct.isSetPrice()) {
        oprot.writeString(struct.price);
      }
      if (struct.isSetSnapshotUrlList()) {
        {
          oprot.writeI32(struct.snapshotUrlList.size());
          for (String _iter24 : struct.snapshotUrlList)
          {
            oprot.writeString(_iter24);
          }
        }
      }
      if (struct.isSetLogoUrl()) {
        oprot.writeString(struct.logoUrl);
      }
      if (struct.isSetDeveloperName()) {
        oprot.writeString(struct.developerName);
      }
      if (struct.isSetDeveloperWebsite()) {
        oprot.writeString(struct.developerWebsite);
      }
      if (struct.isSetDeveloperEmail()) {
        oprot.writeString(struct.developerEmail);
      }
      if (struct.isSetPrivacyPolicy()) {
        oprot.writeString(struct.privacyPolicy);
      }
      if (struct.isSetDownloadFloor()) {
        oprot.writeI64(struct.downloadFloor);
      }
      if (struct.isSetDownloadCeiling()) {
        oprot.writeI64(struct.downloadCeiling);
      }
      if (struct.isSetRating()) {
        oprot.writeDouble(struct.rating);
      }
      if (struct.isSetRatingCount()) {
        oprot.writeI64(struct.ratingCount);
      }
      if (struct.isSetReview()) {
        oprot.writeString(struct.review);
      }
      if (struct.isSetContentRating()) {
        oprot.writeString(struct.contentRating);
      }
      if (struct.isSetAppAdvertiserList()) {
        {
          oprot.writeI32(struct.appAdvertiserList.size());
          for (AppAdvertiser _iter25 : struct.appAdvertiserList)
          {
            _iter25.write(oprot);
          }
        }
      }
      if (struct.isSetAppAntivirusList()) {
        {
          oprot.writeI32(struct.appAntivirusList.size());
          for (AppAntivirus _iter26 : struct.appAntivirusList)
          {
            _iter26.write(oprot);
          }
        }
      }
      if (struct.isSetAppCommentList()) {
        {
          oprot.writeI32(struct.appCommentList.size());
          for (AppComment _iter27 : struct.appCommentList)
          {
            _iter27.write(oprot);
          }
        }
      }
      if (struct.isSetAppExternalLinkList()) {
        {
          oprot.writeI32(struct.appExternalLinkList.size());
          for (AppExternalLink _iter28 : struct.appExternalLinkList)
          {
            _iter28.write(oprot);
          }
        }
      }
      if (struct.isSetAppPermissionList()) {
        {
          oprot.writeI32(struct.appPermissionList.size());
          for (AppPermission _iter29 : struct.appPermissionList)
          {
            _iter29.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AppWeb struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.appType = AppType.findByValue(iprot.readI32());
      struct.setAppTypeIsSet(true);
      struct.originType = OriginType.findByValue(iprot.readI32());
      struct.setOriginTypeIsSet(true);
      struct.storeName = iprot.readString();
      struct.setStoreNameIsSet(true);
      struct.category = iprot.readString();
      struct.setCategoryIsSet(true);
      struct.appName = iprot.readString();
      struct.setAppNameIsSet(true);
      struct.appVersion = iprot.readString();
      struct.setAppVersionIsSet(true);
      struct.updatedTime = iprot.readI64();
      struct.setUpdatedTimeIsSet(true);
      struct.collectedTime = iprot.readI64();
      struct.setCollectedTimeIsSet(true);
      struct.url = iprot.readString();
      struct.setUrlIsSet(true);
      struct.downloadUrl = iprot.readString();
      struct.setDownloadUrlIsSet(true);
      struct.appChecksum = iprot.readString();
      struct.setAppChecksumIsSet(true);
      BitSet incoming = iprot.readBitSet(31);
      if (incoming.get(0)) {
        struct.storeDisplayName = iprot.readString();
        struct.setStoreDisplayNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.storeUrl = iprot.readString();
        struct.setStoreUrlIsSet(true);
      }
      if (incoming.get(2)) {
        struct.storeType = iprot.readI32();
        struct.setStoreTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.innerId = iprot.readString();
        struct.setInnerIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.updateHistory = iprot.readString();
        struct.setUpdateHistoryIsSet(true);
      }
      if (incoming.get(5)) {
        struct.platform = iprot.readString();
        struct.setPlatformIsSet(true);
      }
      if (incoming.get(6)) {
        struct.osType = iprot.readString();
        struct.setOsTypeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.osVersion = iprot.readString();
        struct.setOsVersionIsSet(true);
      }
      if (incoming.get(8)) {
        struct.device = iprot.readString();
        struct.setDeviceIsSet(true);
      }
      if (incoming.get(9)) {
        struct.country = iprot.readString();
        struct.setCountryIsSet(true);
      }
      if (incoming.get(10)) {
        struct.language = iprot.readString();
        struct.setLanguageIsSet(true);
      }
      if (incoming.get(11)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(12)) {
        struct.size = iprot.readString();
        struct.setSizeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.price = iprot.readString();
        struct.setPriceIsSet(true);
      }
      if (incoming.get(14)) {
        {
          org.apache.thrift.protocol.TList _list30 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.snapshotUrlList = new ArrayList<String>(_list30.size);
          for (int _i31 = 0; _i31 < _list30.size; ++_i31)
          {
            String _elem32; // required
            _elem32 = iprot.readString();
            struct.snapshotUrlList.add(_elem32);
          }
        }
        struct.setSnapshotUrlListIsSet(true);
      }
      if (incoming.get(15)) {
        struct.logoUrl = iprot.readString();
        struct.setLogoUrlIsSet(true);
      }
      if (incoming.get(16)) {
        struct.developerName = iprot.readString();
        struct.setDeveloperNameIsSet(true);
      }
      if (incoming.get(17)) {
        struct.developerWebsite = iprot.readString();
        struct.setDeveloperWebsiteIsSet(true);
      }
      if (incoming.get(18)) {
        struct.developerEmail = iprot.readString();
        struct.setDeveloperEmailIsSet(true);
      }
      if (incoming.get(19)) {
        struct.privacyPolicy = iprot.readString();
        struct.setPrivacyPolicyIsSet(true);
      }
      if (incoming.get(20)) {
        struct.downloadFloor = iprot.readI64();
        struct.setDownloadFloorIsSet(true);
      }
      if (incoming.get(21)) {
        struct.downloadCeiling = iprot.readI64();
        struct.setDownloadCeilingIsSet(true);
      }
      if (incoming.get(22)) {
        struct.rating = iprot.readDouble();
        struct.setRatingIsSet(true);
      }
      if (incoming.get(23)) {
        struct.ratingCount = iprot.readI64();
        struct.setRatingCountIsSet(true);
      }
      if (incoming.get(24)) {
        struct.review = iprot.readString();
        struct.setReviewIsSet(true);
      }
      if (incoming.get(25)) {
        struct.contentRating = iprot.readString();
        struct.setContentRatingIsSet(true);
      }
      if (incoming.get(26)) {
        {
          org.apache.thrift.protocol.TList _list33 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.appAdvertiserList = new ArrayList<AppAdvertiser>(_list33.size);
          for (int _i34 = 0; _i34 < _list33.size; ++_i34)
          {
            AppAdvertiser _elem35; // required
            _elem35 = new AppAdvertiser();
            _elem35.read(iprot);
            struct.appAdvertiserList.add(_elem35);
          }
        }
        struct.setAppAdvertiserListIsSet(true);
      }
      if (incoming.get(27)) {
        {
          org.apache.thrift.protocol.TList _list36 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.appAntivirusList = new ArrayList<AppAntivirus>(_list36.size);
          for (int _i37 = 0; _i37 < _list36.size; ++_i37)
          {
            AppAntivirus _elem38; // required
            _elem38 = new AppAntivirus();
            _elem38.read(iprot);
            struct.appAntivirusList.add(_elem38);
          }
        }
        struct.setAppAntivirusListIsSet(true);
      }
      if (incoming.get(28)) {
        {
          org.apache.thrift.protocol.TList _list39 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.appCommentList = new ArrayList<AppComment>(_list39.size);
          for (int _i40 = 0; _i40 < _list39.size; ++_i40)
          {
            AppComment _elem41; // required
            _elem41 = new AppComment();
            _elem41.read(iprot);
            struct.appCommentList.add(_elem41);
          }
        }
        struct.setAppCommentListIsSet(true);
      }
      if (incoming.get(29)) {
        {
          org.apache.thrift.protocol.TList _list42 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.appExternalLinkList = new ArrayList<AppExternalLink>(_list42.size);
          for (int _i43 = 0; _i43 < _list42.size; ++_i43)
          {
            AppExternalLink _elem44; // required
            _elem44 = new AppExternalLink();
            _elem44.read(iprot);
            struct.appExternalLinkList.add(_elem44);
          }
        }
        struct.setAppExternalLinkListIsSet(true);
      }
      if (incoming.get(30)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.appPermissionList = new ArrayList<AppPermission>(_list45.size);
          for (int _i46 = 0; _i46 < _list45.size; ++_i46)
          {
            AppPermission _elem47; // required
            _elem47 = new AppPermission();
            _elem47.read(iprot);
            struct.appPermissionList.add(_elem47);
          }
        }
        struct.setAppPermissionListIsSet(true);
      }
    }
  }

}

