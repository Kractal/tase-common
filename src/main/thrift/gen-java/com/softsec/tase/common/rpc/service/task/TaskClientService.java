/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.softsec.tase.common.rpc.service.task;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TaskClientService {

  /**
   * Task Client Service response for RPCs from clients
   */
  public interface Iface {

    /**
     * check network connectivity manually
     */
    public String ping() throws com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException;

    /**
     * job submission
     * @param	userId
     * @param	appType
     * @param	jobLifecycle
     * @param	jobPhaseList
     * @param	jobDistributionMode
     * @param	priority
     * @param	jobOperationRequirementList
     * @param	jobResourceRequirementList
     * @param	parameterList
     * @param	impatienceTime
     * @return	jobId
     * 
     * @param userId
     * @param appType
     * @param jobLifecycle
     * @param jobPhaseList
     * @param jobDistributionMode
     * @param jobPriority
     * @param jobOperationRequirementList
     * @param jobResourceRequirementList
     * @param parameterList
     * @param impatienceTime
     */
    public long submitJob(int userId, com.softsec.tase.common.rpc.domain.app.AppType appType, com.softsec.tase.common.rpc.domain.job.JobLifecycle jobLifecycle, List<com.softsec.tase.common.rpc.domain.job.JobPhase> jobPhaseList, com.softsec.tase.common.rpc.domain.job.JobDistributionMode jobDistributionMode, com.softsec.tase.common.rpc.domain.job.JobPriority jobPriority, List<com.softsec.tase.common.rpc.domain.job.JobOperationRequirement> jobOperationRequirementList, List<com.softsec.tase.common.rpc.domain.job.JobResourceRequirement> jobResourceRequirementList, List<com.softsec.tase.common.rpc.domain.job.JobParameter> parameterList, long impatienceTime) throws com.softsec.tase.common.rpc.exception.InvalidRequestException, com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException;

    /**
     * job termination
     * @param	jobIdList
     * @return	succeed or not
     * 
     * @param jobIdList
     */
    public int terminateJobs(List<Long> jobIdList) throws com.softsec.tase.common.rpc.exception.InvalidRequestException, com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.NotFoundException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException;

    /**
     * obtaining queue information
     * @return queue information in json
     */
    public String obtainQueueInfo() throws com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException;

    /**
     * obtaining cluster statistics
     * @param
     * @return cluster statistic in json
     */
    public String obtainClusterStat() throws com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void ping(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.ping_call> resultHandler) throws org.apache.thrift.TException;

    public void submitJob(int userId, com.softsec.tase.common.rpc.domain.app.AppType appType, com.softsec.tase.common.rpc.domain.job.JobLifecycle jobLifecycle, List<com.softsec.tase.common.rpc.domain.job.JobPhase> jobPhaseList, com.softsec.tase.common.rpc.domain.job.JobDistributionMode jobDistributionMode, com.softsec.tase.common.rpc.domain.job.JobPriority jobPriority, List<com.softsec.tase.common.rpc.domain.job.JobOperationRequirement> jobOperationRequirementList, List<com.softsec.tase.common.rpc.domain.job.JobResourceRequirement> jobResourceRequirementList, List<com.softsec.tase.common.rpc.domain.job.JobParameter> parameterList, long impatienceTime, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.submitJob_call> resultHandler) throws org.apache.thrift.TException;

    public void terminateJobs(List<Long> jobIdList, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.terminateJobs_call> resultHandler) throws org.apache.thrift.TException;

    public void obtainQueueInfo(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.obtainQueueInfo_call> resultHandler) throws org.apache.thrift.TException;

    public void obtainClusterStat(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.obtainClusterStat_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String ping() throws com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException
    {
      send_ping();
      return recv_ping();
    }

    public void send_ping() throws org.apache.thrift.TException
    {
      ping_args args = new ping_args();
      sendBase("ping", args);
    }

    public String recv_ping() throws com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException
    {
      ping_result result = new ping_result();
      receiveBase(result, "ping");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      if (result.te != null) {
        throw result.te;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ping failed: unknown result");
    }

    public long submitJob(int userId, com.softsec.tase.common.rpc.domain.app.AppType appType, com.softsec.tase.common.rpc.domain.job.JobLifecycle jobLifecycle, List<com.softsec.tase.common.rpc.domain.job.JobPhase> jobPhaseList, com.softsec.tase.common.rpc.domain.job.JobDistributionMode jobDistributionMode, com.softsec.tase.common.rpc.domain.job.JobPriority jobPriority, List<com.softsec.tase.common.rpc.domain.job.JobOperationRequirement> jobOperationRequirementList, List<com.softsec.tase.common.rpc.domain.job.JobResourceRequirement> jobResourceRequirementList, List<com.softsec.tase.common.rpc.domain.job.JobParameter> parameterList, long impatienceTime) throws com.softsec.tase.common.rpc.exception.InvalidRequestException, com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException
    {
      send_submitJob(userId, appType, jobLifecycle, jobPhaseList, jobDistributionMode, jobPriority, jobOperationRequirementList, jobResourceRequirementList, parameterList, impatienceTime);
      return recv_submitJob();
    }

    public void send_submitJob(int userId, com.softsec.tase.common.rpc.domain.app.AppType appType, com.softsec.tase.common.rpc.domain.job.JobLifecycle jobLifecycle, List<com.softsec.tase.common.rpc.domain.job.JobPhase> jobPhaseList, com.softsec.tase.common.rpc.domain.job.JobDistributionMode jobDistributionMode, com.softsec.tase.common.rpc.domain.job.JobPriority jobPriority, List<com.softsec.tase.common.rpc.domain.job.JobOperationRequirement> jobOperationRequirementList, List<com.softsec.tase.common.rpc.domain.job.JobResourceRequirement> jobResourceRequirementList, List<com.softsec.tase.common.rpc.domain.job.JobParameter> parameterList, long impatienceTime) throws org.apache.thrift.TException
    {
      submitJob_args args = new submitJob_args();
      args.setUserId(userId);
      args.setAppType(appType);
      args.setJobLifecycle(jobLifecycle);
      args.setJobPhaseList(jobPhaseList);
      args.setJobDistributionMode(jobDistributionMode);
      args.setJobPriority(jobPriority);
      args.setJobOperationRequirementList(jobOperationRequirementList);
      args.setJobResourceRequirementList(jobResourceRequirementList);
      args.setParameterList(parameterList);
      args.setImpatienceTime(impatienceTime);
      sendBase("submitJob", args);
    }

    public long recv_submitJob() throws com.softsec.tase.common.rpc.exception.InvalidRequestException, com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException
    {
      submitJob_result result = new submitJob_result();
      receiveBase(result, "submitJob");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      if (result.te != null) {
        throw result.te;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "submitJob failed: unknown result");
    }

    public int terminateJobs(List<Long> jobIdList) throws com.softsec.tase.common.rpc.exception.InvalidRequestException, com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.NotFoundException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException
    {
      send_terminateJobs(jobIdList);
      return recv_terminateJobs();
    }

    public void send_terminateJobs(List<Long> jobIdList) throws org.apache.thrift.TException
    {
      terminateJobs_args args = new terminateJobs_args();
      args.setJobIdList(jobIdList);
      sendBase("terminateJobs", args);
    }

    public int recv_terminateJobs() throws com.softsec.tase.common.rpc.exception.InvalidRequestException, com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.NotFoundException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException
    {
      terminateJobs_result result = new terminateJobs_result();
      receiveBase(result, "terminateJobs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      if (result.nfe != null) {
        throw result.nfe;
      }
      if (result.te != null) {
        throw result.te;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "terminateJobs failed: unknown result");
    }

    public String obtainQueueInfo() throws com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException
    {
      send_obtainQueueInfo();
      return recv_obtainQueueInfo();
    }

    public void send_obtainQueueInfo() throws org.apache.thrift.TException
    {
      obtainQueueInfo_args args = new obtainQueueInfo_args();
      sendBase("obtainQueueInfo", args);
    }

    public String recv_obtainQueueInfo() throws com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException
    {
      obtainQueueInfo_result result = new obtainQueueInfo_result();
      receiveBase(result, "obtainQueueInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      if (result.te != null) {
        throw result.te;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "obtainQueueInfo failed: unknown result");
    }

    public String obtainClusterStat() throws com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException
    {
      send_obtainClusterStat();
      return recv_obtainClusterStat();
    }

    public void send_obtainClusterStat() throws org.apache.thrift.TException
    {
      obtainClusterStat_args args = new obtainClusterStat_args();
      sendBase("obtainClusterStat", args);
    }

    public String recv_obtainClusterStat() throws com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException
    {
      obtainClusterStat_result result = new obtainClusterStat_result();
      receiveBase(result, "obtainClusterStat");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      if (result.te != null) {
        throw result.te;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "obtainClusterStat failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void ping(org.apache.thrift.async.AsyncMethodCallback<ping_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ping_call method_call = new ping_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ping_call extends org.apache.thrift.async.TAsyncMethodCall {
      public ping_call(org.apache.thrift.async.AsyncMethodCallback<ping_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ping_args args = new ping_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ping();
      }
    }

    public void submitJob(int userId, com.softsec.tase.common.rpc.domain.app.AppType appType, com.softsec.tase.common.rpc.domain.job.JobLifecycle jobLifecycle, List<com.softsec.tase.common.rpc.domain.job.JobPhase> jobPhaseList, com.softsec.tase.common.rpc.domain.job.JobDistributionMode jobDistributionMode, com.softsec.tase.common.rpc.domain.job.JobPriority jobPriority, List<com.softsec.tase.common.rpc.domain.job.JobOperationRequirement> jobOperationRequirementList, List<com.softsec.tase.common.rpc.domain.job.JobResourceRequirement> jobResourceRequirementList, List<com.softsec.tase.common.rpc.domain.job.JobParameter> parameterList, long impatienceTime, org.apache.thrift.async.AsyncMethodCallback<submitJob_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      submitJob_call method_call = new submitJob_call(userId, appType, jobLifecycle, jobPhaseList, jobDistributionMode, jobPriority, jobOperationRequirementList, jobResourceRequirementList, parameterList, impatienceTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class submitJob_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      private com.softsec.tase.common.rpc.domain.app.AppType appType;
      private com.softsec.tase.common.rpc.domain.job.JobLifecycle jobLifecycle;
      private List<com.softsec.tase.common.rpc.domain.job.JobPhase> jobPhaseList;
      private com.softsec.tase.common.rpc.domain.job.JobDistributionMode jobDistributionMode;
      private com.softsec.tase.common.rpc.domain.job.JobPriority jobPriority;
      private List<com.softsec.tase.common.rpc.domain.job.JobOperationRequirement> jobOperationRequirementList;
      private List<com.softsec.tase.common.rpc.domain.job.JobResourceRequirement> jobResourceRequirementList;
      private List<com.softsec.tase.common.rpc.domain.job.JobParameter> parameterList;
      private long impatienceTime;
      public submitJob_call(int userId, com.softsec.tase.common.rpc.domain.app.AppType appType, com.softsec.tase.common.rpc.domain.job.JobLifecycle jobLifecycle, List<com.softsec.tase.common.rpc.domain.job.JobPhase> jobPhaseList, com.softsec.tase.common.rpc.domain.job.JobDistributionMode jobDistributionMode, com.softsec.tase.common.rpc.domain.job.JobPriority jobPriority, List<com.softsec.tase.common.rpc.domain.job.JobOperationRequirement> jobOperationRequirementList, List<com.softsec.tase.common.rpc.domain.job.JobResourceRequirement> jobResourceRequirementList, List<com.softsec.tase.common.rpc.domain.job.JobParameter> parameterList, long impatienceTime, org.apache.thrift.async.AsyncMethodCallback<submitJob_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.appType = appType;
        this.jobLifecycle = jobLifecycle;
        this.jobPhaseList = jobPhaseList;
        this.jobDistributionMode = jobDistributionMode;
        this.jobPriority = jobPriority;
        this.jobOperationRequirementList = jobOperationRequirementList;
        this.jobResourceRequirementList = jobResourceRequirementList;
        this.parameterList = parameterList;
        this.impatienceTime = impatienceTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("submitJob", org.apache.thrift.protocol.TMessageType.CALL, 0));
        submitJob_args args = new submitJob_args();
        args.setUserId(userId);
        args.setAppType(appType);
        args.setJobLifecycle(jobLifecycle);
        args.setJobPhaseList(jobPhaseList);
        args.setJobDistributionMode(jobDistributionMode);
        args.setJobPriority(jobPriority);
        args.setJobOperationRequirementList(jobOperationRequirementList);
        args.setJobResourceRequirementList(jobResourceRequirementList);
        args.setParameterList(parameterList);
        args.setImpatienceTime(impatienceTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws com.softsec.tase.common.rpc.exception.InvalidRequestException, com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_submitJob();
      }
    }

    public void terminateJobs(List<Long> jobIdList, org.apache.thrift.async.AsyncMethodCallback<terminateJobs_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      terminateJobs_call method_call = new terminateJobs_call(jobIdList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class terminateJobs_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Long> jobIdList;
      public terminateJobs_call(List<Long> jobIdList, org.apache.thrift.async.AsyncMethodCallback<terminateJobs_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.jobIdList = jobIdList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("terminateJobs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        terminateJobs_args args = new terminateJobs_args();
        args.setJobIdList(jobIdList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.softsec.tase.common.rpc.exception.InvalidRequestException, com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.NotFoundException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_terminateJobs();
      }
    }

    public void obtainQueueInfo(org.apache.thrift.async.AsyncMethodCallback<obtainQueueInfo_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      obtainQueueInfo_call method_call = new obtainQueueInfo_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class obtainQueueInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      public obtainQueueInfo_call(org.apache.thrift.async.AsyncMethodCallback<obtainQueueInfo_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("obtainQueueInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        obtainQueueInfo_args args = new obtainQueueInfo_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_obtainQueueInfo();
      }
    }

    public void obtainClusterStat(org.apache.thrift.async.AsyncMethodCallback<obtainClusterStat_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      obtainClusterStat_call method_call = new obtainClusterStat_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class obtainClusterStat_call extends org.apache.thrift.async.TAsyncMethodCall {
      public obtainClusterStat_call(org.apache.thrift.async.AsyncMethodCallback<obtainClusterStat_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("obtainClusterStat", org.apache.thrift.protocol.TMessageType.CALL, 0));
        obtainClusterStat_args args = new obtainClusterStat_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_obtainClusterStat();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("submitJob", new submitJob());
      processMap.put("terminateJobs", new terminateJobs());
      processMap.put("obtainQueueInfo", new obtainQueueInfo());
      processMap.put("obtainClusterStat", new obtainClusterStat());
      return processMap;
    }

    public static class ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ping_args> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ping_result getResult(I iface, ping_args args) throws org.apache.thrift.TException {
        ping_result result = new ping_result();
        try {
          result.success = iface.ping();
        } catch (com.softsec.tase.common.rpc.exception.UnavailableException ue) {
          result.ue = ue;
        } catch (com.softsec.tase.common.rpc.exception.TimeoutException te) {
          result.te = te;
        }
        return result;
      }
    }

    public static class submitJob<I extends Iface> extends org.apache.thrift.ProcessFunction<I, submitJob_args> {
      public submitJob() {
        super("submitJob");
      }

      public submitJob_args getEmptyArgsInstance() {
        return new submitJob_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public submitJob_result getResult(I iface, submitJob_args args) throws org.apache.thrift.TException {
        submitJob_result result = new submitJob_result();
        try {
          result.success = iface.submitJob(args.userId, args.appType, args.jobLifecycle, args.jobPhaseList, args.jobDistributionMode, args.jobPriority, args.jobOperationRequirementList, args.jobResourceRequirementList, args.parameterList, args.impatienceTime);
          result.setSuccessIsSet(true);
        } catch (com.softsec.tase.common.rpc.exception.InvalidRequestException ire) {
          result.ire = ire;
        } catch (com.softsec.tase.common.rpc.exception.UnavailableException ue) {
          result.ue = ue;
        } catch (com.softsec.tase.common.rpc.exception.TimeoutException te) {
          result.te = te;
        }
        return result;
      }
    }

    public static class terminateJobs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, terminateJobs_args> {
      public terminateJobs() {
        super("terminateJobs");
      }

      public terminateJobs_args getEmptyArgsInstance() {
        return new terminateJobs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public terminateJobs_result getResult(I iface, terminateJobs_args args) throws org.apache.thrift.TException {
        terminateJobs_result result = new terminateJobs_result();
        try {
          result.success = iface.terminateJobs(args.jobIdList);
          result.setSuccessIsSet(true);
        } catch (com.softsec.tase.common.rpc.exception.InvalidRequestException ire) {
          result.ire = ire;
        } catch (com.softsec.tase.common.rpc.exception.UnavailableException ue) {
          result.ue = ue;
        } catch (com.softsec.tase.common.rpc.exception.NotFoundException nfe) {
          result.nfe = nfe;
        } catch (com.softsec.tase.common.rpc.exception.TimeoutException te) {
          result.te = te;
        }
        return result;
      }
    }

    public static class obtainQueueInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, obtainQueueInfo_args> {
      public obtainQueueInfo() {
        super("obtainQueueInfo");
      }

      public obtainQueueInfo_args getEmptyArgsInstance() {
        return new obtainQueueInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public obtainQueueInfo_result getResult(I iface, obtainQueueInfo_args args) throws org.apache.thrift.TException {
        obtainQueueInfo_result result = new obtainQueueInfo_result();
        try {
          result.success = iface.obtainQueueInfo();
        } catch (com.softsec.tase.common.rpc.exception.UnavailableException ue) {
          result.ue = ue;
        } catch (com.softsec.tase.common.rpc.exception.TimeoutException te) {
          result.te = te;
        }
        return result;
      }
    }

    public static class obtainClusterStat<I extends Iface> extends org.apache.thrift.ProcessFunction<I, obtainClusterStat_args> {
      public obtainClusterStat() {
        super("obtainClusterStat");
      }

      public obtainClusterStat_args getEmptyArgsInstance() {
        return new obtainClusterStat_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public obtainClusterStat_result getResult(I iface, obtainClusterStat_args args) throws org.apache.thrift.TException {
        obtainClusterStat_result result = new obtainClusterStat_result();
        try {
          result.success = iface.obtainClusterStat();
        } catch (com.softsec.tase.common.rpc.exception.UnavailableException ue) {
          result.ue = ue;
        } catch (com.softsec.tase.common.rpc.exception.TimeoutException te) {
          result.te = te;
        }
        return result;
      }
    }

  }

  public static class ping_args implements org.apache.thrift.TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
    }

    public ping_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_args(ping_args other) {
    }

    public ping_args deepCopy() {
      return new ping_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_args)
        return this.equals((ping_args)that);
      return false;
    }

    public boolean equals(ping_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      ping_args typedOther = (ping_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_argsStandardSchemeFactory implements SchemeFactory {
      public ping_argsStandardScheme getScheme() {
        return new ping_argsStandardScheme();
      }
    }

    private static class ping_argsStandardScheme extends StandardScheme<ping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_argsTupleSchemeFactory implements SchemeFactory {
      public ping_argsTupleScheme getScheme() {
        return new ping_argsTupleScheme();
      }
    }

    private static class ping_argsTupleScheme extends TupleScheme<ping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class ping_result implements org.apache.thrift.TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TE_FIELD_DESC = new org.apache.thrift.protocol.TField("te", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_resultTupleSchemeFactory());
    }

    public String success; // required
    public com.softsec.tase.common.rpc.exception.UnavailableException ue; // required
    public com.softsec.tase.common.rpc.exception.TimeoutException te; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      UE((short)1, "ue"),
      TE((short)2, "te");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // UE
            return UE;
          case 2: // TE
            return TE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TE, new org.apache.thrift.meta_data.FieldMetaData("te", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
    }

    public ping_result() {
    }

    public ping_result(
      String success,
      com.softsec.tase.common.rpc.exception.UnavailableException ue,
      com.softsec.tase.common.rpc.exception.TimeoutException te)
    {
      this();
      this.success = success;
      this.ue = ue;
      this.te = te;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_result(ping_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetUe()) {
        this.ue = new com.softsec.tase.common.rpc.exception.UnavailableException(other.ue);
      }
      if (other.isSetTe()) {
        this.te = new com.softsec.tase.common.rpc.exception.TimeoutException(other.te);
      }
    }

    public ping_result deepCopy() {
      return new ping_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ue = null;
      this.te = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public ping_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.softsec.tase.common.rpc.exception.UnavailableException getUe() {
      return this.ue;
    }

    public ping_result setUe(com.softsec.tase.common.rpc.exception.UnavailableException ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public com.softsec.tase.common.rpc.exception.TimeoutException getTe() {
      return this.te;
    }

    public ping_result setTe(com.softsec.tase.common.rpc.exception.TimeoutException te) {
      this.te = te;
      return this;
    }

    public void unsetTe() {
      this.te = null;
    }

    /** Returns true if field te is set (has been assigned a value) and false otherwise */
    public boolean isSetTe() {
      return this.te != null;
    }

    public void setTeIsSet(boolean value) {
      if (!value) {
        this.te = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((com.softsec.tase.common.rpc.exception.UnavailableException)value);
        }
        break;

      case TE:
        if (value == null) {
          unsetTe();
        } else {
          setTe((com.softsec.tase.common.rpc.exception.TimeoutException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case UE:
        return getUe();

      case TE:
        return getTe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case UE:
        return isSetUe();
      case TE:
        return isSetTe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_result)
        return this.equals((ping_result)that);
      return false;
    }

    public boolean equals(ping_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      boolean this_present_te = true && this.isSetTe();
      boolean that_present_te = true && that.isSetTe();
      if (this_present_te || that_present_te) {
        if (!(this_present_te && that_present_te))
          return false;
        if (!this.te.equals(that.te))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(ping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      ping_result typedOther = (ping_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUe()).compareTo(typedOther.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, typedOther.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTe()).compareTo(typedOther.isSetTe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.te, typedOther.te);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("te:");
      if (this.te == null) {
        sb.append("null");
      } else {
        sb.append(this.te);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_resultStandardSchemeFactory implements SchemeFactory {
      public ping_resultStandardScheme getScheme() {
        return new ping_resultStandardScheme();
      }
    }

    private static class ping_resultStandardScheme extends StandardScheme<ping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new com.softsec.tase.common.rpc.exception.UnavailableException();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.te = new com.softsec.tase.common.rpc.exception.TimeoutException();
                struct.te.read(iprot);
                struct.setTeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ue != null) {
          oprot.writeFieldBegin(UE_FIELD_DESC);
          struct.ue.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.te != null) {
          oprot.writeFieldBegin(TE_FIELD_DESC);
          struct.te.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_resultTupleSchemeFactory implements SchemeFactory {
      public ping_resultTupleScheme getScheme() {
        return new ping_resultTupleScheme();
      }
    }

    private static class ping_resultTupleScheme extends TupleScheme<ping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUe()) {
          optionals.set(1);
        }
        if (struct.isSetTe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetUe()) {
          struct.ue.write(oprot);
        }
        if (struct.isSetTe()) {
          struct.te.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ue = new com.softsec.tase.common.rpc.exception.UnavailableException();
          struct.ue.read(iprot);
          struct.setUeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.te = new com.softsec.tase.common.rpc.exception.TimeoutException();
          struct.te.read(iprot);
          struct.setTeIsSet(true);
        }
      }
    }

  }

  public static class submitJob_args implements org.apache.thrift.TBase<submitJob_args, submitJob_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("submitJob_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField APP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("appType", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField JOB_LIFECYCLE_FIELD_DESC = new org.apache.thrift.protocol.TField("jobLifecycle", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField JOB_PHASE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("jobPhaseList", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField JOB_DISTRIBUTION_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("jobDistributionMode", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField JOB_PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("jobPriority", org.apache.thrift.protocol.TType.I32, (short)6);
    private static final org.apache.thrift.protocol.TField JOB_OPERATION_REQUIREMENT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("jobOperationRequirementList", org.apache.thrift.protocol.TType.LIST, (short)7);
    private static final org.apache.thrift.protocol.TField JOB_RESOURCE_REQUIREMENT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("jobResourceRequirementList", org.apache.thrift.protocol.TType.LIST, (short)8);
    private static final org.apache.thrift.protocol.TField PARAMETER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("parameterList", org.apache.thrift.protocol.TType.LIST, (short)9);
    private static final org.apache.thrift.protocol.TField IMPATIENCE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("impatienceTime", org.apache.thrift.protocol.TType.I64, (short)10);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new submitJob_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new submitJob_argsTupleSchemeFactory());
    }

    public int userId; // required
    /**
     * 
     * @see com.softsec.tase.common.rpc.domain.app.AppType
     */
    public com.softsec.tase.common.rpc.domain.app.AppType appType; // required
    /**
     * 
     * @see com.softsec.tase.common.rpc.domain.job.JobLifecycle
     */
    public com.softsec.tase.common.rpc.domain.job.JobLifecycle jobLifecycle; // required
    public List<com.softsec.tase.common.rpc.domain.job.JobPhase> jobPhaseList; // required
    /**
     * 
     * @see com.softsec.tase.common.rpc.domain.job.JobDistributionMode
     */
    public com.softsec.tase.common.rpc.domain.job.JobDistributionMode jobDistributionMode; // required
    /**
     * 
     * @see com.softsec.tase.common.rpc.domain.job.JobPriority
     */
    public com.softsec.tase.common.rpc.domain.job.JobPriority jobPriority; // required
    public List<com.softsec.tase.common.rpc.domain.job.JobOperationRequirement> jobOperationRequirementList; // required
    public List<com.softsec.tase.common.rpc.domain.job.JobResourceRequirement> jobResourceRequirementList; // required
    public List<com.softsec.tase.common.rpc.domain.job.JobParameter> parameterList; // required
    public long impatienceTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      /**
       * 
       * @see com.softsec.tase.common.rpc.domain.app.AppType
       */
      APP_TYPE((short)2, "appType"),
      /**
       * 
       * @see com.softsec.tase.common.rpc.domain.job.JobLifecycle
       */
      JOB_LIFECYCLE((short)3, "jobLifecycle"),
      JOB_PHASE_LIST((short)4, "jobPhaseList"),
      /**
       * 
       * @see com.softsec.tase.common.rpc.domain.job.JobDistributionMode
       */
      JOB_DISTRIBUTION_MODE((short)5, "jobDistributionMode"),
      /**
       * 
       * @see com.softsec.tase.common.rpc.domain.job.JobPriority
       */
      JOB_PRIORITY((short)6, "jobPriority"),
      JOB_OPERATION_REQUIREMENT_LIST((short)7, "jobOperationRequirementList"),
      JOB_RESOURCE_REQUIREMENT_LIST((short)8, "jobResourceRequirementList"),
      PARAMETER_LIST((short)9, "parameterList"),
      IMPATIENCE_TIME((short)10, "impatienceTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // APP_TYPE
            return APP_TYPE;
          case 3: // JOB_LIFECYCLE
            return JOB_LIFECYCLE;
          case 4: // JOB_PHASE_LIST
            return JOB_PHASE_LIST;
          case 5: // JOB_DISTRIBUTION_MODE
            return JOB_DISTRIBUTION_MODE;
          case 6: // JOB_PRIORITY
            return JOB_PRIORITY;
          case 7: // JOB_OPERATION_REQUIREMENT_LIST
            return JOB_OPERATION_REQUIREMENT_LIST;
          case 8: // JOB_RESOURCE_REQUIREMENT_LIST
            return JOB_RESOURCE_REQUIREMENT_LIST;
          case 9: // PARAMETER_LIST
            return PARAMETER_LIST;
          case 10: // IMPATIENCE_TIME
            return IMPATIENCE_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __IMPATIENCETIME_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.APP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("appType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.softsec.tase.common.rpc.domain.app.AppType.class)));
      tmpMap.put(_Fields.JOB_LIFECYCLE, new org.apache.thrift.meta_data.FieldMetaData("jobLifecycle", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.softsec.tase.common.rpc.domain.job.JobLifecycle.class)));
      tmpMap.put(_Fields.JOB_PHASE_LIST, new org.apache.thrift.meta_data.FieldMetaData("jobPhaseList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.softsec.tase.common.rpc.domain.job.JobPhase.class))));
      tmpMap.put(_Fields.JOB_DISTRIBUTION_MODE, new org.apache.thrift.meta_data.FieldMetaData("jobDistributionMode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.softsec.tase.common.rpc.domain.job.JobDistributionMode.class)));
      tmpMap.put(_Fields.JOB_PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("jobPriority", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.softsec.tase.common.rpc.domain.job.JobPriority.class)));
      tmpMap.put(_Fields.JOB_OPERATION_REQUIREMENT_LIST, new org.apache.thrift.meta_data.FieldMetaData("jobOperationRequirementList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.softsec.tase.common.rpc.domain.job.JobOperationRequirement.class))));
      tmpMap.put(_Fields.JOB_RESOURCE_REQUIREMENT_LIST, new org.apache.thrift.meta_data.FieldMetaData("jobResourceRequirementList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.softsec.tase.common.rpc.domain.job.JobResourceRequirement.class))));
      tmpMap.put(_Fields.PARAMETER_LIST, new org.apache.thrift.meta_data.FieldMetaData("parameterList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.softsec.tase.common.rpc.domain.job.JobParameter.class))));
      tmpMap.put(_Fields.IMPATIENCE_TIME, new org.apache.thrift.meta_data.FieldMetaData("impatienceTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(submitJob_args.class, metaDataMap);
    }

    public submitJob_args() {
    }

    public submitJob_args(
      int userId,
      com.softsec.tase.common.rpc.domain.app.AppType appType,
      com.softsec.tase.common.rpc.domain.job.JobLifecycle jobLifecycle,
      List<com.softsec.tase.common.rpc.domain.job.JobPhase> jobPhaseList,
      com.softsec.tase.common.rpc.domain.job.JobDistributionMode jobDistributionMode,
      com.softsec.tase.common.rpc.domain.job.JobPriority jobPriority,
      List<com.softsec.tase.common.rpc.domain.job.JobOperationRequirement> jobOperationRequirementList,
      List<com.softsec.tase.common.rpc.domain.job.JobResourceRequirement> jobResourceRequirementList,
      List<com.softsec.tase.common.rpc.domain.job.JobParameter> parameterList,
      long impatienceTime)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
      this.appType = appType;
      this.jobLifecycle = jobLifecycle;
      this.jobPhaseList = jobPhaseList;
      this.jobDistributionMode = jobDistributionMode;
      this.jobPriority = jobPriority;
      this.jobOperationRequirementList = jobOperationRequirementList;
      this.jobResourceRequirementList = jobResourceRequirementList;
      this.parameterList = parameterList;
      this.impatienceTime = impatienceTime;
      setImpatienceTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public submitJob_args(submitJob_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
      if (other.isSetAppType()) {
        this.appType = other.appType;
      }
      if (other.isSetJobLifecycle()) {
        this.jobLifecycle = other.jobLifecycle;
      }
      if (other.isSetJobPhaseList()) {
        List<com.softsec.tase.common.rpc.domain.job.JobPhase> __this__jobPhaseList = new ArrayList<com.softsec.tase.common.rpc.domain.job.JobPhase>();
        for (com.softsec.tase.common.rpc.domain.job.JobPhase other_element : other.jobPhaseList) {
          __this__jobPhaseList.add(other_element);
        }
        this.jobPhaseList = __this__jobPhaseList;
      }
      if (other.isSetJobDistributionMode()) {
        this.jobDistributionMode = other.jobDistributionMode;
      }
      if (other.isSetJobPriority()) {
        this.jobPriority = other.jobPriority;
      }
      if (other.isSetJobOperationRequirementList()) {
        List<com.softsec.tase.common.rpc.domain.job.JobOperationRequirement> __this__jobOperationRequirementList = new ArrayList<com.softsec.tase.common.rpc.domain.job.JobOperationRequirement>();
        for (com.softsec.tase.common.rpc.domain.job.JobOperationRequirement other_element : other.jobOperationRequirementList) {
          __this__jobOperationRequirementList.add(new com.softsec.tase.common.rpc.domain.job.JobOperationRequirement(other_element));
        }
        this.jobOperationRequirementList = __this__jobOperationRequirementList;
      }
      if (other.isSetJobResourceRequirementList()) {
        List<com.softsec.tase.common.rpc.domain.job.JobResourceRequirement> __this__jobResourceRequirementList = new ArrayList<com.softsec.tase.common.rpc.domain.job.JobResourceRequirement>();
        for (com.softsec.tase.common.rpc.domain.job.JobResourceRequirement other_element : other.jobResourceRequirementList) {
          __this__jobResourceRequirementList.add(new com.softsec.tase.common.rpc.domain.job.JobResourceRequirement(other_element));
        }
        this.jobResourceRequirementList = __this__jobResourceRequirementList;
      }
      if (other.isSetParameterList()) {
        List<com.softsec.tase.common.rpc.domain.job.JobParameter> __this__parameterList = new ArrayList<com.softsec.tase.common.rpc.domain.job.JobParameter>();
        for (com.softsec.tase.common.rpc.domain.job.JobParameter other_element : other.parameterList) {
          __this__parameterList.add(new com.softsec.tase.common.rpc.domain.job.JobParameter(other_element));
        }
        this.parameterList = __this__parameterList;
      }
      this.impatienceTime = other.impatienceTime;
    }

    public submitJob_args deepCopy() {
      return new submitJob_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
      this.appType = null;
      this.jobLifecycle = null;
      this.jobPhaseList = null;
      this.jobDistributionMode = null;
      this.jobPriority = null;
      this.jobOperationRequirementList = null;
      this.jobResourceRequirementList = null;
      this.parameterList = null;
      setImpatienceTimeIsSet(false);
      this.impatienceTime = 0;
    }

    public int getUserId() {
      return this.userId;
    }

    public submitJob_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    /**
     * 
     * @see com.softsec.tase.common.rpc.domain.app.AppType
     */
    public com.softsec.tase.common.rpc.domain.app.AppType getAppType() {
      return this.appType;
    }

    /**
     * 
     * @see com.softsec.tase.common.rpc.domain.app.AppType
     */
    public submitJob_args setAppType(com.softsec.tase.common.rpc.domain.app.AppType appType) {
      this.appType = appType;
      return this;
    }

    public void unsetAppType() {
      this.appType = null;
    }

    /** Returns true if field appType is set (has been assigned a value) and false otherwise */
    public boolean isSetAppType() {
      return this.appType != null;
    }

    public void setAppTypeIsSet(boolean value) {
      if (!value) {
        this.appType = null;
      }
    }

    /**
     * 
     * @see com.softsec.tase.common.rpc.domain.job.JobLifecycle
     */
    public com.softsec.tase.common.rpc.domain.job.JobLifecycle getJobLifecycle() {
      return this.jobLifecycle;
    }

    /**
     * 
     * @see com.softsec.tase.common.rpc.domain.job.JobLifecycle
     */
    public submitJob_args setJobLifecycle(com.softsec.tase.common.rpc.domain.job.JobLifecycle jobLifecycle) {
      this.jobLifecycle = jobLifecycle;
      return this;
    }

    public void unsetJobLifecycle() {
      this.jobLifecycle = null;
    }

    /** Returns true if field jobLifecycle is set (has been assigned a value) and false otherwise */
    public boolean isSetJobLifecycle() {
      return this.jobLifecycle != null;
    }

    public void setJobLifecycleIsSet(boolean value) {
      if (!value) {
        this.jobLifecycle = null;
      }
    }

    public int getJobPhaseListSize() {
      return (this.jobPhaseList == null) ? 0 : this.jobPhaseList.size();
    }

    public java.util.Iterator<com.softsec.tase.common.rpc.domain.job.JobPhase> getJobPhaseListIterator() {
      return (this.jobPhaseList == null) ? null : this.jobPhaseList.iterator();
    }

    public void addToJobPhaseList(com.softsec.tase.common.rpc.domain.job.JobPhase elem) {
      if (this.jobPhaseList == null) {
        this.jobPhaseList = new ArrayList<com.softsec.tase.common.rpc.domain.job.JobPhase>();
      }
      this.jobPhaseList.add(elem);
    }

    public List<com.softsec.tase.common.rpc.domain.job.JobPhase> getJobPhaseList() {
      return this.jobPhaseList;
    }

    public submitJob_args setJobPhaseList(List<com.softsec.tase.common.rpc.domain.job.JobPhase> jobPhaseList) {
      this.jobPhaseList = jobPhaseList;
      return this;
    }

    public void unsetJobPhaseList() {
      this.jobPhaseList = null;
    }

    /** Returns true if field jobPhaseList is set (has been assigned a value) and false otherwise */
    public boolean isSetJobPhaseList() {
      return this.jobPhaseList != null;
    }

    public void setJobPhaseListIsSet(boolean value) {
      if (!value) {
        this.jobPhaseList = null;
      }
    }

    /**
     * 
     * @see com.softsec.tase.common.rpc.domain.job.JobDistributionMode
     */
    public com.softsec.tase.common.rpc.domain.job.JobDistributionMode getJobDistributionMode() {
      return this.jobDistributionMode;
    }

    /**
     * 
     * @see com.softsec.tase.common.rpc.domain.job.JobDistributionMode
     */
    public submitJob_args setJobDistributionMode(com.softsec.tase.common.rpc.domain.job.JobDistributionMode jobDistributionMode) {
      this.jobDistributionMode = jobDistributionMode;
      return this;
    }

    public void unsetJobDistributionMode() {
      this.jobDistributionMode = null;
    }

    /** Returns true if field jobDistributionMode is set (has been assigned a value) and false otherwise */
    public boolean isSetJobDistributionMode() {
      return this.jobDistributionMode != null;
    }

    public void setJobDistributionModeIsSet(boolean value) {
      if (!value) {
        this.jobDistributionMode = null;
      }
    }

    /**
     * 
     * @see com.softsec.tase.common.rpc.domain.job.JobPriority
     */
    public com.softsec.tase.common.rpc.domain.job.JobPriority getJobPriority() {
      return this.jobPriority;
    }

    /**
     * 
     * @see com.softsec.tase.common.rpc.domain.job.JobPriority
     */
    public submitJob_args setJobPriority(com.softsec.tase.common.rpc.domain.job.JobPriority jobPriority) {
      this.jobPriority = jobPriority;
      return this;
    }

    public void unsetJobPriority() {
      this.jobPriority = null;
    }

    /** Returns true if field jobPriority is set (has been assigned a value) and false otherwise */
    public boolean isSetJobPriority() {
      return this.jobPriority != null;
    }

    public void setJobPriorityIsSet(boolean value) {
      if (!value) {
        this.jobPriority = null;
      }
    }

    public int getJobOperationRequirementListSize() {
      return (this.jobOperationRequirementList == null) ? 0 : this.jobOperationRequirementList.size();
    }

    public java.util.Iterator<com.softsec.tase.common.rpc.domain.job.JobOperationRequirement> getJobOperationRequirementListIterator() {
      return (this.jobOperationRequirementList == null) ? null : this.jobOperationRequirementList.iterator();
    }

    public void addToJobOperationRequirementList(com.softsec.tase.common.rpc.domain.job.JobOperationRequirement elem) {
      if (this.jobOperationRequirementList == null) {
        this.jobOperationRequirementList = new ArrayList<com.softsec.tase.common.rpc.domain.job.JobOperationRequirement>();
      }
      this.jobOperationRequirementList.add(elem);
    }

    public List<com.softsec.tase.common.rpc.domain.job.JobOperationRequirement> getJobOperationRequirementList() {
      return this.jobOperationRequirementList;
    }

    public submitJob_args setJobOperationRequirementList(List<com.softsec.tase.common.rpc.domain.job.JobOperationRequirement> jobOperationRequirementList) {
      this.jobOperationRequirementList = jobOperationRequirementList;
      return this;
    }

    public void unsetJobOperationRequirementList() {
      this.jobOperationRequirementList = null;
    }

    /** Returns true if field jobOperationRequirementList is set (has been assigned a value) and false otherwise */
    public boolean isSetJobOperationRequirementList() {
      return this.jobOperationRequirementList != null;
    }

    public void setJobOperationRequirementListIsSet(boolean value) {
      if (!value) {
        this.jobOperationRequirementList = null;
      }
    }

    public int getJobResourceRequirementListSize() {
      return (this.jobResourceRequirementList == null) ? 0 : this.jobResourceRequirementList.size();
    }

    public java.util.Iterator<com.softsec.tase.common.rpc.domain.job.JobResourceRequirement> getJobResourceRequirementListIterator() {
      return (this.jobResourceRequirementList == null) ? null : this.jobResourceRequirementList.iterator();
    }

    public void addToJobResourceRequirementList(com.softsec.tase.common.rpc.domain.job.JobResourceRequirement elem) {
      if (this.jobResourceRequirementList == null) {
        this.jobResourceRequirementList = new ArrayList<com.softsec.tase.common.rpc.domain.job.JobResourceRequirement>();
      }
      this.jobResourceRequirementList.add(elem);
    }

    public List<com.softsec.tase.common.rpc.domain.job.JobResourceRequirement> getJobResourceRequirementList() {
      return this.jobResourceRequirementList;
    }

    public submitJob_args setJobResourceRequirementList(List<com.softsec.tase.common.rpc.domain.job.JobResourceRequirement> jobResourceRequirementList) {
      this.jobResourceRequirementList = jobResourceRequirementList;
      return this;
    }

    public void unsetJobResourceRequirementList() {
      this.jobResourceRequirementList = null;
    }

    /** Returns true if field jobResourceRequirementList is set (has been assigned a value) and false otherwise */
    public boolean isSetJobResourceRequirementList() {
      return this.jobResourceRequirementList != null;
    }

    public void setJobResourceRequirementListIsSet(boolean value) {
      if (!value) {
        this.jobResourceRequirementList = null;
      }
    }

    public int getParameterListSize() {
      return (this.parameterList == null) ? 0 : this.parameterList.size();
    }

    public java.util.Iterator<com.softsec.tase.common.rpc.domain.job.JobParameter> getParameterListIterator() {
      return (this.parameterList == null) ? null : this.parameterList.iterator();
    }

    public void addToParameterList(com.softsec.tase.common.rpc.domain.job.JobParameter elem) {
      if (this.parameterList == null) {
        this.parameterList = new ArrayList<com.softsec.tase.common.rpc.domain.job.JobParameter>();
      }
      this.parameterList.add(elem);
    }

    public List<com.softsec.tase.common.rpc.domain.job.JobParameter> getParameterList() {
      return this.parameterList;
    }

    public submitJob_args setParameterList(List<com.softsec.tase.common.rpc.domain.job.JobParameter> parameterList) {
      this.parameterList = parameterList;
      return this;
    }

    public void unsetParameterList() {
      this.parameterList = null;
    }

    /** Returns true if field parameterList is set (has been assigned a value) and false otherwise */
    public boolean isSetParameterList() {
      return this.parameterList != null;
    }

    public void setParameterListIsSet(boolean value) {
      if (!value) {
        this.parameterList = null;
      }
    }

    public long getImpatienceTime() {
      return this.impatienceTime;
    }

    public submitJob_args setImpatienceTime(long impatienceTime) {
      this.impatienceTime = impatienceTime;
      setImpatienceTimeIsSet(true);
      return this;
    }

    public void unsetImpatienceTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IMPATIENCETIME_ISSET_ID);
    }

    /** Returns true if field impatienceTime is set (has been assigned a value) and false otherwise */
    public boolean isSetImpatienceTime() {
      return EncodingUtils.testBit(__isset_bitfield, __IMPATIENCETIME_ISSET_ID);
    }

    public void setImpatienceTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IMPATIENCETIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Integer)value);
        }
        break;

      case APP_TYPE:
        if (value == null) {
          unsetAppType();
        } else {
          setAppType((com.softsec.tase.common.rpc.domain.app.AppType)value);
        }
        break;

      case JOB_LIFECYCLE:
        if (value == null) {
          unsetJobLifecycle();
        } else {
          setJobLifecycle((com.softsec.tase.common.rpc.domain.job.JobLifecycle)value);
        }
        break;

      case JOB_PHASE_LIST:
        if (value == null) {
          unsetJobPhaseList();
        } else {
          setJobPhaseList((List<com.softsec.tase.common.rpc.domain.job.JobPhase>)value);
        }
        break;

      case JOB_DISTRIBUTION_MODE:
        if (value == null) {
          unsetJobDistributionMode();
        } else {
          setJobDistributionMode((com.softsec.tase.common.rpc.domain.job.JobDistributionMode)value);
        }
        break;

      case JOB_PRIORITY:
        if (value == null) {
          unsetJobPriority();
        } else {
          setJobPriority((com.softsec.tase.common.rpc.domain.job.JobPriority)value);
        }
        break;

      case JOB_OPERATION_REQUIREMENT_LIST:
        if (value == null) {
          unsetJobOperationRequirementList();
        } else {
          setJobOperationRequirementList((List<com.softsec.tase.common.rpc.domain.job.JobOperationRequirement>)value);
        }
        break;

      case JOB_RESOURCE_REQUIREMENT_LIST:
        if (value == null) {
          unsetJobResourceRequirementList();
        } else {
          setJobResourceRequirementList((List<com.softsec.tase.common.rpc.domain.job.JobResourceRequirement>)value);
        }
        break;

      case PARAMETER_LIST:
        if (value == null) {
          unsetParameterList();
        } else {
          setParameterList((List<com.softsec.tase.common.rpc.domain.job.JobParameter>)value);
        }
        break;

      case IMPATIENCE_TIME:
        if (value == null) {
          unsetImpatienceTime();
        } else {
          setImpatienceTime((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return Integer.valueOf(getUserId());

      case APP_TYPE:
        return getAppType();

      case JOB_LIFECYCLE:
        return getJobLifecycle();

      case JOB_PHASE_LIST:
        return getJobPhaseList();

      case JOB_DISTRIBUTION_MODE:
        return getJobDistributionMode();

      case JOB_PRIORITY:
        return getJobPriority();

      case JOB_OPERATION_REQUIREMENT_LIST:
        return getJobOperationRequirementList();

      case JOB_RESOURCE_REQUIREMENT_LIST:
        return getJobResourceRequirementList();

      case PARAMETER_LIST:
        return getParameterList();

      case IMPATIENCE_TIME:
        return Long.valueOf(getImpatienceTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case APP_TYPE:
        return isSetAppType();
      case JOB_LIFECYCLE:
        return isSetJobLifecycle();
      case JOB_PHASE_LIST:
        return isSetJobPhaseList();
      case JOB_DISTRIBUTION_MODE:
        return isSetJobDistributionMode();
      case JOB_PRIORITY:
        return isSetJobPriority();
      case JOB_OPERATION_REQUIREMENT_LIST:
        return isSetJobOperationRequirementList();
      case JOB_RESOURCE_REQUIREMENT_LIST:
        return isSetJobResourceRequirementList();
      case PARAMETER_LIST:
        return isSetParameterList();
      case IMPATIENCE_TIME:
        return isSetImpatienceTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof submitJob_args)
        return this.equals((submitJob_args)that);
      return false;
    }

    public boolean equals(submitJob_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_appType = true && this.isSetAppType();
      boolean that_present_appType = true && that.isSetAppType();
      if (this_present_appType || that_present_appType) {
        if (!(this_present_appType && that_present_appType))
          return false;
        if (!this.appType.equals(that.appType))
          return false;
      }

      boolean this_present_jobLifecycle = true && this.isSetJobLifecycle();
      boolean that_present_jobLifecycle = true && that.isSetJobLifecycle();
      if (this_present_jobLifecycle || that_present_jobLifecycle) {
        if (!(this_present_jobLifecycle && that_present_jobLifecycle))
          return false;
        if (!this.jobLifecycle.equals(that.jobLifecycle))
          return false;
      }

      boolean this_present_jobPhaseList = true && this.isSetJobPhaseList();
      boolean that_present_jobPhaseList = true && that.isSetJobPhaseList();
      if (this_present_jobPhaseList || that_present_jobPhaseList) {
        if (!(this_present_jobPhaseList && that_present_jobPhaseList))
          return false;
        if (!this.jobPhaseList.equals(that.jobPhaseList))
          return false;
      }

      boolean this_present_jobDistributionMode = true && this.isSetJobDistributionMode();
      boolean that_present_jobDistributionMode = true && that.isSetJobDistributionMode();
      if (this_present_jobDistributionMode || that_present_jobDistributionMode) {
        if (!(this_present_jobDistributionMode && that_present_jobDistributionMode))
          return false;
        if (!this.jobDistributionMode.equals(that.jobDistributionMode))
          return false;
      }

      boolean this_present_jobPriority = true && this.isSetJobPriority();
      boolean that_present_jobPriority = true && that.isSetJobPriority();
      if (this_present_jobPriority || that_present_jobPriority) {
        if (!(this_present_jobPriority && that_present_jobPriority))
          return false;
        if (!this.jobPriority.equals(that.jobPriority))
          return false;
      }

      boolean this_present_jobOperationRequirementList = true && this.isSetJobOperationRequirementList();
      boolean that_present_jobOperationRequirementList = true && that.isSetJobOperationRequirementList();
      if (this_present_jobOperationRequirementList || that_present_jobOperationRequirementList) {
        if (!(this_present_jobOperationRequirementList && that_present_jobOperationRequirementList))
          return false;
        if (!this.jobOperationRequirementList.equals(that.jobOperationRequirementList))
          return false;
      }

      boolean this_present_jobResourceRequirementList = true && this.isSetJobResourceRequirementList();
      boolean that_present_jobResourceRequirementList = true && that.isSetJobResourceRequirementList();
      if (this_present_jobResourceRequirementList || that_present_jobResourceRequirementList) {
        if (!(this_present_jobResourceRequirementList && that_present_jobResourceRequirementList))
          return false;
        if (!this.jobResourceRequirementList.equals(that.jobResourceRequirementList))
          return false;
      }

      boolean this_present_parameterList = true && this.isSetParameterList();
      boolean that_present_parameterList = true && that.isSetParameterList();
      if (this_present_parameterList || that_present_parameterList) {
        if (!(this_present_parameterList && that_present_parameterList))
          return false;
        if (!this.parameterList.equals(that.parameterList))
          return false;
      }

      boolean this_present_impatienceTime = true;
      boolean that_present_impatienceTime = true;
      if (this_present_impatienceTime || that_present_impatienceTime) {
        if (!(this_present_impatienceTime && that_present_impatienceTime))
          return false;
        if (this.impatienceTime != that.impatienceTime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(submitJob_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      submitJob_args typedOther = (submitJob_args)other;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAppType()).compareTo(typedOther.isSetAppType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appType, typedOther.appType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetJobLifecycle()).compareTo(typedOther.isSetJobLifecycle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobLifecycle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobLifecycle, typedOther.jobLifecycle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetJobPhaseList()).compareTo(typedOther.isSetJobPhaseList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobPhaseList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobPhaseList, typedOther.jobPhaseList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetJobDistributionMode()).compareTo(typedOther.isSetJobDistributionMode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobDistributionMode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobDistributionMode, typedOther.jobDistributionMode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetJobPriority()).compareTo(typedOther.isSetJobPriority());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobPriority()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobPriority, typedOther.jobPriority);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetJobOperationRequirementList()).compareTo(typedOther.isSetJobOperationRequirementList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobOperationRequirementList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobOperationRequirementList, typedOther.jobOperationRequirementList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetJobResourceRequirementList()).compareTo(typedOther.isSetJobResourceRequirementList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobResourceRequirementList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobResourceRequirementList, typedOther.jobResourceRequirementList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParameterList()).compareTo(typedOther.isSetParameterList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParameterList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parameterList, typedOther.parameterList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetImpatienceTime()).compareTo(typedOther.isSetImpatienceTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetImpatienceTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.impatienceTime, typedOther.impatienceTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("submitJob_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("appType:");
      if (this.appType == null) {
        sb.append("null");
      } else {
        sb.append(this.appType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jobLifecycle:");
      if (this.jobLifecycle == null) {
        sb.append("null");
      } else {
        sb.append(this.jobLifecycle);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jobPhaseList:");
      if (this.jobPhaseList == null) {
        sb.append("null");
      } else {
        sb.append(this.jobPhaseList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jobDistributionMode:");
      if (this.jobDistributionMode == null) {
        sb.append("null");
      } else {
        sb.append(this.jobDistributionMode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jobPriority:");
      if (this.jobPriority == null) {
        sb.append("null");
      } else {
        sb.append(this.jobPriority);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jobOperationRequirementList:");
      if (this.jobOperationRequirementList == null) {
        sb.append("null");
      } else {
        sb.append(this.jobOperationRequirementList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jobResourceRequirementList:");
      if (this.jobResourceRequirementList == null) {
        sb.append("null");
      } else {
        sb.append(this.jobResourceRequirementList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("parameterList:");
      if (this.parameterList == null) {
        sb.append("null");
      } else {
        sb.append(this.parameterList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("impatienceTime:");
      sb.append(this.impatienceTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // alas, we cannot check 'userId' because it's a primitive and you chose the non-beans generator.
      if (appType == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'appType' was not present! Struct: " + toString());
      }
      if (jobLifecycle == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'jobLifecycle' was not present! Struct: " + toString());
      }
      if (jobPhaseList == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'jobPhaseList' was not present! Struct: " + toString());
      }
      if (jobDistributionMode == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'jobDistributionMode' was not present! Struct: " + toString());
      }
      if (jobPriority == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'jobPriority' was not present! Struct: " + toString());
      }
      if (jobOperationRequirementList == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'jobOperationRequirementList' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class submitJob_argsStandardSchemeFactory implements SchemeFactory {
      public submitJob_argsStandardScheme getScheme() {
        return new submitJob_argsStandardScheme();
      }
    }

    private static class submitJob_argsStandardScheme extends StandardScheme<submitJob_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, submitJob_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // APP_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.appType = com.softsec.tase.common.rpc.domain.app.AppType.findByValue(iprot.readI32());
                struct.setAppTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // JOB_LIFECYCLE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.jobLifecycle = com.softsec.tase.common.rpc.domain.job.JobLifecycle.findByValue(iprot.readI32());
                struct.setJobLifecycleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // JOB_PHASE_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.jobPhaseList = new ArrayList<com.softsec.tase.common.rpc.domain.job.JobPhase>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    com.softsec.tase.common.rpc.domain.job.JobPhase _elem2; // required
                    _elem2 = com.softsec.tase.common.rpc.domain.job.JobPhase.findByValue(iprot.readI32());
                    struct.jobPhaseList.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setJobPhaseListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // JOB_DISTRIBUTION_MODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.jobDistributionMode = com.softsec.tase.common.rpc.domain.job.JobDistributionMode.findByValue(iprot.readI32());
                struct.setJobDistributionModeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // JOB_PRIORITY
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.jobPriority = com.softsec.tase.common.rpc.domain.job.JobPriority.findByValue(iprot.readI32());
                struct.setJobPriorityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // JOB_OPERATION_REQUIREMENT_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                  struct.jobOperationRequirementList = new ArrayList<com.softsec.tase.common.rpc.domain.job.JobOperationRequirement>(_list3.size);
                  for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                  {
                    com.softsec.tase.common.rpc.domain.job.JobOperationRequirement _elem5; // required
                    _elem5 = new com.softsec.tase.common.rpc.domain.job.JobOperationRequirement();
                    _elem5.read(iprot);
                    struct.jobOperationRequirementList.add(_elem5);
                  }
                  iprot.readListEnd();
                }
                struct.setJobOperationRequirementListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // JOB_RESOURCE_REQUIREMENT_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                  struct.jobResourceRequirementList = new ArrayList<com.softsec.tase.common.rpc.domain.job.JobResourceRequirement>(_list6.size);
                  for (int _i7 = 0; _i7 < _list6.size; ++_i7)
                  {
                    com.softsec.tase.common.rpc.domain.job.JobResourceRequirement _elem8; // required
                    _elem8 = new com.softsec.tase.common.rpc.domain.job.JobResourceRequirement();
                    _elem8.read(iprot);
                    struct.jobResourceRequirementList.add(_elem8);
                  }
                  iprot.readListEnd();
                }
                struct.setJobResourceRequirementListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // PARAMETER_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                  struct.parameterList = new ArrayList<com.softsec.tase.common.rpc.domain.job.JobParameter>(_list9.size);
                  for (int _i10 = 0; _i10 < _list9.size; ++_i10)
                  {
                    com.softsec.tase.common.rpc.domain.job.JobParameter _elem11; // required
                    _elem11 = new com.softsec.tase.common.rpc.domain.job.JobParameter();
                    _elem11.read(iprot);
                    struct.parameterList.add(_elem11);
                  }
                  iprot.readListEnd();
                }
                struct.setParameterListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // IMPATIENCE_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.impatienceTime = iprot.readI64();
                struct.setImpatienceTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetUserId()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'userId' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, submitJob_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        if (struct.appType != null) {
          oprot.writeFieldBegin(APP_TYPE_FIELD_DESC);
          oprot.writeI32(struct.appType.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.jobLifecycle != null) {
          oprot.writeFieldBegin(JOB_LIFECYCLE_FIELD_DESC);
          oprot.writeI32(struct.jobLifecycle.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.jobPhaseList != null) {
          oprot.writeFieldBegin(JOB_PHASE_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.jobPhaseList.size()));
            for (com.softsec.tase.common.rpc.domain.job.JobPhase _iter12 : struct.jobPhaseList)
            {
              oprot.writeI32(_iter12.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.jobDistributionMode != null) {
          oprot.writeFieldBegin(JOB_DISTRIBUTION_MODE_FIELD_DESC);
          oprot.writeI32(struct.jobDistributionMode.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.jobPriority != null) {
          oprot.writeFieldBegin(JOB_PRIORITY_FIELD_DESC);
          oprot.writeI32(struct.jobPriority.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.jobOperationRequirementList != null) {
          oprot.writeFieldBegin(JOB_OPERATION_REQUIREMENT_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.jobOperationRequirementList.size()));
            for (com.softsec.tase.common.rpc.domain.job.JobOperationRequirement _iter13 : struct.jobOperationRequirementList)
            {
              _iter13.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.jobResourceRequirementList != null) {
          oprot.writeFieldBegin(JOB_RESOURCE_REQUIREMENT_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.jobResourceRequirementList.size()));
            for (com.softsec.tase.common.rpc.domain.job.JobResourceRequirement _iter14 : struct.jobResourceRequirementList)
            {
              _iter14.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.parameterList != null) {
          oprot.writeFieldBegin(PARAMETER_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.parameterList.size()));
            for (com.softsec.tase.common.rpc.domain.job.JobParameter _iter15 : struct.parameterList)
            {
              _iter15.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(IMPATIENCE_TIME_FIELD_DESC);
        oprot.writeI64(struct.impatienceTime);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class submitJob_argsTupleSchemeFactory implements SchemeFactory {
      public submitJob_argsTupleScheme getScheme() {
        return new submitJob_argsTupleScheme();
      }
    }

    private static class submitJob_argsTupleScheme extends TupleScheme<submitJob_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, submitJob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeI32(struct.userId);
        oprot.writeI32(struct.appType.getValue());
        oprot.writeI32(struct.jobLifecycle.getValue());
        {
          oprot.writeI32(struct.jobPhaseList.size());
          for (com.softsec.tase.common.rpc.domain.job.JobPhase _iter16 : struct.jobPhaseList)
          {
            oprot.writeI32(_iter16.getValue());
          }
        }
        oprot.writeI32(struct.jobDistributionMode.getValue());
        oprot.writeI32(struct.jobPriority.getValue());
        {
          oprot.writeI32(struct.jobOperationRequirementList.size());
          for (com.softsec.tase.common.rpc.domain.job.JobOperationRequirement _iter17 : struct.jobOperationRequirementList)
          {
            _iter17.write(oprot);
          }
        }
        BitSet optionals = new BitSet();
        if (struct.isSetJobResourceRequirementList()) {
          optionals.set(0);
        }
        if (struct.isSetParameterList()) {
          optionals.set(1);
        }
        if (struct.isSetImpatienceTime()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetJobResourceRequirementList()) {
          {
            oprot.writeI32(struct.jobResourceRequirementList.size());
            for (com.softsec.tase.common.rpc.domain.job.JobResourceRequirement _iter18 : struct.jobResourceRequirementList)
            {
              _iter18.write(oprot);
            }
          }
        }
        if (struct.isSetParameterList()) {
          {
            oprot.writeI32(struct.parameterList.size());
            for (com.softsec.tase.common.rpc.domain.job.JobParameter _iter19 : struct.parameterList)
            {
              _iter19.write(oprot);
            }
          }
        }
        if (struct.isSetImpatienceTime()) {
          oprot.writeI64(struct.impatienceTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, submitJob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
        struct.appType = com.softsec.tase.common.rpc.domain.app.AppType.findByValue(iprot.readI32());
        struct.setAppTypeIsSet(true);
        struct.jobLifecycle = com.softsec.tase.common.rpc.domain.job.JobLifecycle.findByValue(iprot.readI32());
        struct.setJobLifecycleIsSet(true);
        {
          org.apache.thrift.protocol.TList _list20 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.jobPhaseList = new ArrayList<com.softsec.tase.common.rpc.domain.job.JobPhase>(_list20.size);
          for (int _i21 = 0; _i21 < _list20.size; ++_i21)
          {
            com.softsec.tase.common.rpc.domain.job.JobPhase _elem22; // required
            _elem22 = com.softsec.tase.common.rpc.domain.job.JobPhase.findByValue(iprot.readI32());
            struct.jobPhaseList.add(_elem22);
          }
        }
        struct.setJobPhaseListIsSet(true);
        struct.jobDistributionMode = com.softsec.tase.common.rpc.domain.job.JobDistributionMode.findByValue(iprot.readI32());
        struct.setJobDistributionModeIsSet(true);
        struct.jobPriority = com.softsec.tase.common.rpc.domain.job.JobPriority.findByValue(iprot.readI32());
        struct.setJobPriorityIsSet(true);
        {
          org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.jobOperationRequirementList = new ArrayList<com.softsec.tase.common.rpc.domain.job.JobOperationRequirement>(_list23.size);
          for (int _i24 = 0; _i24 < _list23.size; ++_i24)
          {
            com.softsec.tase.common.rpc.domain.job.JobOperationRequirement _elem25; // required
            _elem25 = new com.softsec.tase.common.rpc.domain.job.JobOperationRequirement();
            _elem25.read(iprot);
            struct.jobOperationRequirementList.add(_elem25);
          }
        }
        struct.setJobOperationRequirementListIsSet(true);
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.jobResourceRequirementList = new ArrayList<com.softsec.tase.common.rpc.domain.job.JobResourceRequirement>(_list26.size);
            for (int _i27 = 0; _i27 < _list26.size; ++_i27)
            {
              com.softsec.tase.common.rpc.domain.job.JobResourceRequirement _elem28; // required
              _elem28 = new com.softsec.tase.common.rpc.domain.job.JobResourceRequirement();
              _elem28.read(iprot);
              struct.jobResourceRequirementList.add(_elem28);
            }
          }
          struct.setJobResourceRequirementListIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.parameterList = new ArrayList<com.softsec.tase.common.rpc.domain.job.JobParameter>(_list29.size);
            for (int _i30 = 0; _i30 < _list29.size; ++_i30)
            {
              com.softsec.tase.common.rpc.domain.job.JobParameter _elem31; // required
              _elem31 = new com.softsec.tase.common.rpc.domain.job.JobParameter();
              _elem31.read(iprot);
              struct.parameterList.add(_elem31);
            }
          }
          struct.setParameterListIsSet(true);
        }
        if (incoming.get(2)) {
          struct.impatienceTime = iprot.readI64();
          struct.setImpatienceTimeIsSet(true);
        }
      }
    }

  }

  public static class submitJob_result implements org.apache.thrift.TBase<submitJob_result, submitJob_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("submitJob_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField TE_FIELD_DESC = new org.apache.thrift.protocol.TField("te", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new submitJob_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new submitJob_resultTupleSchemeFactory());
    }

    public long success; // required
    public com.softsec.tase.common.rpc.exception.InvalidRequestException ire; // required
    public com.softsec.tase.common.rpc.exception.UnavailableException ue; // required
    public com.softsec.tase.common.rpc.exception.TimeoutException te; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      UE((short)2, "ue"),
      TE((short)3, "te");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // UE
            return UE;
          case 3: // TE
            return TE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TE, new org.apache.thrift.meta_data.FieldMetaData("te", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(submitJob_result.class, metaDataMap);
    }

    public submitJob_result() {
    }

    public submitJob_result(
      long success,
      com.softsec.tase.common.rpc.exception.InvalidRequestException ire,
      com.softsec.tase.common.rpc.exception.UnavailableException ue,
      com.softsec.tase.common.rpc.exception.TimeoutException te)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ire = ire;
      this.ue = ue;
      this.te = te;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public submitJob_result(submitJob_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIre()) {
        this.ire = new com.softsec.tase.common.rpc.exception.InvalidRequestException(other.ire);
      }
      if (other.isSetUe()) {
        this.ue = new com.softsec.tase.common.rpc.exception.UnavailableException(other.ue);
      }
      if (other.isSetTe()) {
        this.te = new com.softsec.tase.common.rpc.exception.TimeoutException(other.te);
      }
    }

    public submitJob_result deepCopy() {
      return new submitJob_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ire = null;
      this.ue = null;
      this.te = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public submitJob_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.softsec.tase.common.rpc.exception.InvalidRequestException getIre() {
      return this.ire;
    }

    public submitJob_result setIre(com.softsec.tase.common.rpc.exception.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public com.softsec.tase.common.rpc.exception.UnavailableException getUe() {
      return this.ue;
    }

    public submitJob_result setUe(com.softsec.tase.common.rpc.exception.UnavailableException ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public com.softsec.tase.common.rpc.exception.TimeoutException getTe() {
      return this.te;
    }

    public submitJob_result setTe(com.softsec.tase.common.rpc.exception.TimeoutException te) {
      this.te = te;
      return this;
    }

    public void unsetTe() {
      this.te = null;
    }

    /** Returns true if field te is set (has been assigned a value) and false otherwise */
    public boolean isSetTe() {
      return this.te != null;
    }

    public void setTeIsSet(boolean value) {
      if (!value) {
        this.te = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((com.softsec.tase.common.rpc.exception.InvalidRequestException)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((com.softsec.tase.common.rpc.exception.UnavailableException)value);
        }
        break;

      case TE:
        if (value == null) {
          unsetTe();
        } else {
          setTe((com.softsec.tase.common.rpc.exception.TimeoutException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case IRE:
        return getIre();

      case UE:
        return getUe();

      case TE:
        return getTe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case UE:
        return isSetUe();
      case TE:
        return isSetTe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof submitJob_result)
        return this.equals((submitJob_result)that);
      return false;
    }

    public boolean equals(submitJob_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      boolean this_present_te = true && this.isSetTe();
      boolean that_present_te = true && that.isSetTe();
      if (this_present_te || that_present_te) {
        if (!(this_present_te && that_present_te))
          return false;
        if (!this.te.equals(that.te))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(submitJob_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      submitJob_result typedOther = (submitJob_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(typedOther.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, typedOther.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUe()).compareTo(typedOther.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, typedOther.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTe()).compareTo(typedOther.isSetTe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.te, typedOther.te);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("submitJob_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("te:");
      if (this.te == null) {
        sb.append("null");
      } else {
        sb.append(this.te);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class submitJob_resultStandardSchemeFactory implements SchemeFactory {
      public submitJob_resultStandardScheme getScheme() {
        return new submitJob_resultStandardScheme();
      }
    }

    private static class submitJob_resultStandardScheme extends StandardScheme<submitJob_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, submitJob_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new com.softsec.tase.common.rpc.exception.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new com.softsec.tase.common.rpc.exception.UnavailableException();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.te = new com.softsec.tase.common.rpc.exception.TimeoutException();
                struct.te.read(iprot);
                struct.setTeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, submitJob_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ue != null) {
          oprot.writeFieldBegin(UE_FIELD_DESC);
          struct.ue.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.te != null) {
          oprot.writeFieldBegin(TE_FIELD_DESC);
          struct.te.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class submitJob_resultTupleSchemeFactory implements SchemeFactory {
      public submitJob_resultTupleScheme getScheme() {
        return new submitJob_resultTupleScheme();
      }
    }

    private static class submitJob_resultTupleScheme extends TupleScheme<submitJob_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, submitJob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetUe()) {
          optionals.set(2);
        }
        if (struct.isSetTe()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetUe()) {
          struct.ue.write(oprot);
        }
        if (struct.isSetTe()) {
          struct.te.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, submitJob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new com.softsec.tase.common.rpc.exception.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ue = new com.softsec.tase.common.rpc.exception.UnavailableException();
          struct.ue.read(iprot);
          struct.setUeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.te = new com.softsec.tase.common.rpc.exception.TimeoutException();
          struct.te.read(iprot);
          struct.setTeIsSet(true);
        }
      }
    }

  }

  public static class terminateJobs_args implements org.apache.thrift.TBase<terminateJobs_args, terminateJobs_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("terminateJobs_args");

    private static final org.apache.thrift.protocol.TField JOB_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("jobIdList", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new terminateJobs_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new terminateJobs_argsTupleSchemeFactory());
    }

    public List<Long> jobIdList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_ID_LIST((short)1, "jobIdList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_ID_LIST
            return JOB_ID_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("jobIdList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(terminateJobs_args.class, metaDataMap);
    }

    public terminateJobs_args() {
    }

    public terminateJobs_args(
      List<Long> jobIdList)
    {
      this();
      this.jobIdList = jobIdList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public terminateJobs_args(terminateJobs_args other) {
      if (other.isSetJobIdList()) {
        List<Long> __this__jobIdList = new ArrayList<Long>();
        for (Long other_element : other.jobIdList) {
          __this__jobIdList.add(other_element);
        }
        this.jobIdList = __this__jobIdList;
      }
    }

    public terminateJobs_args deepCopy() {
      return new terminateJobs_args(this);
    }

    @Override
    public void clear() {
      this.jobIdList = null;
    }

    public int getJobIdListSize() {
      return (this.jobIdList == null) ? 0 : this.jobIdList.size();
    }

    public java.util.Iterator<Long> getJobIdListIterator() {
      return (this.jobIdList == null) ? null : this.jobIdList.iterator();
    }

    public void addToJobIdList(long elem) {
      if (this.jobIdList == null) {
        this.jobIdList = new ArrayList<Long>();
      }
      this.jobIdList.add(elem);
    }

    public List<Long> getJobIdList() {
      return this.jobIdList;
    }

    public terminateJobs_args setJobIdList(List<Long> jobIdList) {
      this.jobIdList = jobIdList;
      return this;
    }

    public void unsetJobIdList() {
      this.jobIdList = null;
    }

    /** Returns true if field jobIdList is set (has been assigned a value) and false otherwise */
    public boolean isSetJobIdList() {
      return this.jobIdList != null;
    }

    public void setJobIdListIsSet(boolean value) {
      if (!value) {
        this.jobIdList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB_ID_LIST:
        if (value == null) {
          unsetJobIdList();
        } else {
          setJobIdList((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_ID_LIST:
        return getJobIdList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB_ID_LIST:
        return isSetJobIdList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof terminateJobs_args)
        return this.equals((terminateJobs_args)that);
      return false;
    }

    public boolean equals(terminateJobs_args that) {
      if (that == null)
        return false;

      boolean this_present_jobIdList = true && this.isSetJobIdList();
      boolean that_present_jobIdList = true && that.isSetJobIdList();
      if (this_present_jobIdList || that_present_jobIdList) {
        if (!(this_present_jobIdList && that_present_jobIdList))
          return false;
        if (!this.jobIdList.equals(that.jobIdList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(terminateJobs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      terminateJobs_args typedOther = (terminateJobs_args)other;

      lastComparison = Boolean.valueOf(isSetJobIdList()).compareTo(typedOther.isSetJobIdList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobIdList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobIdList, typedOther.jobIdList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("terminateJobs_args(");
      boolean first = true;

      sb.append("jobIdList:");
      if (this.jobIdList == null) {
        sb.append("null");
      } else {
        sb.append(this.jobIdList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (jobIdList == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'jobIdList' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class terminateJobs_argsStandardSchemeFactory implements SchemeFactory {
      public terminateJobs_argsStandardScheme getScheme() {
        return new terminateJobs_argsStandardScheme();
      }
    }

    private static class terminateJobs_argsStandardScheme extends StandardScheme<terminateJobs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, terminateJobs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_ID_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.jobIdList = new ArrayList<Long>(_list32.size);
                  for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                  {
                    long _elem34; // required
                    _elem34 = iprot.readI64();
                    struct.jobIdList.add(_elem34);
                  }
                  iprot.readListEnd();
                }
                struct.setJobIdListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, terminateJobs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobIdList != null) {
          oprot.writeFieldBegin(JOB_ID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.jobIdList.size()));
            for (long _iter35 : struct.jobIdList)
            {
              oprot.writeI64(_iter35);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class terminateJobs_argsTupleSchemeFactory implements SchemeFactory {
      public terminateJobs_argsTupleScheme getScheme() {
        return new terminateJobs_argsTupleScheme();
      }
    }

    private static class terminateJobs_argsTupleScheme extends TupleScheme<terminateJobs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, terminateJobs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        {
          oprot.writeI32(struct.jobIdList.size());
          for (long _iter36 : struct.jobIdList)
          {
            oprot.writeI64(_iter36);
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, terminateJobs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        {
          org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.jobIdList = new ArrayList<Long>(_list37.size);
          for (int _i38 = 0; _i38 < _list37.size; ++_i38)
          {
            long _elem39; // required
            _elem39 = iprot.readI64();
            struct.jobIdList.add(_elem39);
          }
        }
        struct.setJobIdListIsSet(true);
      }
    }

  }

  public static class terminateJobs_result implements org.apache.thrift.TBase<terminateJobs_result, terminateJobs_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("terminateJobs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField NFE_FIELD_DESC = new org.apache.thrift.protocol.TField("nfe", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField TE_FIELD_DESC = new org.apache.thrift.protocol.TField("te", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new terminateJobs_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new terminateJobs_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.softsec.tase.common.rpc.exception.InvalidRequestException ire; // required
    public com.softsec.tase.common.rpc.exception.UnavailableException ue; // required
    public com.softsec.tase.common.rpc.exception.NotFoundException nfe; // required
    public com.softsec.tase.common.rpc.exception.TimeoutException te; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      UE((short)2, "ue"),
      NFE((short)3, "nfe"),
      TE((short)4, "te");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // UE
            return UE;
          case 3: // NFE
            return NFE;
          case 4: // TE
            return TE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.NFE, new org.apache.thrift.meta_data.FieldMetaData("nfe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TE, new org.apache.thrift.meta_data.FieldMetaData("te", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(terminateJobs_result.class, metaDataMap);
    }

    public terminateJobs_result() {
    }

    public terminateJobs_result(
      int success,
      com.softsec.tase.common.rpc.exception.InvalidRequestException ire,
      com.softsec.tase.common.rpc.exception.UnavailableException ue,
      com.softsec.tase.common.rpc.exception.NotFoundException nfe,
      com.softsec.tase.common.rpc.exception.TimeoutException te)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ire = ire;
      this.ue = ue;
      this.nfe = nfe;
      this.te = te;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public terminateJobs_result(terminateJobs_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIre()) {
        this.ire = new com.softsec.tase.common.rpc.exception.InvalidRequestException(other.ire);
      }
      if (other.isSetUe()) {
        this.ue = new com.softsec.tase.common.rpc.exception.UnavailableException(other.ue);
      }
      if (other.isSetNfe()) {
        this.nfe = new com.softsec.tase.common.rpc.exception.NotFoundException(other.nfe);
      }
      if (other.isSetTe()) {
        this.te = new com.softsec.tase.common.rpc.exception.TimeoutException(other.te);
      }
    }

    public terminateJobs_result deepCopy() {
      return new terminateJobs_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ire = null;
      this.ue = null;
      this.nfe = null;
      this.te = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public terminateJobs_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.softsec.tase.common.rpc.exception.InvalidRequestException getIre() {
      return this.ire;
    }

    public terminateJobs_result setIre(com.softsec.tase.common.rpc.exception.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public com.softsec.tase.common.rpc.exception.UnavailableException getUe() {
      return this.ue;
    }

    public terminateJobs_result setUe(com.softsec.tase.common.rpc.exception.UnavailableException ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public com.softsec.tase.common.rpc.exception.NotFoundException getNfe() {
      return this.nfe;
    }

    public terminateJobs_result setNfe(com.softsec.tase.common.rpc.exception.NotFoundException nfe) {
      this.nfe = nfe;
      return this;
    }

    public void unsetNfe() {
      this.nfe = null;
    }

    /** Returns true if field nfe is set (has been assigned a value) and false otherwise */
    public boolean isSetNfe() {
      return this.nfe != null;
    }

    public void setNfeIsSet(boolean value) {
      if (!value) {
        this.nfe = null;
      }
    }

    public com.softsec.tase.common.rpc.exception.TimeoutException getTe() {
      return this.te;
    }

    public terminateJobs_result setTe(com.softsec.tase.common.rpc.exception.TimeoutException te) {
      this.te = te;
      return this;
    }

    public void unsetTe() {
      this.te = null;
    }

    /** Returns true if field te is set (has been assigned a value) and false otherwise */
    public boolean isSetTe() {
      return this.te != null;
    }

    public void setTeIsSet(boolean value) {
      if (!value) {
        this.te = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((com.softsec.tase.common.rpc.exception.InvalidRequestException)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((com.softsec.tase.common.rpc.exception.UnavailableException)value);
        }
        break;

      case NFE:
        if (value == null) {
          unsetNfe();
        } else {
          setNfe((com.softsec.tase.common.rpc.exception.NotFoundException)value);
        }
        break;

      case TE:
        if (value == null) {
          unsetTe();
        } else {
          setTe((com.softsec.tase.common.rpc.exception.TimeoutException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case IRE:
        return getIre();

      case UE:
        return getUe();

      case NFE:
        return getNfe();

      case TE:
        return getTe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case UE:
        return isSetUe();
      case NFE:
        return isSetNfe();
      case TE:
        return isSetTe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof terminateJobs_result)
        return this.equals((terminateJobs_result)that);
      return false;
    }

    public boolean equals(terminateJobs_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      boolean this_present_nfe = true && this.isSetNfe();
      boolean that_present_nfe = true && that.isSetNfe();
      if (this_present_nfe || that_present_nfe) {
        if (!(this_present_nfe && that_present_nfe))
          return false;
        if (!this.nfe.equals(that.nfe))
          return false;
      }

      boolean this_present_te = true && this.isSetTe();
      boolean that_present_te = true && that.isSetTe();
      if (this_present_te || that_present_te) {
        if (!(this_present_te && that_present_te))
          return false;
        if (!this.te.equals(that.te))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(terminateJobs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      terminateJobs_result typedOther = (terminateJobs_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(typedOther.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, typedOther.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUe()).compareTo(typedOther.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, typedOther.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNfe()).compareTo(typedOther.isSetNfe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNfe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nfe, typedOther.nfe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTe()).compareTo(typedOther.isSetTe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.te, typedOther.te);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("terminateJobs_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nfe:");
      if (this.nfe == null) {
        sb.append("null");
      } else {
        sb.append(this.nfe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("te:");
      if (this.te == null) {
        sb.append("null");
      } else {
        sb.append(this.te);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class terminateJobs_resultStandardSchemeFactory implements SchemeFactory {
      public terminateJobs_resultStandardScheme getScheme() {
        return new terminateJobs_resultStandardScheme();
      }
    }

    private static class terminateJobs_resultStandardScheme extends StandardScheme<terminateJobs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, terminateJobs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new com.softsec.tase.common.rpc.exception.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new com.softsec.tase.common.rpc.exception.UnavailableException();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NFE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.nfe = new com.softsec.tase.common.rpc.exception.NotFoundException();
                struct.nfe.read(iprot);
                struct.setNfeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.te = new com.softsec.tase.common.rpc.exception.TimeoutException();
                struct.te.read(iprot);
                struct.setTeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, terminateJobs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ue != null) {
          oprot.writeFieldBegin(UE_FIELD_DESC);
          struct.ue.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.nfe != null) {
          oprot.writeFieldBegin(NFE_FIELD_DESC);
          struct.nfe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.te != null) {
          oprot.writeFieldBegin(TE_FIELD_DESC);
          struct.te.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class terminateJobs_resultTupleSchemeFactory implements SchemeFactory {
      public terminateJobs_resultTupleScheme getScheme() {
        return new terminateJobs_resultTupleScheme();
      }
    }

    private static class terminateJobs_resultTupleScheme extends TupleScheme<terminateJobs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, terminateJobs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetUe()) {
          optionals.set(2);
        }
        if (struct.isSetNfe()) {
          optionals.set(3);
        }
        if (struct.isSetTe()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetUe()) {
          struct.ue.write(oprot);
        }
        if (struct.isSetNfe()) {
          struct.nfe.write(oprot);
        }
        if (struct.isSetTe()) {
          struct.te.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, terminateJobs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new com.softsec.tase.common.rpc.exception.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ue = new com.softsec.tase.common.rpc.exception.UnavailableException();
          struct.ue.read(iprot);
          struct.setUeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.nfe = new com.softsec.tase.common.rpc.exception.NotFoundException();
          struct.nfe.read(iprot);
          struct.setNfeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.te = new com.softsec.tase.common.rpc.exception.TimeoutException();
          struct.te.read(iprot);
          struct.setTeIsSet(true);
        }
      }
    }

  }

  public static class obtainQueueInfo_args implements org.apache.thrift.TBase<obtainQueueInfo_args, obtainQueueInfo_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtainQueueInfo_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obtainQueueInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obtainQueueInfo_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtainQueueInfo_args.class, metaDataMap);
    }

    public obtainQueueInfo_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtainQueueInfo_args(obtainQueueInfo_args other) {
    }

    public obtainQueueInfo_args deepCopy() {
      return new obtainQueueInfo_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obtainQueueInfo_args)
        return this.equals((obtainQueueInfo_args)that);
      return false;
    }

    public boolean equals(obtainQueueInfo_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(obtainQueueInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      obtainQueueInfo_args typedOther = (obtainQueueInfo_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obtainQueueInfo_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtainQueueInfo_argsStandardSchemeFactory implements SchemeFactory {
      public obtainQueueInfo_argsStandardScheme getScheme() {
        return new obtainQueueInfo_argsStandardScheme();
      }
    }

    private static class obtainQueueInfo_argsStandardScheme extends StandardScheme<obtainQueueInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtainQueueInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtainQueueInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtainQueueInfo_argsTupleSchemeFactory implements SchemeFactory {
      public obtainQueueInfo_argsTupleScheme getScheme() {
        return new obtainQueueInfo_argsTupleScheme();
      }
    }

    private static class obtainQueueInfo_argsTupleScheme extends TupleScheme<obtainQueueInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtainQueueInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtainQueueInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class obtainQueueInfo_result implements org.apache.thrift.TBase<obtainQueueInfo_result, obtainQueueInfo_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtainQueueInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TE_FIELD_DESC = new org.apache.thrift.protocol.TField("te", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obtainQueueInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obtainQueueInfo_resultTupleSchemeFactory());
    }

    public String success; // required
    public com.softsec.tase.common.rpc.exception.UnavailableException ue; // required
    public com.softsec.tase.common.rpc.exception.TimeoutException te; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      UE((short)1, "ue"),
      TE((short)2, "te");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // UE
            return UE;
          case 2: // TE
            return TE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TE, new org.apache.thrift.meta_data.FieldMetaData("te", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtainQueueInfo_result.class, metaDataMap);
    }

    public obtainQueueInfo_result() {
    }

    public obtainQueueInfo_result(
      String success,
      com.softsec.tase.common.rpc.exception.UnavailableException ue,
      com.softsec.tase.common.rpc.exception.TimeoutException te)
    {
      this();
      this.success = success;
      this.ue = ue;
      this.te = te;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtainQueueInfo_result(obtainQueueInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetUe()) {
        this.ue = new com.softsec.tase.common.rpc.exception.UnavailableException(other.ue);
      }
      if (other.isSetTe()) {
        this.te = new com.softsec.tase.common.rpc.exception.TimeoutException(other.te);
      }
    }

    public obtainQueueInfo_result deepCopy() {
      return new obtainQueueInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ue = null;
      this.te = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public obtainQueueInfo_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.softsec.tase.common.rpc.exception.UnavailableException getUe() {
      return this.ue;
    }

    public obtainQueueInfo_result setUe(com.softsec.tase.common.rpc.exception.UnavailableException ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public com.softsec.tase.common.rpc.exception.TimeoutException getTe() {
      return this.te;
    }

    public obtainQueueInfo_result setTe(com.softsec.tase.common.rpc.exception.TimeoutException te) {
      this.te = te;
      return this;
    }

    public void unsetTe() {
      this.te = null;
    }

    /** Returns true if field te is set (has been assigned a value) and false otherwise */
    public boolean isSetTe() {
      return this.te != null;
    }

    public void setTeIsSet(boolean value) {
      if (!value) {
        this.te = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((com.softsec.tase.common.rpc.exception.UnavailableException)value);
        }
        break;

      case TE:
        if (value == null) {
          unsetTe();
        } else {
          setTe((com.softsec.tase.common.rpc.exception.TimeoutException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case UE:
        return getUe();

      case TE:
        return getTe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case UE:
        return isSetUe();
      case TE:
        return isSetTe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obtainQueueInfo_result)
        return this.equals((obtainQueueInfo_result)that);
      return false;
    }

    public boolean equals(obtainQueueInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      boolean this_present_te = true && this.isSetTe();
      boolean that_present_te = true && that.isSetTe();
      if (this_present_te || that_present_te) {
        if (!(this_present_te && that_present_te))
          return false;
        if (!this.te.equals(that.te))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(obtainQueueInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      obtainQueueInfo_result typedOther = (obtainQueueInfo_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUe()).compareTo(typedOther.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, typedOther.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTe()).compareTo(typedOther.isSetTe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.te, typedOther.te);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obtainQueueInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("te:");
      if (this.te == null) {
        sb.append("null");
      } else {
        sb.append(this.te);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtainQueueInfo_resultStandardSchemeFactory implements SchemeFactory {
      public obtainQueueInfo_resultStandardScheme getScheme() {
        return new obtainQueueInfo_resultStandardScheme();
      }
    }

    private static class obtainQueueInfo_resultStandardScheme extends StandardScheme<obtainQueueInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtainQueueInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new com.softsec.tase.common.rpc.exception.UnavailableException();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.te = new com.softsec.tase.common.rpc.exception.TimeoutException();
                struct.te.read(iprot);
                struct.setTeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtainQueueInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ue != null) {
          oprot.writeFieldBegin(UE_FIELD_DESC);
          struct.ue.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.te != null) {
          oprot.writeFieldBegin(TE_FIELD_DESC);
          struct.te.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtainQueueInfo_resultTupleSchemeFactory implements SchemeFactory {
      public obtainQueueInfo_resultTupleScheme getScheme() {
        return new obtainQueueInfo_resultTupleScheme();
      }
    }

    private static class obtainQueueInfo_resultTupleScheme extends TupleScheme<obtainQueueInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtainQueueInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUe()) {
          optionals.set(1);
        }
        if (struct.isSetTe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetUe()) {
          struct.ue.write(oprot);
        }
        if (struct.isSetTe()) {
          struct.te.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtainQueueInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ue = new com.softsec.tase.common.rpc.exception.UnavailableException();
          struct.ue.read(iprot);
          struct.setUeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.te = new com.softsec.tase.common.rpc.exception.TimeoutException();
          struct.te.read(iprot);
          struct.setTeIsSet(true);
        }
      }
    }

  }

  public static class obtainClusterStat_args implements org.apache.thrift.TBase<obtainClusterStat_args, obtainClusterStat_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtainClusterStat_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obtainClusterStat_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obtainClusterStat_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtainClusterStat_args.class, metaDataMap);
    }

    public obtainClusterStat_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtainClusterStat_args(obtainClusterStat_args other) {
    }

    public obtainClusterStat_args deepCopy() {
      return new obtainClusterStat_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obtainClusterStat_args)
        return this.equals((obtainClusterStat_args)that);
      return false;
    }

    public boolean equals(obtainClusterStat_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(obtainClusterStat_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      obtainClusterStat_args typedOther = (obtainClusterStat_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obtainClusterStat_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtainClusterStat_argsStandardSchemeFactory implements SchemeFactory {
      public obtainClusterStat_argsStandardScheme getScheme() {
        return new obtainClusterStat_argsStandardScheme();
      }
    }

    private static class obtainClusterStat_argsStandardScheme extends StandardScheme<obtainClusterStat_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtainClusterStat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtainClusterStat_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtainClusterStat_argsTupleSchemeFactory implements SchemeFactory {
      public obtainClusterStat_argsTupleScheme getScheme() {
        return new obtainClusterStat_argsTupleScheme();
      }
    }

    private static class obtainClusterStat_argsTupleScheme extends TupleScheme<obtainClusterStat_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtainClusterStat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtainClusterStat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class obtainClusterStat_result implements org.apache.thrift.TBase<obtainClusterStat_result, obtainClusterStat_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtainClusterStat_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TE_FIELD_DESC = new org.apache.thrift.protocol.TField("te", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obtainClusterStat_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obtainClusterStat_resultTupleSchemeFactory());
    }

    public String success; // required
    public com.softsec.tase.common.rpc.exception.UnavailableException ue; // required
    public com.softsec.tase.common.rpc.exception.TimeoutException te; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      UE((short)1, "ue"),
      TE((short)2, "te");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // UE
            return UE;
          case 2: // TE
            return TE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TE, new org.apache.thrift.meta_data.FieldMetaData("te", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtainClusterStat_result.class, metaDataMap);
    }

    public obtainClusterStat_result() {
    }

    public obtainClusterStat_result(
      String success,
      com.softsec.tase.common.rpc.exception.UnavailableException ue,
      com.softsec.tase.common.rpc.exception.TimeoutException te)
    {
      this();
      this.success = success;
      this.ue = ue;
      this.te = te;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtainClusterStat_result(obtainClusterStat_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetUe()) {
        this.ue = new com.softsec.tase.common.rpc.exception.UnavailableException(other.ue);
      }
      if (other.isSetTe()) {
        this.te = new com.softsec.tase.common.rpc.exception.TimeoutException(other.te);
      }
    }

    public obtainClusterStat_result deepCopy() {
      return new obtainClusterStat_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ue = null;
      this.te = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public obtainClusterStat_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.softsec.tase.common.rpc.exception.UnavailableException getUe() {
      return this.ue;
    }

    public obtainClusterStat_result setUe(com.softsec.tase.common.rpc.exception.UnavailableException ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public com.softsec.tase.common.rpc.exception.TimeoutException getTe() {
      return this.te;
    }

    public obtainClusterStat_result setTe(com.softsec.tase.common.rpc.exception.TimeoutException te) {
      this.te = te;
      return this;
    }

    public void unsetTe() {
      this.te = null;
    }

    /** Returns true if field te is set (has been assigned a value) and false otherwise */
    public boolean isSetTe() {
      return this.te != null;
    }

    public void setTeIsSet(boolean value) {
      if (!value) {
        this.te = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((com.softsec.tase.common.rpc.exception.UnavailableException)value);
        }
        break;

      case TE:
        if (value == null) {
          unsetTe();
        } else {
          setTe((com.softsec.tase.common.rpc.exception.TimeoutException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case UE:
        return getUe();

      case TE:
        return getTe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case UE:
        return isSetUe();
      case TE:
        return isSetTe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obtainClusterStat_result)
        return this.equals((obtainClusterStat_result)that);
      return false;
    }

    public boolean equals(obtainClusterStat_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      boolean this_present_te = true && this.isSetTe();
      boolean that_present_te = true && that.isSetTe();
      if (this_present_te || that_present_te) {
        if (!(this_present_te && that_present_te))
          return false;
        if (!this.te.equals(that.te))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(obtainClusterStat_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      obtainClusterStat_result typedOther = (obtainClusterStat_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUe()).compareTo(typedOther.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, typedOther.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTe()).compareTo(typedOther.isSetTe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.te, typedOther.te);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obtainClusterStat_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("te:");
      if (this.te == null) {
        sb.append("null");
      } else {
        sb.append(this.te);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtainClusterStat_resultStandardSchemeFactory implements SchemeFactory {
      public obtainClusterStat_resultStandardScheme getScheme() {
        return new obtainClusterStat_resultStandardScheme();
      }
    }

    private static class obtainClusterStat_resultStandardScheme extends StandardScheme<obtainClusterStat_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtainClusterStat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new com.softsec.tase.common.rpc.exception.UnavailableException();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.te = new com.softsec.tase.common.rpc.exception.TimeoutException();
                struct.te.read(iprot);
                struct.setTeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtainClusterStat_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ue != null) {
          oprot.writeFieldBegin(UE_FIELD_DESC);
          struct.ue.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.te != null) {
          oprot.writeFieldBegin(TE_FIELD_DESC);
          struct.te.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtainClusterStat_resultTupleSchemeFactory implements SchemeFactory {
      public obtainClusterStat_resultTupleScheme getScheme() {
        return new obtainClusterStat_resultTupleScheme();
      }
    }

    private static class obtainClusterStat_resultTupleScheme extends TupleScheme<obtainClusterStat_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtainClusterStat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUe()) {
          optionals.set(1);
        }
        if (struct.isSetTe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetUe()) {
          struct.ue.write(oprot);
        }
        if (struct.isSetTe()) {
          struct.te.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtainClusterStat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ue = new com.softsec.tase.common.rpc.exception.UnavailableException();
          struct.ue.read(iprot);
          struct.setUeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.te = new com.softsec.tase.common.rpc.exception.TimeoutException();
          struct.te.read(iprot);
          struct.setTeIsSet(true);
        }
      }
    }

  }

}
