/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.softsec.tase.common.rpc.service.task;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class NodeTrackerService {

  /**
   * Node Tracker Service response for RPCs from all nodes
   */
  public interface Iface {

    /**
     * registration of new node
     * @param	nodeInfo
     * @return	succeed or not
     * 
     * @param nodeInfo
     */
    public int registerNode(com.softsec.tase.common.rpc.domain.node.NodeInfo nodeInfo) throws com.softsec.tase.common.rpc.exception.InvalidRequestException, com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException;

    /**
     * report node heart beat
     * @param nodePayload
     * @return succeed or not
     * 
     * @param nodePayload
     */
    public int reportHeartbeat(com.softsec.tase.common.rpc.domain.node.NodePayload nodePayload) throws com.softsec.tase.common.rpc.exception.InvalidRequestException, com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException;

    /**
     * report task execution status
     * @param	taskId
     * @param	taskStatus
     * @return	succeed or not
     * 
     * @param nodeId
     * @param taskId
     * @param taskStatus
     */
    public int reportTaskExecutionStatus(String nodeId, long taskId, com.softsec.tase.common.rpc.domain.job.JobStatus taskStatus) throws com.softsec.tase.common.rpc.exception.InvalidRequestException, com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException;

    /**
     * check app duplication
     * @param	appChecksum
     * 	MD5(storeName + url + version)
     * @return	appId or 0L
     * 
     * @param appType
     * @param originType
     * @param appChecksum
     */
    public long checkAppDuplication(com.softsec.tase.common.rpc.domain.app.AppType appType, com.softsec.tase.common.rpc.domain.app.OriginType originType, String appChecksum) throws com.softsec.tase.common.rpc.exception.InvalidRequestException, com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException;

    /**
     * check file duplication
     * @param fileChecksum
     * @return md5 or null
     * 
     * @param appType
     * @param fileChecksum
     */
    public String checkFileDuplication(com.softsec.tase.common.rpc.domain.app.AppType appType, String fileChecksum) throws com.softsec.tase.common.rpc.exception.InvalidRequestException, com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException;

    /**
     * receive result
     * @param	resultType
     * @param	content
     * @param	md5
     * @param	identifier appId or jobId
     * @return	succeed or not
     * 
     * @param appType
     * @param jobLifecycle
     * @param resultType
     * @param content
     * @param resultChecksum
     * @param taskId
     * @param identifier
     */
    public int submitResult(com.softsec.tase.common.rpc.domain.app.AppType appType, com.softsec.tase.common.rpc.domain.job.JobLifecycle jobLifecycle, com.softsec.tase.common.rpc.domain.job.JobPhase resultType, ByteBuffer content, String resultChecksum, long taskId, String identifier) throws com.softsec.tase.common.rpc.exception.InvalidRequestException, com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException;

    /**
     * transfer data into new db
     * @param	appType
     * @param	appInfo
     * @param	apkInfo
     * @param	imageList
     * @param	result
     * 
     * @param appType
     * @param appInfo
     * @param apkInfo
     * @param imageList
     * @param result
     */
    public int transferData(com.softsec.tase.common.rpc.domain.app.AppType appType, com.softsec.tase.common.rpc.domain.app.AppTransfer appInfo, ByteBuffer apkInfo, List<ByteBuffer> imageList, ByteBuffer result) throws com.softsec.tase.common.rpc.exception.InvalidRequestException, com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void registerNode(com.softsec.tase.common.rpc.domain.node.NodeInfo nodeInfo, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.registerNode_call> resultHandler) throws org.apache.thrift.TException;

    public void reportHeartbeat(com.softsec.tase.common.rpc.domain.node.NodePayload nodePayload, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.reportHeartbeat_call> resultHandler) throws org.apache.thrift.TException;

    public void reportTaskExecutionStatus(String nodeId, long taskId, com.softsec.tase.common.rpc.domain.job.JobStatus taskStatus, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.reportTaskExecutionStatus_call> resultHandler) throws org.apache.thrift.TException;

    public void checkAppDuplication(com.softsec.tase.common.rpc.domain.app.AppType appType, com.softsec.tase.common.rpc.domain.app.OriginType originType, String appChecksum, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.checkAppDuplication_call> resultHandler) throws org.apache.thrift.TException;

    public void checkFileDuplication(com.softsec.tase.common.rpc.domain.app.AppType appType, String fileChecksum, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.checkFileDuplication_call> resultHandler) throws org.apache.thrift.TException;

    public void submitResult(com.softsec.tase.common.rpc.domain.app.AppType appType, com.softsec.tase.common.rpc.domain.job.JobLifecycle jobLifecycle, com.softsec.tase.common.rpc.domain.job.JobPhase resultType, ByteBuffer content, String resultChecksum, long taskId, String identifier, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.submitResult_call> resultHandler) throws org.apache.thrift.TException;

    public void transferData(com.softsec.tase.common.rpc.domain.app.AppType appType, com.softsec.tase.common.rpc.domain.app.AppTransfer appInfo, ByteBuffer apkInfo, List<ByteBuffer> imageList, ByteBuffer result, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.transferData_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public int registerNode(com.softsec.tase.common.rpc.domain.node.NodeInfo nodeInfo) throws com.softsec.tase.common.rpc.exception.InvalidRequestException, com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException
    {
      send_registerNode(nodeInfo);
      return recv_registerNode();
    }

    public void send_registerNode(com.softsec.tase.common.rpc.domain.node.NodeInfo nodeInfo) throws org.apache.thrift.TException
    {
      registerNode_args args = new registerNode_args();
      args.setNodeInfo(nodeInfo);
      sendBase("registerNode", args);
    }

    public int recv_registerNode() throws com.softsec.tase.common.rpc.exception.InvalidRequestException, com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException
    {
      registerNode_result result = new registerNode_result();
      receiveBase(result, "registerNode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      if (result.te != null) {
        throw result.te;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "registerNode failed: unknown result");
    }

    public int reportHeartbeat(com.softsec.tase.common.rpc.domain.node.NodePayload nodePayload) throws com.softsec.tase.common.rpc.exception.InvalidRequestException, com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException
    {
      send_reportHeartbeat(nodePayload);
      return recv_reportHeartbeat();
    }

    public void send_reportHeartbeat(com.softsec.tase.common.rpc.domain.node.NodePayload nodePayload) throws org.apache.thrift.TException
    {
      reportHeartbeat_args args = new reportHeartbeat_args();
      args.setNodePayload(nodePayload);
      sendBase("reportHeartbeat", args);
    }

    public int recv_reportHeartbeat() throws com.softsec.tase.common.rpc.exception.InvalidRequestException, com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException
    {
      reportHeartbeat_result result = new reportHeartbeat_result();
      receiveBase(result, "reportHeartbeat");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      if (result.te != null) {
        throw result.te;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reportHeartbeat failed: unknown result");
    }

    public int reportTaskExecutionStatus(String nodeId, long taskId, com.softsec.tase.common.rpc.domain.job.JobStatus taskStatus) throws com.softsec.tase.common.rpc.exception.InvalidRequestException, com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException
    {
      send_reportTaskExecutionStatus(nodeId, taskId, taskStatus);
      return recv_reportTaskExecutionStatus();
    }

    public void send_reportTaskExecutionStatus(String nodeId, long taskId, com.softsec.tase.common.rpc.domain.job.JobStatus taskStatus) throws org.apache.thrift.TException
    {
      reportTaskExecutionStatus_args args = new reportTaskExecutionStatus_args();
      args.setNodeId(nodeId);
      args.setTaskId(taskId);
      args.setTaskStatus(taskStatus);
      sendBase("reportTaskExecutionStatus", args);
    }

    public int recv_reportTaskExecutionStatus() throws com.softsec.tase.common.rpc.exception.InvalidRequestException, com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException
    {
      reportTaskExecutionStatus_result result = new reportTaskExecutionStatus_result();
      receiveBase(result, "reportTaskExecutionStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      if (result.te != null) {
        throw result.te;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reportTaskExecutionStatus failed: unknown result");
    }

    public long checkAppDuplication(com.softsec.tase.common.rpc.domain.app.AppType appType, com.softsec.tase.common.rpc.domain.app.OriginType originType, String appChecksum) throws com.softsec.tase.common.rpc.exception.InvalidRequestException, com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException
    {
      send_checkAppDuplication(appType, originType, appChecksum);
      return recv_checkAppDuplication();
    }

    public void send_checkAppDuplication(com.softsec.tase.common.rpc.domain.app.AppType appType, com.softsec.tase.common.rpc.domain.app.OriginType originType, String appChecksum) throws org.apache.thrift.TException
    {
      checkAppDuplication_args args = new checkAppDuplication_args();
      args.setAppType(appType);
      args.setOriginType(originType);
      args.setAppChecksum(appChecksum);
      sendBase("checkAppDuplication", args);
    }

    public long recv_checkAppDuplication() throws com.softsec.tase.common.rpc.exception.InvalidRequestException, com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException
    {
      checkAppDuplication_result result = new checkAppDuplication_result();
      receiveBase(result, "checkAppDuplication");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      if (result.te != null) {
        throw result.te;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkAppDuplication failed: unknown result");
    }

    public String checkFileDuplication(com.softsec.tase.common.rpc.domain.app.AppType appType, String fileChecksum) throws com.softsec.tase.common.rpc.exception.InvalidRequestException, com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException
    {
      send_checkFileDuplication(appType, fileChecksum);
      return recv_checkFileDuplication();
    }

    public void send_checkFileDuplication(com.softsec.tase.common.rpc.domain.app.AppType appType, String fileChecksum) throws org.apache.thrift.TException
    {
      checkFileDuplication_args args = new checkFileDuplication_args();
      args.setAppType(appType);
      args.setFileChecksum(fileChecksum);
      sendBase("checkFileDuplication", args);
    }

    public String recv_checkFileDuplication() throws com.softsec.tase.common.rpc.exception.InvalidRequestException, com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException
    {
      checkFileDuplication_result result = new checkFileDuplication_result();
      receiveBase(result, "checkFileDuplication");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      if (result.te != null) {
        throw result.te;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkFileDuplication failed: unknown result");
    }

    public int submitResult(com.softsec.tase.common.rpc.domain.app.AppType appType, com.softsec.tase.common.rpc.domain.job.JobLifecycle jobLifecycle, com.softsec.tase.common.rpc.domain.job.JobPhase resultType, ByteBuffer content, String resultChecksum, long taskId, String identifier) throws com.softsec.tase.common.rpc.exception.InvalidRequestException, com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException
    {
      send_submitResult(appType, jobLifecycle, resultType, content, resultChecksum, taskId, identifier);
      return recv_submitResult();
    }

    public void send_submitResult(com.softsec.tase.common.rpc.domain.app.AppType appType, com.softsec.tase.common.rpc.domain.job.JobLifecycle jobLifecycle, com.softsec.tase.common.rpc.domain.job.JobPhase resultType, ByteBuffer content, String resultChecksum, long taskId, String identifier) throws org.apache.thrift.TException
    {
      submitResult_args args = new submitResult_args();
      args.setAppType(appType);
      args.setJobLifecycle(jobLifecycle);
      args.setResultType(resultType);
      args.setContent(content);
      args.setResultChecksum(resultChecksum);
      args.setTaskId(taskId);
      args.setIdentifier(identifier);
      sendBase("submitResult", args);
    }

    public int recv_submitResult() throws com.softsec.tase.common.rpc.exception.InvalidRequestException, com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException
    {
      submitResult_result result = new submitResult_result();
      receiveBase(result, "submitResult");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      if (result.te != null) {
        throw result.te;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "submitResult failed: unknown result");
    }

    public int transferData(com.softsec.tase.common.rpc.domain.app.AppType appType, com.softsec.tase.common.rpc.domain.app.AppTransfer appInfo, ByteBuffer apkInfo, List<ByteBuffer> imageList, ByteBuffer result) throws com.softsec.tase.common.rpc.exception.InvalidRequestException, com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException
    {
      send_transferData(appType, appInfo, apkInfo, imageList, result);
      return recv_transferData();
    }

    public void send_transferData(com.softsec.tase.common.rpc.domain.app.AppType appType, com.softsec.tase.common.rpc.domain.app.AppTransfer appInfo, ByteBuffer apkInfo, List<ByteBuffer> imageList, ByteBuffer result) throws org.apache.thrift.TException
    {
      transferData_args args = new transferData_args();
      args.setAppType(appType);
      args.setAppInfo(appInfo);
      args.setApkInfo(apkInfo);
      args.setImageList(imageList);
      args.setResult(result);
      sendBase("transferData", args);
    }

    public int recv_transferData() throws com.softsec.tase.common.rpc.exception.InvalidRequestException, com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException
    {
      transferData_result result = new transferData_result();
      receiveBase(result, "transferData");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      if (result.te != null) {
        throw result.te;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "transferData failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void registerNode(com.softsec.tase.common.rpc.domain.node.NodeInfo nodeInfo, org.apache.thrift.async.AsyncMethodCallback<registerNode_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      registerNode_call method_call = new registerNode_call(nodeInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class registerNode_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.softsec.tase.common.rpc.domain.node.NodeInfo nodeInfo;
      public registerNode_call(com.softsec.tase.common.rpc.domain.node.NodeInfo nodeInfo, org.apache.thrift.async.AsyncMethodCallback<registerNode_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nodeInfo = nodeInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("registerNode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        registerNode_args args = new registerNode_args();
        args.setNodeInfo(nodeInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.softsec.tase.common.rpc.exception.InvalidRequestException, com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_registerNode();
      }
    }

    public void reportHeartbeat(com.softsec.tase.common.rpc.domain.node.NodePayload nodePayload, org.apache.thrift.async.AsyncMethodCallback<reportHeartbeat_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reportHeartbeat_call method_call = new reportHeartbeat_call(nodePayload, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reportHeartbeat_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.softsec.tase.common.rpc.domain.node.NodePayload nodePayload;
      public reportHeartbeat_call(com.softsec.tase.common.rpc.domain.node.NodePayload nodePayload, org.apache.thrift.async.AsyncMethodCallback<reportHeartbeat_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nodePayload = nodePayload;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reportHeartbeat", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reportHeartbeat_args args = new reportHeartbeat_args();
        args.setNodePayload(nodePayload);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.softsec.tase.common.rpc.exception.InvalidRequestException, com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reportHeartbeat();
      }
    }

    public void reportTaskExecutionStatus(String nodeId, long taskId, com.softsec.tase.common.rpc.domain.job.JobStatus taskStatus, org.apache.thrift.async.AsyncMethodCallback<reportTaskExecutionStatus_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reportTaskExecutionStatus_call method_call = new reportTaskExecutionStatus_call(nodeId, taskId, taskStatus, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reportTaskExecutionStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String nodeId;
      private long taskId;
      private com.softsec.tase.common.rpc.domain.job.JobStatus taskStatus;
      public reportTaskExecutionStatus_call(String nodeId, long taskId, com.softsec.tase.common.rpc.domain.job.JobStatus taskStatus, org.apache.thrift.async.AsyncMethodCallback<reportTaskExecutionStatus_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nodeId = nodeId;
        this.taskId = taskId;
        this.taskStatus = taskStatus;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reportTaskExecutionStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reportTaskExecutionStatus_args args = new reportTaskExecutionStatus_args();
        args.setNodeId(nodeId);
        args.setTaskId(taskId);
        args.setTaskStatus(taskStatus);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.softsec.tase.common.rpc.exception.InvalidRequestException, com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reportTaskExecutionStatus();
      }
    }

    public void checkAppDuplication(com.softsec.tase.common.rpc.domain.app.AppType appType, com.softsec.tase.common.rpc.domain.app.OriginType originType, String appChecksum, org.apache.thrift.async.AsyncMethodCallback<checkAppDuplication_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkAppDuplication_call method_call = new checkAppDuplication_call(appType, originType, appChecksum, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkAppDuplication_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.softsec.tase.common.rpc.domain.app.AppType appType;
      private com.softsec.tase.common.rpc.domain.app.OriginType originType;
      private String appChecksum;
      public checkAppDuplication_call(com.softsec.tase.common.rpc.domain.app.AppType appType, com.softsec.tase.common.rpc.domain.app.OriginType originType, String appChecksum, org.apache.thrift.async.AsyncMethodCallback<checkAppDuplication_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appType = appType;
        this.originType = originType;
        this.appChecksum = appChecksum;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkAppDuplication", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkAppDuplication_args args = new checkAppDuplication_args();
        args.setAppType(appType);
        args.setOriginType(originType);
        args.setAppChecksum(appChecksum);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws com.softsec.tase.common.rpc.exception.InvalidRequestException, com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkAppDuplication();
      }
    }

    public void checkFileDuplication(com.softsec.tase.common.rpc.domain.app.AppType appType, String fileChecksum, org.apache.thrift.async.AsyncMethodCallback<checkFileDuplication_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkFileDuplication_call method_call = new checkFileDuplication_call(appType, fileChecksum, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkFileDuplication_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.softsec.tase.common.rpc.domain.app.AppType appType;
      private String fileChecksum;
      public checkFileDuplication_call(com.softsec.tase.common.rpc.domain.app.AppType appType, String fileChecksum, org.apache.thrift.async.AsyncMethodCallback<checkFileDuplication_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appType = appType;
        this.fileChecksum = fileChecksum;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkFileDuplication", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkFileDuplication_args args = new checkFileDuplication_args();
        args.setAppType(appType);
        args.setFileChecksum(fileChecksum);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws com.softsec.tase.common.rpc.exception.InvalidRequestException, com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkFileDuplication();
      }
    }

    public void submitResult(com.softsec.tase.common.rpc.domain.app.AppType appType, com.softsec.tase.common.rpc.domain.job.JobLifecycle jobLifecycle, com.softsec.tase.common.rpc.domain.job.JobPhase resultType, ByteBuffer content, String resultChecksum, long taskId, String identifier, org.apache.thrift.async.AsyncMethodCallback<submitResult_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      submitResult_call method_call = new submitResult_call(appType, jobLifecycle, resultType, content, resultChecksum, taskId, identifier, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class submitResult_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.softsec.tase.common.rpc.domain.app.AppType appType;
      private com.softsec.tase.common.rpc.domain.job.JobLifecycle jobLifecycle;
      private com.softsec.tase.common.rpc.domain.job.JobPhase resultType;
      private ByteBuffer content;
      private String resultChecksum;
      private long taskId;
      private String identifier;
      public submitResult_call(com.softsec.tase.common.rpc.domain.app.AppType appType, com.softsec.tase.common.rpc.domain.job.JobLifecycle jobLifecycle, com.softsec.tase.common.rpc.domain.job.JobPhase resultType, ByteBuffer content, String resultChecksum, long taskId, String identifier, org.apache.thrift.async.AsyncMethodCallback<submitResult_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appType = appType;
        this.jobLifecycle = jobLifecycle;
        this.resultType = resultType;
        this.content = content;
        this.resultChecksum = resultChecksum;
        this.taskId = taskId;
        this.identifier = identifier;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("submitResult", org.apache.thrift.protocol.TMessageType.CALL, 0));
        submitResult_args args = new submitResult_args();
        args.setAppType(appType);
        args.setJobLifecycle(jobLifecycle);
        args.setResultType(resultType);
        args.setContent(content);
        args.setResultChecksum(resultChecksum);
        args.setTaskId(taskId);
        args.setIdentifier(identifier);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.softsec.tase.common.rpc.exception.InvalidRequestException, com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_submitResult();
      }
    }

    public void transferData(com.softsec.tase.common.rpc.domain.app.AppType appType, com.softsec.tase.common.rpc.domain.app.AppTransfer appInfo, ByteBuffer apkInfo, List<ByteBuffer> imageList, ByteBuffer result, org.apache.thrift.async.AsyncMethodCallback<transferData_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      transferData_call method_call = new transferData_call(appType, appInfo, apkInfo, imageList, result, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class transferData_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.softsec.tase.common.rpc.domain.app.AppType appType;
      private com.softsec.tase.common.rpc.domain.app.AppTransfer appInfo;
      private ByteBuffer apkInfo;
      private List<ByteBuffer> imageList;
      private ByteBuffer result;
      public transferData_call(com.softsec.tase.common.rpc.domain.app.AppType appType, com.softsec.tase.common.rpc.domain.app.AppTransfer appInfo, ByteBuffer apkInfo, List<ByteBuffer> imageList, ByteBuffer result, org.apache.thrift.async.AsyncMethodCallback<transferData_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appType = appType;
        this.appInfo = appInfo;
        this.apkInfo = apkInfo;
        this.imageList = imageList;
        this.result = result;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("transferData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        transferData_args args = new transferData_args();
        args.setAppType(appType);
        args.setAppInfo(appInfo);
        args.setApkInfo(apkInfo);
        args.setImageList(imageList);
        args.setResult(result);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.softsec.tase.common.rpc.exception.InvalidRequestException, com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_transferData();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("registerNode", new registerNode());
      processMap.put("reportHeartbeat", new reportHeartbeat());
      processMap.put("reportTaskExecutionStatus", new reportTaskExecutionStatus());
      processMap.put("checkAppDuplication", new checkAppDuplication());
      processMap.put("checkFileDuplication", new checkFileDuplication());
      processMap.put("submitResult", new submitResult());
      processMap.put("transferData", new transferData());
      return processMap;
    }

    public static class registerNode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, registerNode_args> {
      public registerNode() {
        super("registerNode");
      }

      public registerNode_args getEmptyArgsInstance() {
        return new registerNode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public registerNode_result getResult(I iface, registerNode_args args) throws org.apache.thrift.TException {
        registerNode_result result = new registerNode_result();
        try {
          result.success = iface.registerNode(args.nodeInfo);
          result.setSuccessIsSet(true);
        } catch (com.softsec.tase.common.rpc.exception.InvalidRequestException ire) {
          result.ire = ire;
        } catch (com.softsec.tase.common.rpc.exception.UnavailableException ue) {
          result.ue = ue;
        } catch (com.softsec.tase.common.rpc.exception.TimeoutException te) {
          result.te = te;
        }
        return result;
      }
    }

    public static class reportHeartbeat<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reportHeartbeat_args> {
      public reportHeartbeat() {
        super("reportHeartbeat");
      }

      public reportHeartbeat_args getEmptyArgsInstance() {
        return new reportHeartbeat_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reportHeartbeat_result getResult(I iface, reportHeartbeat_args args) throws org.apache.thrift.TException {
        reportHeartbeat_result result = new reportHeartbeat_result();
        try {
          result.success = iface.reportHeartbeat(args.nodePayload);
          result.setSuccessIsSet(true);
        } catch (com.softsec.tase.common.rpc.exception.InvalidRequestException ire) {
          result.ire = ire;
        } catch (com.softsec.tase.common.rpc.exception.UnavailableException ue) {
          result.ue = ue;
        } catch (com.softsec.tase.common.rpc.exception.TimeoutException te) {
          result.te = te;
        }
        return result;
      }
    }

    public static class reportTaskExecutionStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reportTaskExecutionStatus_args> {
      public reportTaskExecutionStatus() {
        super("reportTaskExecutionStatus");
      }

      public reportTaskExecutionStatus_args getEmptyArgsInstance() {
        return new reportTaskExecutionStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reportTaskExecutionStatus_result getResult(I iface, reportTaskExecutionStatus_args args) throws org.apache.thrift.TException {
        reportTaskExecutionStatus_result result = new reportTaskExecutionStatus_result();
        try {
          result.success = iface.reportTaskExecutionStatus(args.nodeId, args.taskId, args.taskStatus);
          result.setSuccessIsSet(true);
        } catch (com.softsec.tase.common.rpc.exception.InvalidRequestException ire) {
          result.ire = ire;
        } catch (com.softsec.tase.common.rpc.exception.UnavailableException ue) {
          result.ue = ue;
        } catch (com.softsec.tase.common.rpc.exception.TimeoutException te) {
          result.te = te;
        }
        return result;
      }
    }

    public static class checkAppDuplication<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkAppDuplication_args> {
      public checkAppDuplication() {
        super("checkAppDuplication");
      }

      public checkAppDuplication_args getEmptyArgsInstance() {
        return new checkAppDuplication_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checkAppDuplication_result getResult(I iface, checkAppDuplication_args args) throws org.apache.thrift.TException {
        checkAppDuplication_result result = new checkAppDuplication_result();
        try {
          result.success = iface.checkAppDuplication(args.appType, args.originType, args.appChecksum);
          result.setSuccessIsSet(true);
        } catch (com.softsec.tase.common.rpc.exception.InvalidRequestException ire) {
          result.ire = ire;
        } catch (com.softsec.tase.common.rpc.exception.UnavailableException ue) {
          result.ue = ue;
        } catch (com.softsec.tase.common.rpc.exception.TimeoutException te) {
          result.te = te;
        }
        return result;
      }
    }

    public static class checkFileDuplication<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkFileDuplication_args> {
      public checkFileDuplication() {
        super("checkFileDuplication");
      }

      public checkFileDuplication_args getEmptyArgsInstance() {
        return new checkFileDuplication_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checkFileDuplication_result getResult(I iface, checkFileDuplication_args args) throws org.apache.thrift.TException {
        checkFileDuplication_result result = new checkFileDuplication_result();
        try {
          result.success = iface.checkFileDuplication(args.appType, args.fileChecksum);
        } catch (com.softsec.tase.common.rpc.exception.InvalidRequestException ire) {
          result.ire = ire;
        } catch (com.softsec.tase.common.rpc.exception.UnavailableException ue) {
          result.ue = ue;
        } catch (com.softsec.tase.common.rpc.exception.TimeoutException te) {
          result.te = te;
        }
        return result;
      }
    }

    public static class submitResult<I extends Iface> extends org.apache.thrift.ProcessFunction<I, submitResult_args> {
      public submitResult() {
        super("submitResult");
      }

      public submitResult_args getEmptyArgsInstance() {
        return new submitResult_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public submitResult_result getResult(I iface, submitResult_args args) throws org.apache.thrift.TException {
        submitResult_result result = new submitResult_result();
        try {
          result.success = iface.submitResult(args.appType, args.jobLifecycle, args.resultType, args.content, args.resultChecksum, args.taskId, args.identifier);
          result.setSuccessIsSet(true);
        } catch (com.softsec.tase.common.rpc.exception.InvalidRequestException ire) {
          result.ire = ire;
        } catch (com.softsec.tase.common.rpc.exception.UnavailableException ue) {
          result.ue = ue;
        } catch (com.softsec.tase.common.rpc.exception.TimeoutException te) {
          result.te = te;
        }
        return result;
      }
    }

    public static class transferData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, transferData_args> {
      public transferData() {
        super("transferData");
      }

      public transferData_args getEmptyArgsInstance() {
        return new transferData_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public transferData_result getResult(I iface, transferData_args args) throws org.apache.thrift.TException {
        transferData_result result = new transferData_result();
        try {
          result.success = iface.transferData(args.appType, args.appInfo, args.apkInfo, args.imageList, args.result);
          result.setSuccessIsSet(true);
        } catch (com.softsec.tase.common.rpc.exception.InvalidRequestException ire) {
          result.ire = ire;
        } catch (com.softsec.tase.common.rpc.exception.UnavailableException ue) {
          result.ue = ue;
        } catch (com.softsec.tase.common.rpc.exception.TimeoutException te) {
          result.te = te;
        }
        return result;
      }
    }

  }

  public static class registerNode_args implements org.apache.thrift.TBase<registerNode_args, registerNode_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerNode_args");

    private static final org.apache.thrift.protocol.TField NODE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerNode_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerNode_argsTupleSchemeFactory());
    }

    public com.softsec.tase.common.rpc.domain.node.NodeInfo nodeInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NODE_INFO((short)1, "nodeInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NODE_INFO
            return NODE_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NODE_INFO, new org.apache.thrift.meta_data.FieldMetaData("nodeInfo", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.softsec.tase.common.rpc.domain.node.NodeInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerNode_args.class, metaDataMap);
    }

    public registerNode_args() {
    }

    public registerNode_args(
      com.softsec.tase.common.rpc.domain.node.NodeInfo nodeInfo)
    {
      this();
      this.nodeInfo = nodeInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerNode_args(registerNode_args other) {
      if (other.isSetNodeInfo()) {
        this.nodeInfo = new com.softsec.tase.common.rpc.domain.node.NodeInfo(other.nodeInfo);
      }
    }

    public registerNode_args deepCopy() {
      return new registerNode_args(this);
    }

    @Override
    public void clear() {
      this.nodeInfo = null;
    }

    public com.softsec.tase.common.rpc.domain.node.NodeInfo getNodeInfo() {
      return this.nodeInfo;
    }

    public registerNode_args setNodeInfo(com.softsec.tase.common.rpc.domain.node.NodeInfo nodeInfo) {
      this.nodeInfo = nodeInfo;
      return this;
    }

    public void unsetNodeInfo() {
      this.nodeInfo = null;
    }

    /** Returns true if field nodeInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeInfo() {
      return this.nodeInfo != null;
    }

    public void setNodeInfoIsSet(boolean value) {
      if (!value) {
        this.nodeInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NODE_INFO:
        if (value == null) {
          unsetNodeInfo();
        } else {
          setNodeInfo((com.softsec.tase.common.rpc.domain.node.NodeInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NODE_INFO:
        return getNodeInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NODE_INFO:
        return isSetNodeInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerNode_args)
        return this.equals((registerNode_args)that);
      return false;
    }

    public boolean equals(registerNode_args that) {
      if (that == null)
        return false;

      boolean this_present_nodeInfo = true && this.isSetNodeInfo();
      boolean that_present_nodeInfo = true && that.isSetNodeInfo();
      if (this_present_nodeInfo || that_present_nodeInfo) {
        if (!(this_present_nodeInfo && that_present_nodeInfo))
          return false;
        if (!this.nodeInfo.equals(that.nodeInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(registerNode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      registerNode_args typedOther = (registerNode_args)other;

      lastComparison = Boolean.valueOf(isSetNodeInfo()).compareTo(typedOther.isSetNodeInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeInfo, typedOther.nodeInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerNode_args(");
      boolean first = true;

      sb.append("nodeInfo:");
      if (this.nodeInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (nodeInfo == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'nodeInfo' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (nodeInfo != null) {
        nodeInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerNode_argsStandardSchemeFactory implements SchemeFactory {
      public registerNode_argsStandardScheme getScheme() {
        return new registerNode_argsStandardScheme();
      }
    }

    private static class registerNode_argsStandardScheme extends StandardScheme<registerNode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerNode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NODE_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.nodeInfo = new com.softsec.tase.common.rpc.domain.node.NodeInfo();
                struct.nodeInfo.read(iprot);
                struct.setNodeInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerNode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.nodeInfo != null) {
          oprot.writeFieldBegin(NODE_INFO_FIELD_DESC);
          struct.nodeInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerNode_argsTupleSchemeFactory implements SchemeFactory {
      public registerNode_argsTupleScheme getScheme() {
        return new registerNode_argsTupleScheme();
      }
    }

    private static class registerNode_argsTupleScheme extends TupleScheme<registerNode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerNode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.nodeInfo.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerNode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.nodeInfo = new com.softsec.tase.common.rpc.domain.node.NodeInfo();
        struct.nodeInfo.read(iprot);
        struct.setNodeInfoIsSet(true);
      }
    }

  }

  public static class registerNode_result implements org.apache.thrift.TBase<registerNode_result, registerNode_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerNode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField TE_FIELD_DESC = new org.apache.thrift.protocol.TField("te", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerNode_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerNode_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.softsec.tase.common.rpc.exception.InvalidRequestException ire; // required
    public com.softsec.tase.common.rpc.exception.UnavailableException ue; // required
    public com.softsec.tase.common.rpc.exception.TimeoutException te; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      UE((short)2, "ue"),
      TE((short)3, "te");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // UE
            return UE;
          case 3: // TE
            return TE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TE, new org.apache.thrift.meta_data.FieldMetaData("te", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerNode_result.class, metaDataMap);
    }

    public registerNode_result() {
    }

    public registerNode_result(
      int success,
      com.softsec.tase.common.rpc.exception.InvalidRequestException ire,
      com.softsec.tase.common.rpc.exception.UnavailableException ue,
      com.softsec.tase.common.rpc.exception.TimeoutException te)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ire = ire;
      this.ue = ue;
      this.te = te;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerNode_result(registerNode_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIre()) {
        this.ire = new com.softsec.tase.common.rpc.exception.InvalidRequestException(other.ire);
      }
      if (other.isSetUe()) {
        this.ue = new com.softsec.tase.common.rpc.exception.UnavailableException(other.ue);
      }
      if (other.isSetTe()) {
        this.te = new com.softsec.tase.common.rpc.exception.TimeoutException(other.te);
      }
    }

    public registerNode_result deepCopy() {
      return new registerNode_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ire = null;
      this.ue = null;
      this.te = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public registerNode_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.softsec.tase.common.rpc.exception.InvalidRequestException getIre() {
      return this.ire;
    }

    public registerNode_result setIre(com.softsec.tase.common.rpc.exception.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public com.softsec.tase.common.rpc.exception.UnavailableException getUe() {
      return this.ue;
    }

    public registerNode_result setUe(com.softsec.tase.common.rpc.exception.UnavailableException ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public com.softsec.tase.common.rpc.exception.TimeoutException getTe() {
      return this.te;
    }

    public registerNode_result setTe(com.softsec.tase.common.rpc.exception.TimeoutException te) {
      this.te = te;
      return this;
    }

    public void unsetTe() {
      this.te = null;
    }

    /** Returns true if field te is set (has been assigned a value) and false otherwise */
    public boolean isSetTe() {
      return this.te != null;
    }

    public void setTeIsSet(boolean value) {
      if (!value) {
        this.te = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((com.softsec.tase.common.rpc.exception.InvalidRequestException)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((com.softsec.tase.common.rpc.exception.UnavailableException)value);
        }
        break;

      case TE:
        if (value == null) {
          unsetTe();
        } else {
          setTe((com.softsec.tase.common.rpc.exception.TimeoutException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case IRE:
        return getIre();

      case UE:
        return getUe();

      case TE:
        return getTe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case UE:
        return isSetUe();
      case TE:
        return isSetTe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerNode_result)
        return this.equals((registerNode_result)that);
      return false;
    }

    public boolean equals(registerNode_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      boolean this_present_te = true && this.isSetTe();
      boolean that_present_te = true && that.isSetTe();
      if (this_present_te || that_present_te) {
        if (!(this_present_te && that_present_te))
          return false;
        if (!this.te.equals(that.te))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(registerNode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      registerNode_result typedOther = (registerNode_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(typedOther.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, typedOther.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUe()).compareTo(typedOther.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, typedOther.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTe()).compareTo(typedOther.isSetTe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.te, typedOther.te);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerNode_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("te:");
      if (this.te == null) {
        sb.append("null");
      } else {
        sb.append(this.te);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerNode_resultStandardSchemeFactory implements SchemeFactory {
      public registerNode_resultStandardScheme getScheme() {
        return new registerNode_resultStandardScheme();
      }
    }

    private static class registerNode_resultStandardScheme extends StandardScheme<registerNode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerNode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new com.softsec.tase.common.rpc.exception.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new com.softsec.tase.common.rpc.exception.UnavailableException();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.te = new com.softsec.tase.common.rpc.exception.TimeoutException();
                struct.te.read(iprot);
                struct.setTeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerNode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ue != null) {
          oprot.writeFieldBegin(UE_FIELD_DESC);
          struct.ue.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.te != null) {
          oprot.writeFieldBegin(TE_FIELD_DESC);
          struct.te.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerNode_resultTupleSchemeFactory implements SchemeFactory {
      public registerNode_resultTupleScheme getScheme() {
        return new registerNode_resultTupleScheme();
      }
    }

    private static class registerNode_resultTupleScheme extends TupleScheme<registerNode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerNode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetUe()) {
          optionals.set(2);
        }
        if (struct.isSetTe()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetUe()) {
          struct.ue.write(oprot);
        }
        if (struct.isSetTe()) {
          struct.te.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerNode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new com.softsec.tase.common.rpc.exception.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ue = new com.softsec.tase.common.rpc.exception.UnavailableException();
          struct.ue.read(iprot);
          struct.setUeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.te = new com.softsec.tase.common.rpc.exception.TimeoutException();
          struct.te.read(iprot);
          struct.setTeIsSet(true);
        }
      }
    }

  }

  public static class reportHeartbeat_args implements org.apache.thrift.TBase<reportHeartbeat_args, reportHeartbeat_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reportHeartbeat_args");

    private static final org.apache.thrift.protocol.TField NODE_PAYLOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("nodePayload", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reportHeartbeat_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reportHeartbeat_argsTupleSchemeFactory());
    }

    public com.softsec.tase.common.rpc.domain.node.NodePayload nodePayload; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NODE_PAYLOAD((short)1, "nodePayload");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NODE_PAYLOAD
            return NODE_PAYLOAD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NODE_PAYLOAD, new org.apache.thrift.meta_data.FieldMetaData("nodePayload", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.softsec.tase.common.rpc.domain.node.NodePayload.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reportHeartbeat_args.class, metaDataMap);
    }

    public reportHeartbeat_args() {
    }

    public reportHeartbeat_args(
      com.softsec.tase.common.rpc.domain.node.NodePayload nodePayload)
    {
      this();
      this.nodePayload = nodePayload;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reportHeartbeat_args(reportHeartbeat_args other) {
      if (other.isSetNodePayload()) {
        this.nodePayload = new com.softsec.tase.common.rpc.domain.node.NodePayload(other.nodePayload);
      }
    }

    public reportHeartbeat_args deepCopy() {
      return new reportHeartbeat_args(this);
    }

    @Override
    public void clear() {
      this.nodePayload = null;
    }

    public com.softsec.tase.common.rpc.domain.node.NodePayload getNodePayload() {
      return this.nodePayload;
    }

    public reportHeartbeat_args setNodePayload(com.softsec.tase.common.rpc.domain.node.NodePayload nodePayload) {
      this.nodePayload = nodePayload;
      return this;
    }

    public void unsetNodePayload() {
      this.nodePayload = null;
    }

    /** Returns true if field nodePayload is set (has been assigned a value) and false otherwise */
    public boolean isSetNodePayload() {
      return this.nodePayload != null;
    }

    public void setNodePayloadIsSet(boolean value) {
      if (!value) {
        this.nodePayload = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NODE_PAYLOAD:
        if (value == null) {
          unsetNodePayload();
        } else {
          setNodePayload((com.softsec.tase.common.rpc.domain.node.NodePayload)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NODE_PAYLOAD:
        return getNodePayload();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NODE_PAYLOAD:
        return isSetNodePayload();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reportHeartbeat_args)
        return this.equals((reportHeartbeat_args)that);
      return false;
    }

    public boolean equals(reportHeartbeat_args that) {
      if (that == null)
        return false;

      boolean this_present_nodePayload = true && this.isSetNodePayload();
      boolean that_present_nodePayload = true && that.isSetNodePayload();
      if (this_present_nodePayload || that_present_nodePayload) {
        if (!(this_present_nodePayload && that_present_nodePayload))
          return false;
        if (!this.nodePayload.equals(that.nodePayload))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(reportHeartbeat_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      reportHeartbeat_args typedOther = (reportHeartbeat_args)other;

      lastComparison = Boolean.valueOf(isSetNodePayload()).compareTo(typedOther.isSetNodePayload());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodePayload()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodePayload, typedOther.nodePayload);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reportHeartbeat_args(");
      boolean first = true;

      sb.append("nodePayload:");
      if (this.nodePayload == null) {
        sb.append("null");
      } else {
        sb.append(this.nodePayload);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (nodePayload == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'nodePayload' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (nodePayload != null) {
        nodePayload.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reportHeartbeat_argsStandardSchemeFactory implements SchemeFactory {
      public reportHeartbeat_argsStandardScheme getScheme() {
        return new reportHeartbeat_argsStandardScheme();
      }
    }

    private static class reportHeartbeat_argsStandardScheme extends StandardScheme<reportHeartbeat_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reportHeartbeat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NODE_PAYLOAD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.nodePayload = new com.softsec.tase.common.rpc.domain.node.NodePayload();
                struct.nodePayload.read(iprot);
                struct.setNodePayloadIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reportHeartbeat_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.nodePayload != null) {
          oprot.writeFieldBegin(NODE_PAYLOAD_FIELD_DESC);
          struct.nodePayload.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reportHeartbeat_argsTupleSchemeFactory implements SchemeFactory {
      public reportHeartbeat_argsTupleScheme getScheme() {
        return new reportHeartbeat_argsTupleScheme();
      }
    }

    private static class reportHeartbeat_argsTupleScheme extends TupleScheme<reportHeartbeat_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reportHeartbeat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.nodePayload.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reportHeartbeat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.nodePayload = new com.softsec.tase.common.rpc.domain.node.NodePayload();
        struct.nodePayload.read(iprot);
        struct.setNodePayloadIsSet(true);
      }
    }

  }

  public static class reportHeartbeat_result implements org.apache.thrift.TBase<reportHeartbeat_result, reportHeartbeat_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reportHeartbeat_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField TE_FIELD_DESC = new org.apache.thrift.protocol.TField("te", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reportHeartbeat_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reportHeartbeat_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.softsec.tase.common.rpc.exception.InvalidRequestException ire; // required
    public com.softsec.tase.common.rpc.exception.UnavailableException ue; // required
    public com.softsec.tase.common.rpc.exception.TimeoutException te; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      UE((short)2, "ue"),
      TE((short)3, "te");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // UE
            return UE;
          case 3: // TE
            return TE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TE, new org.apache.thrift.meta_data.FieldMetaData("te", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reportHeartbeat_result.class, metaDataMap);
    }

    public reportHeartbeat_result() {
    }

    public reportHeartbeat_result(
      int success,
      com.softsec.tase.common.rpc.exception.InvalidRequestException ire,
      com.softsec.tase.common.rpc.exception.UnavailableException ue,
      com.softsec.tase.common.rpc.exception.TimeoutException te)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ire = ire;
      this.ue = ue;
      this.te = te;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reportHeartbeat_result(reportHeartbeat_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIre()) {
        this.ire = new com.softsec.tase.common.rpc.exception.InvalidRequestException(other.ire);
      }
      if (other.isSetUe()) {
        this.ue = new com.softsec.tase.common.rpc.exception.UnavailableException(other.ue);
      }
      if (other.isSetTe()) {
        this.te = new com.softsec.tase.common.rpc.exception.TimeoutException(other.te);
      }
    }

    public reportHeartbeat_result deepCopy() {
      return new reportHeartbeat_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ire = null;
      this.ue = null;
      this.te = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public reportHeartbeat_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.softsec.tase.common.rpc.exception.InvalidRequestException getIre() {
      return this.ire;
    }

    public reportHeartbeat_result setIre(com.softsec.tase.common.rpc.exception.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public com.softsec.tase.common.rpc.exception.UnavailableException getUe() {
      return this.ue;
    }

    public reportHeartbeat_result setUe(com.softsec.tase.common.rpc.exception.UnavailableException ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public com.softsec.tase.common.rpc.exception.TimeoutException getTe() {
      return this.te;
    }

    public reportHeartbeat_result setTe(com.softsec.tase.common.rpc.exception.TimeoutException te) {
      this.te = te;
      return this;
    }

    public void unsetTe() {
      this.te = null;
    }

    /** Returns true if field te is set (has been assigned a value) and false otherwise */
    public boolean isSetTe() {
      return this.te != null;
    }

    public void setTeIsSet(boolean value) {
      if (!value) {
        this.te = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((com.softsec.tase.common.rpc.exception.InvalidRequestException)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((com.softsec.tase.common.rpc.exception.UnavailableException)value);
        }
        break;

      case TE:
        if (value == null) {
          unsetTe();
        } else {
          setTe((com.softsec.tase.common.rpc.exception.TimeoutException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case IRE:
        return getIre();

      case UE:
        return getUe();

      case TE:
        return getTe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case UE:
        return isSetUe();
      case TE:
        return isSetTe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reportHeartbeat_result)
        return this.equals((reportHeartbeat_result)that);
      return false;
    }

    public boolean equals(reportHeartbeat_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      boolean this_present_te = true && this.isSetTe();
      boolean that_present_te = true && that.isSetTe();
      if (this_present_te || that_present_te) {
        if (!(this_present_te && that_present_te))
          return false;
        if (!this.te.equals(that.te))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(reportHeartbeat_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      reportHeartbeat_result typedOther = (reportHeartbeat_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(typedOther.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, typedOther.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUe()).compareTo(typedOther.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, typedOther.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTe()).compareTo(typedOther.isSetTe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.te, typedOther.te);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reportHeartbeat_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("te:");
      if (this.te == null) {
        sb.append("null");
      } else {
        sb.append(this.te);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reportHeartbeat_resultStandardSchemeFactory implements SchemeFactory {
      public reportHeartbeat_resultStandardScheme getScheme() {
        return new reportHeartbeat_resultStandardScheme();
      }
    }

    private static class reportHeartbeat_resultStandardScheme extends StandardScheme<reportHeartbeat_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reportHeartbeat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new com.softsec.tase.common.rpc.exception.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new com.softsec.tase.common.rpc.exception.UnavailableException();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.te = new com.softsec.tase.common.rpc.exception.TimeoutException();
                struct.te.read(iprot);
                struct.setTeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reportHeartbeat_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ue != null) {
          oprot.writeFieldBegin(UE_FIELD_DESC);
          struct.ue.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.te != null) {
          oprot.writeFieldBegin(TE_FIELD_DESC);
          struct.te.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reportHeartbeat_resultTupleSchemeFactory implements SchemeFactory {
      public reportHeartbeat_resultTupleScheme getScheme() {
        return new reportHeartbeat_resultTupleScheme();
      }
    }

    private static class reportHeartbeat_resultTupleScheme extends TupleScheme<reportHeartbeat_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reportHeartbeat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetUe()) {
          optionals.set(2);
        }
        if (struct.isSetTe()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetUe()) {
          struct.ue.write(oprot);
        }
        if (struct.isSetTe()) {
          struct.te.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reportHeartbeat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new com.softsec.tase.common.rpc.exception.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ue = new com.softsec.tase.common.rpc.exception.UnavailableException();
          struct.ue.read(iprot);
          struct.setUeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.te = new com.softsec.tase.common.rpc.exception.TimeoutException();
          struct.te.read(iprot);
          struct.setTeIsSet(true);
        }
      }
    }

  }

  public static class reportTaskExecutionStatus_args implements org.apache.thrift.TBase<reportTaskExecutionStatus_args, reportTaskExecutionStatus_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reportTaskExecutionStatus_args");

    private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField TASK_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("taskStatus", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reportTaskExecutionStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reportTaskExecutionStatus_argsTupleSchemeFactory());
    }

    public String nodeId; // required
    public long taskId; // required
    /**
     * 
     * @see com.softsec.tase.common.rpc.domain.job.JobStatus
     */
    public com.softsec.tase.common.rpc.domain.job.JobStatus taskStatus; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NODE_ID((short)1, "nodeId"),
      TASK_ID((short)2, "taskId"),
      /**
       * 
       * @see com.softsec.tase.common.rpc.domain.job.JobStatus
       */
      TASK_STATUS((short)3, "taskStatus");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NODE_ID
            return NODE_ID;
          case 2: // TASK_ID
            return TASK_ID;
          case 3: // TASK_STATUS
            return TASK_STATUS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TASKID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodeId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TASK_STATUS, new org.apache.thrift.meta_data.FieldMetaData("taskStatus", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.softsec.tase.common.rpc.domain.job.JobStatus.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reportTaskExecutionStatus_args.class, metaDataMap);
    }

    public reportTaskExecutionStatus_args() {
    }

    public reportTaskExecutionStatus_args(
      String nodeId,
      long taskId,
      com.softsec.tase.common.rpc.domain.job.JobStatus taskStatus)
    {
      this();
      this.nodeId = nodeId;
      this.taskId = taskId;
      setTaskIdIsSet(true);
      this.taskStatus = taskStatus;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reportTaskExecutionStatus_args(reportTaskExecutionStatus_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetNodeId()) {
        this.nodeId = other.nodeId;
      }
      this.taskId = other.taskId;
      if (other.isSetTaskStatus()) {
        this.taskStatus = other.taskStatus;
      }
    }

    public reportTaskExecutionStatus_args deepCopy() {
      return new reportTaskExecutionStatus_args(this);
    }

    @Override
    public void clear() {
      this.nodeId = null;
      setTaskIdIsSet(false);
      this.taskId = 0;
      this.taskStatus = null;
    }

    public String getNodeId() {
      return this.nodeId;
    }

    public reportTaskExecutionStatus_args setNodeId(String nodeId) {
      this.nodeId = nodeId;
      return this;
    }

    public void unsetNodeId() {
      this.nodeId = null;
    }

    /** Returns true if field nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeId() {
      return this.nodeId != null;
    }

    public void setNodeIdIsSet(boolean value) {
      if (!value) {
        this.nodeId = null;
      }
    }

    public long getTaskId() {
      return this.taskId;
    }

    public reportTaskExecutionStatus_args setTaskId(long taskId) {
      this.taskId = taskId;
      setTaskIdIsSet(true);
      return this;
    }

    public void unsetTaskId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TASKID_ISSET_ID);
    }

    /** Returns true if field taskId is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskId() {
      return EncodingUtils.testBit(__isset_bitfield, __TASKID_ISSET_ID);
    }

    public void setTaskIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TASKID_ISSET_ID, value);
    }

    /**
     * 
     * @see com.softsec.tase.common.rpc.domain.job.JobStatus
     */
    public com.softsec.tase.common.rpc.domain.job.JobStatus getTaskStatus() {
      return this.taskStatus;
    }

    /**
     * 
     * @see com.softsec.tase.common.rpc.domain.job.JobStatus
     */
    public reportTaskExecutionStatus_args setTaskStatus(com.softsec.tase.common.rpc.domain.job.JobStatus taskStatus) {
      this.taskStatus = taskStatus;
      return this;
    }

    public void unsetTaskStatus() {
      this.taskStatus = null;
    }

    /** Returns true if field taskStatus is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskStatus() {
      return this.taskStatus != null;
    }

    public void setTaskStatusIsSet(boolean value) {
      if (!value) {
        this.taskStatus = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NODE_ID:
        if (value == null) {
          unsetNodeId();
        } else {
          setNodeId((String)value);
        }
        break;

      case TASK_ID:
        if (value == null) {
          unsetTaskId();
        } else {
          setTaskId((Long)value);
        }
        break;

      case TASK_STATUS:
        if (value == null) {
          unsetTaskStatus();
        } else {
          setTaskStatus((com.softsec.tase.common.rpc.domain.job.JobStatus)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NODE_ID:
        return getNodeId();

      case TASK_ID:
        return Long.valueOf(getTaskId());

      case TASK_STATUS:
        return getTaskStatus();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NODE_ID:
        return isSetNodeId();
      case TASK_ID:
        return isSetTaskId();
      case TASK_STATUS:
        return isSetTaskStatus();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reportTaskExecutionStatus_args)
        return this.equals((reportTaskExecutionStatus_args)that);
      return false;
    }

    public boolean equals(reportTaskExecutionStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_nodeId = true && this.isSetNodeId();
      boolean that_present_nodeId = true && that.isSetNodeId();
      if (this_present_nodeId || that_present_nodeId) {
        if (!(this_present_nodeId && that_present_nodeId))
          return false;
        if (!this.nodeId.equals(that.nodeId))
          return false;
      }

      boolean this_present_taskId = true;
      boolean that_present_taskId = true;
      if (this_present_taskId || that_present_taskId) {
        if (!(this_present_taskId && that_present_taskId))
          return false;
        if (this.taskId != that.taskId)
          return false;
      }

      boolean this_present_taskStatus = true && this.isSetTaskStatus();
      boolean that_present_taskStatus = true && that.isSetTaskStatus();
      if (this_present_taskStatus || that_present_taskStatus) {
        if (!(this_present_taskStatus && that_present_taskStatus))
          return false;
        if (!this.taskStatus.equals(that.taskStatus))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(reportTaskExecutionStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      reportTaskExecutionStatus_args typedOther = (reportTaskExecutionStatus_args)other;

      lastComparison = Boolean.valueOf(isSetNodeId()).compareTo(typedOther.isSetNodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeId, typedOther.nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTaskId()).compareTo(typedOther.isSetTaskId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, typedOther.taskId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTaskStatus()).compareTo(typedOther.isSetTaskStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskStatus, typedOther.taskStatus);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reportTaskExecutionStatus_args(");
      boolean first = true;

      sb.append("nodeId:");
      if (this.nodeId == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("taskId:");
      sb.append(this.taskId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("taskStatus:");
      if (this.taskStatus == null) {
        sb.append("null");
      } else {
        sb.append(this.taskStatus);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (nodeId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'nodeId' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'taskId' because it's a primitive and you chose the non-beans generator.
      if (taskStatus == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'taskStatus' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reportTaskExecutionStatus_argsStandardSchemeFactory implements SchemeFactory {
      public reportTaskExecutionStatus_argsStandardScheme getScheme() {
        return new reportTaskExecutionStatus_argsStandardScheme();
      }
    }

    private static class reportTaskExecutionStatus_argsStandardScheme extends StandardScheme<reportTaskExecutionStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reportTaskExecutionStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nodeId = iprot.readString();
                struct.setNodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TASK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.taskId = iprot.readI64();
                struct.setTaskIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TASK_STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.taskStatus = com.softsec.tase.common.rpc.domain.job.JobStatus.findByValue(iprot.readI32());
                struct.setTaskStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetTaskId()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'taskId' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reportTaskExecutionStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.nodeId != null) {
          oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
          oprot.writeString(struct.nodeId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
        oprot.writeI64(struct.taskId);
        oprot.writeFieldEnd();
        if (struct.taskStatus != null) {
          oprot.writeFieldBegin(TASK_STATUS_FIELD_DESC);
          oprot.writeI32(struct.taskStatus.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reportTaskExecutionStatus_argsTupleSchemeFactory implements SchemeFactory {
      public reportTaskExecutionStatus_argsTupleScheme getScheme() {
        return new reportTaskExecutionStatus_argsTupleScheme();
      }
    }

    private static class reportTaskExecutionStatus_argsTupleScheme extends TupleScheme<reportTaskExecutionStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reportTaskExecutionStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.nodeId);
        oprot.writeI64(struct.taskId);
        oprot.writeI32(struct.taskStatus.getValue());
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reportTaskExecutionStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.nodeId = iprot.readString();
        struct.setNodeIdIsSet(true);
        struct.taskId = iprot.readI64();
        struct.setTaskIdIsSet(true);
        struct.taskStatus = com.softsec.tase.common.rpc.domain.job.JobStatus.findByValue(iprot.readI32());
        struct.setTaskStatusIsSet(true);
      }
    }

  }

  public static class reportTaskExecutionStatus_result implements org.apache.thrift.TBase<reportTaskExecutionStatus_result, reportTaskExecutionStatus_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reportTaskExecutionStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField TE_FIELD_DESC = new org.apache.thrift.protocol.TField("te", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reportTaskExecutionStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reportTaskExecutionStatus_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.softsec.tase.common.rpc.exception.InvalidRequestException ire; // required
    public com.softsec.tase.common.rpc.exception.UnavailableException ue; // required
    public com.softsec.tase.common.rpc.exception.TimeoutException te; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      UE((short)2, "ue"),
      TE((short)3, "te");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // UE
            return UE;
          case 3: // TE
            return TE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TE, new org.apache.thrift.meta_data.FieldMetaData("te", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reportTaskExecutionStatus_result.class, metaDataMap);
    }

    public reportTaskExecutionStatus_result() {
    }

    public reportTaskExecutionStatus_result(
      int success,
      com.softsec.tase.common.rpc.exception.InvalidRequestException ire,
      com.softsec.tase.common.rpc.exception.UnavailableException ue,
      com.softsec.tase.common.rpc.exception.TimeoutException te)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ire = ire;
      this.ue = ue;
      this.te = te;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reportTaskExecutionStatus_result(reportTaskExecutionStatus_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIre()) {
        this.ire = new com.softsec.tase.common.rpc.exception.InvalidRequestException(other.ire);
      }
      if (other.isSetUe()) {
        this.ue = new com.softsec.tase.common.rpc.exception.UnavailableException(other.ue);
      }
      if (other.isSetTe()) {
        this.te = new com.softsec.tase.common.rpc.exception.TimeoutException(other.te);
      }
    }

    public reportTaskExecutionStatus_result deepCopy() {
      return new reportTaskExecutionStatus_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ire = null;
      this.ue = null;
      this.te = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public reportTaskExecutionStatus_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.softsec.tase.common.rpc.exception.InvalidRequestException getIre() {
      return this.ire;
    }

    public reportTaskExecutionStatus_result setIre(com.softsec.tase.common.rpc.exception.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public com.softsec.tase.common.rpc.exception.UnavailableException getUe() {
      return this.ue;
    }

    public reportTaskExecutionStatus_result setUe(com.softsec.tase.common.rpc.exception.UnavailableException ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public com.softsec.tase.common.rpc.exception.TimeoutException getTe() {
      return this.te;
    }

    public reportTaskExecutionStatus_result setTe(com.softsec.tase.common.rpc.exception.TimeoutException te) {
      this.te = te;
      return this;
    }

    public void unsetTe() {
      this.te = null;
    }

    /** Returns true if field te is set (has been assigned a value) and false otherwise */
    public boolean isSetTe() {
      return this.te != null;
    }

    public void setTeIsSet(boolean value) {
      if (!value) {
        this.te = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((com.softsec.tase.common.rpc.exception.InvalidRequestException)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((com.softsec.tase.common.rpc.exception.UnavailableException)value);
        }
        break;

      case TE:
        if (value == null) {
          unsetTe();
        } else {
          setTe((com.softsec.tase.common.rpc.exception.TimeoutException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case IRE:
        return getIre();

      case UE:
        return getUe();

      case TE:
        return getTe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case UE:
        return isSetUe();
      case TE:
        return isSetTe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reportTaskExecutionStatus_result)
        return this.equals((reportTaskExecutionStatus_result)that);
      return false;
    }

    public boolean equals(reportTaskExecutionStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      boolean this_present_te = true && this.isSetTe();
      boolean that_present_te = true && that.isSetTe();
      if (this_present_te || that_present_te) {
        if (!(this_present_te && that_present_te))
          return false;
        if (!this.te.equals(that.te))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(reportTaskExecutionStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      reportTaskExecutionStatus_result typedOther = (reportTaskExecutionStatus_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(typedOther.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, typedOther.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUe()).compareTo(typedOther.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, typedOther.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTe()).compareTo(typedOther.isSetTe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.te, typedOther.te);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reportTaskExecutionStatus_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("te:");
      if (this.te == null) {
        sb.append("null");
      } else {
        sb.append(this.te);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reportTaskExecutionStatus_resultStandardSchemeFactory implements SchemeFactory {
      public reportTaskExecutionStatus_resultStandardScheme getScheme() {
        return new reportTaskExecutionStatus_resultStandardScheme();
      }
    }

    private static class reportTaskExecutionStatus_resultStandardScheme extends StandardScheme<reportTaskExecutionStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reportTaskExecutionStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new com.softsec.tase.common.rpc.exception.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new com.softsec.tase.common.rpc.exception.UnavailableException();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.te = new com.softsec.tase.common.rpc.exception.TimeoutException();
                struct.te.read(iprot);
                struct.setTeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reportTaskExecutionStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ue != null) {
          oprot.writeFieldBegin(UE_FIELD_DESC);
          struct.ue.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.te != null) {
          oprot.writeFieldBegin(TE_FIELD_DESC);
          struct.te.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reportTaskExecutionStatus_resultTupleSchemeFactory implements SchemeFactory {
      public reportTaskExecutionStatus_resultTupleScheme getScheme() {
        return new reportTaskExecutionStatus_resultTupleScheme();
      }
    }

    private static class reportTaskExecutionStatus_resultTupleScheme extends TupleScheme<reportTaskExecutionStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reportTaskExecutionStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetUe()) {
          optionals.set(2);
        }
        if (struct.isSetTe()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetUe()) {
          struct.ue.write(oprot);
        }
        if (struct.isSetTe()) {
          struct.te.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reportTaskExecutionStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new com.softsec.tase.common.rpc.exception.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ue = new com.softsec.tase.common.rpc.exception.UnavailableException();
          struct.ue.read(iprot);
          struct.setUeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.te = new com.softsec.tase.common.rpc.exception.TimeoutException();
          struct.te.read(iprot);
          struct.setTeIsSet(true);
        }
      }
    }

  }

  public static class checkAppDuplication_args implements org.apache.thrift.TBase<checkAppDuplication_args, checkAppDuplication_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkAppDuplication_args");

    private static final org.apache.thrift.protocol.TField APP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("appType", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField ORIGIN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("originType", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField APP_CHECKSUM_FIELD_DESC = new org.apache.thrift.protocol.TField("appChecksum", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkAppDuplication_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkAppDuplication_argsTupleSchemeFactory());
    }

    /**
     * 
     * @see com.softsec.tase.common.rpc.domain.app.AppType
     */
    public com.softsec.tase.common.rpc.domain.app.AppType appType; // required
    /**
     * 
     * @see com.softsec.tase.common.rpc.domain.app.OriginType
     */
    public com.softsec.tase.common.rpc.domain.app.OriginType originType; // required
    public String appChecksum; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see com.softsec.tase.common.rpc.domain.app.AppType
       */
      APP_TYPE((short)1, "appType"),
      /**
       * 
       * @see com.softsec.tase.common.rpc.domain.app.OriginType
       */
      ORIGIN_TYPE((short)2, "originType"),
      APP_CHECKSUM((short)3, "appChecksum");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_TYPE
            return APP_TYPE;
          case 2: // ORIGIN_TYPE
            return ORIGIN_TYPE;
          case 3: // APP_CHECKSUM
            return APP_CHECKSUM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("appType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.softsec.tase.common.rpc.domain.app.AppType.class)));
      tmpMap.put(_Fields.ORIGIN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("originType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.softsec.tase.common.rpc.domain.app.OriginType.class)));
      tmpMap.put(_Fields.APP_CHECKSUM, new org.apache.thrift.meta_data.FieldMetaData("appChecksum", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkAppDuplication_args.class, metaDataMap);
    }

    public checkAppDuplication_args() {
    }

    public checkAppDuplication_args(
      com.softsec.tase.common.rpc.domain.app.AppType appType,
      com.softsec.tase.common.rpc.domain.app.OriginType originType,
      String appChecksum)
    {
      this();
      this.appType = appType;
      this.originType = originType;
      this.appChecksum = appChecksum;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkAppDuplication_args(checkAppDuplication_args other) {
      if (other.isSetAppType()) {
        this.appType = other.appType;
      }
      if (other.isSetOriginType()) {
        this.originType = other.originType;
      }
      if (other.isSetAppChecksum()) {
        this.appChecksum = other.appChecksum;
      }
    }

    public checkAppDuplication_args deepCopy() {
      return new checkAppDuplication_args(this);
    }

    @Override
    public void clear() {
      this.appType = null;
      this.originType = null;
      this.appChecksum = null;
    }

    /**
     * 
     * @see com.softsec.tase.common.rpc.domain.app.AppType
     */
    public com.softsec.tase.common.rpc.domain.app.AppType getAppType() {
      return this.appType;
    }

    /**
     * 
     * @see com.softsec.tase.common.rpc.domain.app.AppType
     */
    public checkAppDuplication_args setAppType(com.softsec.tase.common.rpc.domain.app.AppType appType) {
      this.appType = appType;
      return this;
    }

    public void unsetAppType() {
      this.appType = null;
    }

    /** Returns true if field appType is set (has been assigned a value) and false otherwise */
    public boolean isSetAppType() {
      return this.appType != null;
    }

    public void setAppTypeIsSet(boolean value) {
      if (!value) {
        this.appType = null;
      }
    }

    /**
     * 
     * @see com.softsec.tase.common.rpc.domain.app.OriginType
     */
    public com.softsec.tase.common.rpc.domain.app.OriginType getOriginType() {
      return this.originType;
    }

    /**
     * 
     * @see com.softsec.tase.common.rpc.domain.app.OriginType
     */
    public checkAppDuplication_args setOriginType(com.softsec.tase.common.rpc.domain.app.OriginType originType) {
      this.originType = originType;
      return this;
    }

    public void unsetOriginType() {
      this.originType = null;
    }

    /** Returns true if field originType is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginType() {
      return this.originType != null;
    }

    public void setOriginTypeIsSet(boolean value) {
      if (!value) {
        this.originType = null;
      }
    }

    public String getAppChecksum() {
      return this.appChecksum;
    }

    public checkAppDuplication_args setAppChecksum(String appChecksum) {
      this.appChecksum = appChecksum;
      return this;
    }

    public void unsetAppChecksum() {
      this.appChecksum = null;
    }

    /** Returns true if field appChecksum is set (has been assigned a value) and false otherwise */
    public boolean isSetAppChecksum() {
      return this.appChecksum != null;
    }

    public void setAppChecksumIsSet(boolean value) {
      if (!value) {
        this.appChecksum = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_TYPE:
        if (value == null) {
          unsetAppType();
        } else {
          setAppType((com.softsec.tase.common.rpc.domain.app.AppType)value);
        }
        break;

      case ORIGIN_TYPE:
        if (value == null) {
          unsetOriginType();
        } else {
          setOriginType((com.softsec.tase.common.rpc.domain.app.OriginType)value);
        }
        break;

      case APP_CHECKSUM:
        if (value == null) {
          unsetAppChecksum();
        } else {
          setAppChecksum((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_TYPE:
        return getAppType();

      case ORIGIN_TYPE:
        return getOriginType();

      case APP_CHECKSUM:
        return getAppChecksum();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_TYPE:
        return isSetAppType();
      case ORIGIN_TYPE:
        return isSetOriginType();
      case APP_CHECKSUM:
        return isSetAppChecksum();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkAppDuplication_args)
        return this.equals((checkAppDuplication_args)that);
      return false;
    }

    public boolean equals(checkAppDuplication_args that) {
      if (that == null)
        return false;

      boolean this_present_appType = true && this.isSetAppType();
      boolean that_present_appType = true && that.isSetAppType();
      if (this_present_appType || that_present_appType) {
        if (!(this_present_appType && that_present_appType))
          return false;
        if (!this.appType.equals(that.appType))
          return false;
      }

      boolean this_present_originType = true && this.isSetOriginType();
      boolean that_present_originType = true && that.isSetOriginType();
      if (this_present_originType || that_present_originType) {
        if (!(this_present_originType && that_present_originType))
          return false;
        if (!this.originType.equals(that.originType))
          return false;
      }

      boolean this_present_appChecksum = true && this.isSetAppChecksum();
      boolean that_present_appChecksum = true && that.isSetAppChecksum();
      if (this_present_appChecksum || that_present_appChecksum) {
        if (!(this_present_appChecksum && that_present_appChecksum))
          return false;
        if (!this.appChecksum.equals(that.appChecksum))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(checkAppDuplication_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      checkAppDuplication_args typedOther = (checkAppDuplication_args)other;

      lastComparison = Boolean.valueOf(isSetAppType()).compareTo(typedOther.isSetAppType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appType, typedOther.appType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOriginType()).compareTo(typedOther.isSetOriginType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originType, typedOther.originType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAppChecksum()).compareTo(typedOther.isSetAppChecksum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppChecksum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appChecksum, typedOther.appChecksum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkAppDuplication_args(");
      boolean first = true;

      sb.append("appType:");
      if (this.appType == null) {
        sb.append("null");
      } else {
        sb.append(this.appType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("originType:");
      if (this.originType == null) {
        sb.append("null");
      } else {
        sb.append(this.originType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("appChecksum:");
      if (this.appChecksum == null) {
        sb.append("null");
      } else {
        sb.append(this.appChecksum);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (appType == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'appType' was not present! Struct: " + toString());
      }
      if (originType == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'originType' was not present! Struct: " + toString());
      }
      if (appChecksum == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'appChecksum' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkAppDuplication_argsStandardSchemeFactory implements SchemeFactory {
      public checkAppDuplication_argsStandardScheme getScheme() {
        return new checkAppDuplication_argsStandardScheme();
      }
    }

    private static class checkAppDuplication_argsStandardScheme extends StandardScheme<checkAppDuplication_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkAppDuplication_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APP_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.appType = com.softsec.tase.common.rpc.domain.app.AppType.findByValue(iprot.readI32());
                struct.setAppTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ORIGIN_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.originType = com.softsec.tase.common.rpc.domain.app.OriginType.findByValue(iprot.readI32());
                struct.setOriginTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // APP_CHECKSUM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appChecksum = iprot.readString();
                struct.setAppChecksumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkAppDuplication_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.appType != null) {
          oprot.writeFieldBegin(APP_TYPE_FIELD_DESC);
          oprot.writeI32(struct.appType.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.originType != null) {
          oprot.writeFieldBegin(ORIGIN_TYPE_FIELD_DESC);
          oprot.writeI32(struct.originType.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.appChecksum != null) {
          oprot.writeFieldBegin(APP_CHECKSUM_FIELD_DESC);
          oprot.writeString(struct.appChecksum);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkAppDuplication_argsTupleSchemeFactory implements SchemeFactory {
      public checkAppDuplication_argsTupleScheme getScheme() {
        return new checkAppDuplication_argsTupleScheme();
      }
    }

    private static class checkAppDuplication_argsTupleScheme extends TupleScheme<checkAppDuplication_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkAppDuplication_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeI32(struct.appType.getValue());
        oprot.writeI32(struct.originType.getValue());
        oprot.writeString(struct.appChecksum);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkAppDuplication_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.appType = com.softsec.tase.common.rpc.domain.app.AppType.findByValue(iprot.readI32());
        struct.setAppTypeIsSet(true);
        struct.originType = com.softsec.tase.common.rpc.domain.app.OriginType.findByValue(iprot.readI32());
        struct.setOriginTypeIsSet(true);
        struct.appChecksum = iprot.readString();
        struct.setAppChecksumIsSet(true);
      }
    }

  }

  public static class checkAppDuplication_result implements org.apache.thrift.TBase<checkAppDuplication_result, checkAppDuplication_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkAppDuplication_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField TE_FIELD_DESC = new org.apache.thrift.protocol.TField("te", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkAppDuplication_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkAppDuplication_resultTupleSchemeFactory());
    }

    public long success; // required
    public com.softsec.tase.common.rpc.exception.InvalidRequestException ire; // required
    public com.softsec.tase.common.rpc.exception.UnavailableException ue; // required
    public com.softsec.tase.common.rpc.exception.TimeoutException te; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      UE((short)2, "ue"),
      TE((short)3, "te");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // UE
            return UE;
          case 3: // TE
            return TE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TE, new org.apache.thrift.meta_data.FieldMetaData("te", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkAppDuplication_result.class, metaDataMap);
    }

    public checkAppDuplication_result() {
    }

    public checkAppDuplication_result(
      long success,
      com.softsec.tase.common.rpc.exception.InvalidRequestException ire,
      com.softsec.tase.common.rpc.exception.UnavailableException ue,
      com.softsec.tase.common.rpc.exception.TimeoutException te)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ire = ire;
      this.ue = ue;
      this.te = te;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkAppDuplication_result(checkAppDuplication_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIre()) {
        this.ire = new com.softsec.tase.common.rpc.exception.InvalidRequestException(other.ire);
      }
      if (other.isSetUe()) {
        this.ue = new com.softsec.tase.common.rpc.exception.UnavailableException(other.ue);
      }
      if (other.isSetTe()) {
        this.te = new com.softsec.tase.common.rpc.exception.TimeoutException(other.te);
      }
    }

    public checkAppDuplication_result deepCopy() {
      return new checkAppDuplication_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ire = null;
      this.ue = null;
      this.te = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public checkAppDuplication_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.softsec.tase.common.rpc.exception.InvalidRequestException getIre() {
      return this.ire;
    }

    public checkAppDuplication_result setIre(com.softsec.tase.common.rpc.exception.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public com.softsec.tase.common.rpc.exception.UnavailableException getUe() {
      return this.ue;
    }

    public checkAppDuplication_result setUe(com.softsec.tase.common.rpc.exception.UnavailableException ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public com.softsec.tase.common.rpc.exception.TimeoutException getTe() {
      return this.te;
    }

    public checkAppDuplication_result setTe(com.softsec.tase.common.rpc.exception.TimeoutException te) {
      this.te = te;
      return this;
    }

    public void unsetTe() {
      this.te = null;
    }

    /** Returns true if field te is set (has been assigned a value) and false otherwise */
    public boolean isSetTe() {
      return this.te != null;
    }

    public void setTeIsSet(boolean value) {
      if (!value) {
        this.te = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((com.softsec.tase.common.rpc.exception.InvalidRequestException)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((com.softsec.tase.common.rpc.exception.UnavailableException)value);
        }
        break;

      case TE:
        if (value == null) {
          unsetTe();
        } else {
          setTe((com.softsec.tase.common.rpc.exception.TimeoutException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case IRE:
        return getIre();

      case UE:
        return getUe();

      case TE:
        return getTe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case UE:
        return isSetUe();
      case TE:
        return isSetTe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkAppDuplication_result)
        return this.equals((checkAppDuplication_result)that);
      return false;
    }

    public boolean equals(checkAppDuplication_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      boolean this_present_te = true && this.isSetTe();
      boolean that_present_te = true && that.isSetTe();
      if (this_present_te || that_present_te) {
        if (!(this_present_te && that_present_te))
          return false;
        if (!this.te.equals(that.te))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(checkAppDuplication_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      checkAppDuplication_result typedOther = (checkAppDuplication_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(typedOther.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, typedOther.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUe()).compareTo(typedOther.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, typedOther.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTe()).compareTo(typedOther.isSetTe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.te, typedOther.te);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkAppDuplication_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("te:");
      if (this.te == null) {
        sb.append("null");
      } else {
        sb.append(this.te);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkAppDuplication_resultStandardSchemeFactory implements SchemeFactory {
      public checkAppDuplication_resultStandardScheme getScheme() {
        return new checkAppDuplication_resultStandardScheme();
      }
    }

    private static class checkAppDuplication_resultStandardScheme extends StandardScheme<checkAppDuplication_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkAppDuplication_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new com.softsec.tase.common.rpc.exception.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new com.softsec.tase.common.rpc.exception.UnavailableException();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.te = new com.softsec.tase.common.rpc.exception.TimeoutException();
                struct.te.read(iprot);
                struct.setTeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkAppDuplication_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ue != null) {
          oprot.writeFieldBegin(UE_FIELD_DESC);
          struct.ue.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.te != null) {
          oprot.writeFieldBegin(TE_FIELD_DESC);
          struct.te.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkAppDuplication_resultTupleSchemeFactory implements SchemeFactory {
      public checkAppDuplication_resultTupleScheme getScheme() {
        return new checkAppDuplication_resultTupleScheme();
      }
    }

    private static class checkAppDuplication_resultTupleScheme extends TupleScheme<checkAppDuplication_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkAppDuplication_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetUe()) {
          optionals.set(2);
        }
        if (struct.isSetTe()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetUe()) {
          struct.ue.write(oprot);
        }
        if (struct.isSetTe()) {
          struct.te.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkAppDuplication_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new com.softsec.tase.common.rpc.exception.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ue = new com.softsec.tase.common.rpc.exception.UnavailableException();
          struct.ue.read(iprot);
          struct.setUeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.te = new com.softsec.tase.common.rpc.exception.TimeoutException();
          struct.te.read(iprot);
          struct.setTeIsSet(true);
        }
      }
    }

  }

  public static class checkFileDuplication_args implements org.apache.thrift.TBase<checkFileDuplication_args, checkFileDuplication_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkFileDuplication_args");

    private static final org.apache.thrift.protocol.TField APP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("appType", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField FILE_CHECKSUM_FIELD_DESC = new org.apache.thrift.protocol.TField("fileChecksum", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkFileDuplication_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkFileDuplication_argsTupleSchemeFactory());
    }

    /**
     * 
     * @see com.softsec.tase.common.rpc.domain.app.AppType
     */
    public com.softsec.tase.common.rpc.domain.app.AppType appType; // required
    public String fileChecksum; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see com.softsec.tase.common.rpc.domain.app.AppType
       */
      APP_TYPE((short)1, "appType"),
      FILE_CHECKSUM((short)2, "fileChecksum");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_TYPE
            return APP_TYPE;
          case 2: // FILE_CHECKSUM
            return FILE_CHECKSUM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("appType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.softsec.tase.common.rpc.domain.app.AppType.class)));
      tmpMap.put(_Fields.FILE_CHECKSUM, new org.apache.thrift.meta_data.FieldMetaData("fileChecksum", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkFileDuplication_args.class, metaDataMap);
    }

    public checkFileDuplication_args() {
    }

    public checkFileDuplication_args(
      com.softsec.tase.common.rpc.domain.app.AppType appType,
      String fileChecksum)
    {
      this();
      this.appType = appType;
      this.fileChecksum = fileChecksum;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkFileDuplication_args(checkFileDuplication_args other) {
      if (other.isSetAppType()) {
        this.appType = other.appType;
      }
      if (other.isSetFileChecksum()) {
        this.fileChecksum = other.fileChecksum;
      }
    }

    public checkFileDuplication_args deepCopy() {
      return new checkFileDuplication_args(this);
    }

    @Override
    public void clear() {
      this.appType = null;
      this.fileChecksum = null;
    }

    /**
     * 
     * @see com.softsec.tase.common.rpc.domain.app.AppType
     */
    public com.softsec.tase.common.rpc.domain.app.AppType getAppType() {
      return this.appType;
    }

    /**
     * 
     * @see com.softsec.tase.common.rpc.domain.app.AppType
     */
    public checkFileDuplication_args setAppType(com.softsec.tase.common.rpc.domain.app.AppType appType) {
      this.appType = appType;
      return this;
    }

    public void unsetAppType() {
      this.appType = null;
    }

    /** Returns true if field appType is set (has been assigned a value) and false otherwise */
    public boolean isSetAppType() {
      return this.appType != null;
    }

    public void setAppTypeIsSet(boolean value) {
      if (!value) {
        this.appType = null;
      }
    }

    public String getFileChecksum() {
      return this.fileChecksum;
    }

    public checkFileDuplication_args setFileChecksum(String fileChecksum) {
      this.fileChecksum = fileChecksum;
      return this;
    }

    public void unsetFileChecksum() {
      this.fileChecksum = null;
    }

    /** Returns true if field fileChecksum is set (has been assigned a value) and false otherwise */
    public boolean isSetFileChecksum() {
      return this.fileChecksum != null;
    }

    public void setFileChecksumIsSet(boolean value) {
      if (!value) {
        this.fileChecksum = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_TYPE:
        if (value == null) {
          unsetAppType();
        } else {
          setAppType((com.softsec.tase.common.rpc.domain.app.AppType)value);
        }
        break;

      case FILE_CHECKSUM:
        if (value == null) {
          unsetFileChecksum();
        } else {
          setFileChecksum((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_TYPE:
        return getAppType();

      case FILE_CHECKSUM:
        return getFileChecksum();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_TYPE:
        return isSetAppType();
      case FILE_CHECKSUM:
        return isSetFileChecksum();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkFileDuplication_args)
        return this.equals((checkFileDuplication_args)that);
      return false;
    }

    public boolean equals(checkFileDuplication_args that) {
      if (that == null)
        return false;

      boolean this_present_appType = true && this.isSetAppType();
      boolean that_present_appType = true && that.isSetAppType();
      if (this_present_appType || that_present_appType) {
        if (!(this_present_appType && that_present_appType))
          return false;
        if (!this.appType.equals(that.appType))
          return false;
      }

      boolean this_present_fileChecksum = true && this.isSetFileChecksum();
      boolean that_present_fileChecksum = true && that.isSetFileChecksum();
      if (this_present_fileChecksum || that_present_fileChecksum) {
        if (!(this_present_fileChecksum && that_present_fileChecksum))
          return false;
        if (!this.fileChecksum.equals(that.fileChecksum))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(checkFileDuplication_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      checkFileDuplication_args typedOther = (checkFileDuplication_args)other;

      lastComparison = Boolean.valueOf(isSetAppType()).compareTo(typedOther.isSetAppType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appType, typedOther.appType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFileChecksum()).compareTo(typedOther.isSetFileChecksum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileChecksum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileChecksum, typedOther.fileChecksum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkFileDuplication_args(");
      boolean first = true;

      sb.append("appType:");
      if (this.appType == null) {
        sb.append("null");
      } else {
        sb.append(this.appType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileChecksum:");
      if (this.fileChecksum == null) {
        sb.append("null");
      } else {
        sb.append(this.fileChecksum);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (appType == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'appType' was not present! Struct: " + toString());
      }
      if (fileChecksum == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'fileChecksum' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkFileDuplication_argsStandardSchemeFactory implements SchemeFactory {
      public checkFileDuplication_argsStandardScheme getScheme() {
        return new checkFileDuplication_argsStandardScheme();
      }
    }

    private static class checkFileDuplication_argsStandardScheme extends StandardScheme<checkFileDuplication_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkFileDuplication_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APP_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.appType = com.softsec.tase.common.rpc.domain.app.AppType.findByValue(iprot.readI32());
                struct.setAppTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FILE_CHECKSUM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileChecksum = iprot.readString();
                struct.setFileChecksumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkFileDuplication_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.appType != null) {
          oprot.writeFieldBegin(APP_TYPE_FIELD_DESC);
          oprot.writeI32(struct.appType.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.fileChecksum != null) {
          oprot.writeFieldBegin(FILE_CHECKSUM_FIELD_DESC);
          oprot.writeString(struct.fileChecksum);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkFileDuplication_argsTupleSchemeFactory implements SchemeFactory {
      public checkFileDuplication_argsTupleScheme getScheme() {
        return new checkFileDuplication_argsTupleScheme();
      }
    }

    private static class checkFileDuplication_argsTupleScheme extends TupleScheme<checkFileDuplication_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkFileDuplication_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeI32(struct.appType.getValue());
        oprot.writeString(struct.fileChecksum);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkFileDuplication_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.appType = com.softsec.tase.common.rpc.domain.app.AppType.findByValue(iprot.readI32());
        struct.setAppTypeIsSet(true);
        struct.fileChecksum = iprot.readString();
        struct.setFileChecksumIsSet(true);
      }
    }

  }

  public static class checkFileDuplication_result implements org.apache.thrift.TBase<checkFileDuplication_result, checkFileDuplication_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkFileDuplication_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField TE_FIELD_DESC = new org.apache.thrift.protocol.TField("te", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkFileDuplication_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkFileDuplication_resultTupleSchemeFactory());
    }

    public String success; // required
    public com.softsec.tase.common.rpc.exception.InvalidRequestException ire; // required
    public com.softsec.tase.common.rpc.exception.UnavailableException ue; // required
    public com.softsec.tase.common.rpc.exception.TimeoutException te; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      UE((short)2, "ue"),
      TE((short)3, "te");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // UE
            return UE;
          case 3: // TE
            return TE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TE, new org.apache.thrift.meta_data.FieldMetaData("te", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkFileDuplication_result.class, metaDataMap);
    }

    public checkFileDuplication_result() {
    }

    public checkFileDuplication_result(
      String success,
      com.softsec.tase.common.rpc.exception.InvalidRequestException ire,
      com.softsec.tase.common.rpc.exception.UnavailableException ue,
      com.softsec.tase.common.rpc.exception.TimeoutException te)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ue = ue;
      this.te = te;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkFileDuplication_result(checkFileDuplication_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetIre()) {
        this.ire = new com.softsec.tase.common.rpc.exception.InvalidRequestException(other.ire);
      }
      if (other.isSetUe()) {
        this.ue = new com.softsec.tase.common.rpc.exception.UnavailableException(other.ue);
      }
      if (other.isSetTe()) {
        this.te = new com.softsec.tase.common.rpc.exception.TimeoutException(other.te);
      }
    }

    public checkFileDuplication_result deepCopy() {
      return new checkFileDuplication_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ue = null;
      this.te = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public checkFileDuplication_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.softsec.tase.common.rpc.exception.InvalidRequestException getIre() {
      return this.ire;
    }

    public checkFileDuplication_result setIre(com.softsec.tase.common.rpc.exception.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public com.softsec.tase.common.rpc.exception.UnavailableException getUe() {
      return this.ue;
    }

    public checkFileDuplication_result setUe(com.softsec.tase.common.rpc.exception.UnavailableException ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public com.softsec.tase.common.rpc.exception.TimeoutException getTe() {
      return this.te;
    }

    public checkFileDuplication_result setTe(com.softsec.tase.common.rpc.exception.TimeoutException te) {
      this.te = te;
      return this;
    }

    public void unsetTe() {
      this.te = null;
    }

    /** Returns true if field te is set (has been assigned a value) and false otherwise */
    public boolean isSetTe() {
      return this.te != null;
    }

    public void setTeIsSet(boolean value) {
      if (!value) {
        this.te = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((com.softsec.tase.common.rpc.exception.InvalidRequestException)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((com.softsec.tase.common.rpc.exception.UnavailableException)value);
        }
        break;

      case TE:
        if (value == null) {
          unsetTe();
        } else {
          setTe((com.softsec.tase.common.rpc.exception.TimeoutException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case UE:
        return getUe();

      case TE:
        return getTe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case UE:
        return isSetUe();
      case TE:
        return isSetTe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkFileDuplication_result)
        return this.equals((checkFileDuplication_result)that);
      return false;
    }

    public boolean equals(checkFileDuplication_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      boolean this_present_te = true && this.isSetTe();
      boolean that_present_te = true && that.isSetTe();
      if (this_present_te || that_present_te) {
        if (!(this_present_te && that_present_te))
          return false;
        if (!this.te.equals(that.te))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(checkFileDuplication_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      checkFileDuplication_result typedOther = (checkFileDuplication_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(typedOther.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, typedOther.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUe()).compareTo(typedOther.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, typedOther.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTe()).compareTo(typedOther.isSetTe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.te, typedOther.te);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkFileDuplication_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("te:");
      if (this.te == null) {
        sb.append("null");
      } else {
        sb.append(this.te);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkFileDuplication_resultStandardSchemeFactory implements SchemeFactory {
      public checkFileDuplication_resultStandardScheme getScheme() {
        return new checkFileDuplication_resultStandardScheme();
      }
    }

    private static class checkFileDuplication_resultStandardScheme extends StandardScheme<checkFileDuplication_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkFileDuplication_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new com.softsec.tase.common.rpc.exception.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new com.softsec.tase.common.rpc.exception.UnavailableException();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.te = new com.softsec.tase.common.rpc.exception.TimeoutException();
                struct.te.read(iprot);
                struct.setTeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkFileDuplication_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ue != null) {
          oprot.writeFieldBegin(UE_FIELD_DESC);
          struct.ue.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.te != null) {
          oprot.writeFieldBegin(TE_FIELD_DESC);
          struct.te.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkFileDuplication_resultTupleSchemeFactory implements SchemeFactory {
      public checkFileDuplication_resultTupleScheme getScheme() {
        return new checkFileDuplication_resultTupleScheme();
      }
    }

    private static class checkFileDuplication_resultTupleScheme extends TupleScheme<checkFileDuplication_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkFileDuplication_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetUe()) {
          optionals.set(2);
        }
        if (struct.isSetTe()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetUe()) {
          struct.ue.write(oprot);
        }
        if (struct.isSetTe()) {
          struct.te.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkFileDuplication_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new com.softsec.tase.common.rpc.exception.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ue = new com.softsec.tase.common.rpc.exception.UnavailableException();
          struct.ue.read(iprot);
          struct.setUeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.te = new com.softsec.tase.common.rpc.exception.TimeoutException();
          struct.te.read(iprot);
          struct.setTeIsSet(true);
        }
      }
    }

  }

  public static class submitResult_args implements org.apache.thrift.TBase<submitResult_args, submitResult_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("submitResult_args");

    private static final org.apache.thrift.protocol.TField APP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("appType", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField JOB_LIFECYCLE_FIELD_DESC = new org.apache.thrift.protocol.TField("jobLifecycle", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField RESULT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("resultType", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField RESULT_CHECKSUM_FIELD_DESC = new org.apache.thrift.protocol.TField("resultChecksum", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskId", org.apache.thrift.protocol.TType.I64, (short)6);
    private static final org.apache.thrift.protocol.TField IDENTIFIER_FIELD_DESC = new org.apache.thrift.protocol.TField("identifier", org.apache.thrift.protocol.TType.STRING, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new submitResult_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new submitResult_argsTupleSchemeFactory());
    }

    /**
     * 
     * @see com.softsec.tase.common.rpc.domain.app.AppType
     */
    public com.softsec.tase.common.rpc.domain.app.AppType appType; // required
    /**
     * 
     * @see com.softsec.tase.common.rpc.domain.job.JobLifecycle
     */
    public com.softsec.tase.common.rpc.domain.job.JobLifecycle jobLifecycle; // required
    /**
     * 
     * @see com.softsec.tase.common.rpc.domain.job.JobPhase
     */
    public com.softsec.tase.common.rpc.domain.job.JobPhase resultType; // required
    public ByteBuffer content; // required
    public String resultChecksum; // required
    public long taskId; // required
    public String identifier; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see com.softsec.tase.common.rpc.domain.app.AppType
       */
      APP_TYPE((short)1, "appType"),
      /**
       * 
       * @see com.softsec.tase.common.rpc.domain.job.JobLifecycle
       */
      JOB_LIFECYCLE((short)2, "jobLifecycle"),
      /**
       * 
       * @see com.softsec.tase.common.rpc.domain.job.JobPhase
       */
      RESULT_TYPE((short)3, "resultType"),
      CONTENT((short)4, "content"),
      RESULT_CHECKSUM((short)5, "resultChecksum"),
      TASK_ID((short)6, "taskId"),
      IDENTIFIER((short)7, "identifier");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_TYPE
            return APP_TYPE;
          case 2: // JOB_LIFECYCLE
            return JOB_LIFECYCLE;
          case 3: // RESULT_TYPE
            return RESULT_TYPE;
          case 4: // CONTENT
            return CONTENT;
          case 5: // RESULT_CHECKSUM
            return RESULT_CHECKSUM;
          case 6: // TASK_ID
            return TASK_ID;
          case 7: // IDENTIFIER
            return IDENTIFIER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TASKID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("appType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.softsec.tase.common.rpc.domain.app.AppType.class)));
      tmpMap.put(_Fields.JOB_LIFECYCLE, new org.apache.thrift.meta_data.FieldMetaData("jobLifecycle", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.softsec.tase.common.rpc.domain.job.JobLifecycle.class)));
      tmpMap.put(_Fields.RESULT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("resultType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.softsec.tase.common.rpc.domain.job.JobPhase.class)));
      tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.RESULT_CHECKSUM, new org.apache.thrift.meta_data.FieldMetaData("resultChecksum", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.IDENTIFIER, new org.apache.thrift.meta_data.FieldMetaData("identifier", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(submitResult_args.class, metaDataMap);
    }

    public submitResult_args() {
    }

    public submitResult_args(
      com.softsec.tase.common.rpc.domain.app.AppType appType,
      com.softsec.tase.common.rpc.domain.job.JobLifecycle jobLifecycle,
      com.softsec.tase.common.rpc.domain.job.JobPhase resultType,
      ByteBuffer content,
      String resultChecksum,
      long taskId,
      String identifier)
    {
      this();
      this.appType = appType;
      this.jobLifecycle = jobLifecycle;
      this.resultType = resultType;
      this.content = content;
      this.resultChecksum = resultChecksum;
      this.taskId = taskId;
      setTaskIdIsSet(true);
      this.identifier = identifier;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public submitResult_args(submitResult_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAppType()) {
        this.appType = other.appType;
      }
      if (other.isSetJobLifecycle()) {
        this.jobLifecycle = other.jobLifecycle;
      }
      if (other.isSetResultType()) {
        this.resultType = other.resultType;
      }
      if (other.isSetContent()) {
        this.content = org.apache.thrift.TBaseHelper.copyBinary(other.content);
;
      }
      if (other.isSetResultChecksum()) {
        this.resultChecksum = other.resultChecksum;
      }
      this.taskId = other.taskId;
      if (other.isSetIdentifier()) {
        this.identifier = other.identifier;
      }
    }

    public submitResult_args deepCopy() {
      return new submitResult_args(this);
    }

    @Override
    public void clear() {
      this.appType = null;
      this.jobLifecycle = null;
      this.resultType = null;
      this.content = null;
      this.resultChecksum = null;
      setTaskIdIsSet(false);
      this.taskId = 0;
      this.identifier = null;
    }

    /**
     * 
     * @see com.softsec.tase.common.rpc.domain.app.AppType
     */
    public com.softsec.tase.common.rpc.domain.app.AppType getAppType() {
      return this.appType;
    }

    /**
     * 
     * @see com.softsec.tase.common.rpc.domain.app.AppType
     */
    public submitResult_args setAppType(com.softsec.tase.common.rpc.domain.app.AppType appType) {
      this.appType = appType;
      return this;
    }

    public void unsetAppType() {
      this.appType = null;
    }

    /** Returns true if field appType is set (has been assigned a value) and false otherwise */
    public boolean isSetAppType() {
      return this.appType != null;
    }

    public void setAppTypeIsSet(boolean value) {
      if (!value) {
        this.appType = null;
      }
    }

    /**
     * 
     * @see com.softsec.tase.common.rpc.domain.job.JobLifecycle
     */
    public com.softsec.tase.common.rpc.domain.job.JobLifecycle getJobLifecycle() {
      return this.jobLifecycle;
    }

    /**
     * 
     * @see com.softsec.tase.common.rpc.domain.job.JobLifecycle
     */
    public submitResult_args setJobLifecycle(com.softsec.tase.common.rpc.domain.job.JobLifecycle jobLifecycle) {
      this.jobLifecycle = jobLifecycle;
      return this;
    }

    public void unsetJobLifecycle() {
      this.jobLifecycle = null;
    }

    /** Returns true if field jobLifecycle is set (has been assigned a value) and false otherwise */
    public boolean isSetJobLifecycle() {
      return this.jobLifecycle != null;
    }

    public void setJobLifecycleIsSet(boolean value) {
      if (!value) {
        this.jobLifecycle = null;
      }
    }

    /**
     * 
     * @see com.softsec.tase.common.rpc.domain.job.JobPhase
     */
    public com.softsec.tase.common.rpc.domain.job.JobPhase getResultType() {
      return this.resultType;
    }

    /**
     * 
     * @see com.softsec.tase.common.rpc.domain.job.JobPhase
     */
    public submitResult_args setResultType(com.softsec.tase.common.rpc.domain.job.JobPhase resultType) {
      this.resultType = resultType;
      return this;
    }

    public void unsetResultType() {
      this.resultType = null;
    }

    /** Returns true if field resultType is set (has been assigned a value) and false otherwise */
    public boolean isSetResultType() {
      return this.resultType != null;
    }

    public void setResultTypeIsSet(boolean value) {
      if (!value) {
        this.resultType = null;
      }
    }

    public byte[] getContent() {
      setContent(org.apache.thrift.TBaseHelper.rightSize(content));
      return content == null ? null : content.array();
    }

    public ByteBuffer bufferForContent() {
      return content;
    }

    public submitResult_args setContent(byte[] content) {
      setContent(content == null ? (ByteBuffer)null : ByteBuffer.wrap(content));
      return this;
    }

    public submitResult_args setContent(ByteBuffer content) {
      this.content = content;
      return this;
    }

    public void unsetContent() {
      this.content = null;
    }

    /** Returns true if field content is set (has been assigned a value) and false otherwise */
    public boolean isSetContent() {
      return this.content != null;
    }

    public void setContentIsSet(boolean value) {
      if (!value) {
        this.content = null;
      }
    }

    public String getResultChecksum() {
      return this.resultChecksum;
    }

    public submitResult_args setResultChecksum(String resultChecksum) {
      this.resultChecksum = resultChecksum;
      return this;
    }

    public void unsetResultChecksum() {
      this.resultChecksum = null;
    }

    /** Returns true if field resultChecksum is set (has been assigned a value) and false otherwise */
    public boolean isSetResultChecksum() {
      return this.resultChecksum != null;
    }

    public void setResultChecksumIsSet(boolean value) {
      if (!value) {
        this.resultChecksum = null;
      }
    }

    public long getTaskId() {
      return this.taskId;
    }

    public submitResult_args setTaskId(long taskId) {
      this.taskId = taskId;
      setTaskIdIsSet(true);
      return this;
    }

    public void unsetTaskId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TASKID_ISSET_ID);
    }

    /** Returns true if field taskId is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskId() {
      return EncodingUtils.testBit(__isset_bitfield, __TASKID_ISSET_ID);
    }

    public void setTaskIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TASKID_ISSET_ID, value);
    }

    public String getIdentifier() {
      return this.identifier;
    }

    public submitResult_args setIdentifier(String identifier) {
      this.identifier = identifier;
      return this;
    }

    public void unsetIdentifier() {
      this.identifier = null;
    }

    /** Returns true if field identifier is set (has been assigned a value) and false otherwise */
    public boolean isSetIdentifier() {
      return this.identifier != null;
    }

    public void setIdentifierIsSet(boolean value) {
      if (!value) {
        this.identifier = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_TYPE:
        if (value == null) {
          unsetAppType();
        } else {
          setAppType((com.softsec.tase.common.rpc.domain.app.AppType)value);
        }
        break;

      case JOB_LIFECYCLE:
        if (value == null) {
          unsetJobLifecycle();
        } else {
          setJobLifecycle((com.softsec.tase.common.rpc.domain.job.JobLifecycle)value);
        }
        break;

      case RESULT_TYPE:
        if (value == null) {
          unsetResultType();
        } else {
          setResultType((com.softsec.tase.common.rpc.domain.job.JobPhase)value);
        }
        break;

      case CONTENT:
        if (value == null) {
          unsetContent();
        } else {
          setContent((ByteBuffer)value);
        }
        break;

      case RESULT_CHECKSUM:
        if (value == null) {
          unsetResultChecksum();
        } else {
          setResultChecksum((String)value);
        }
        break;

      case TASK_ID:
        if (value == null) {
          unsetTaskId();
        } else {
          setTaskId((Long)value);
        }
        break;

      case IDENTIFIER:
        if (value == null) {
          unsetIdentifier();
        } else {
          setIdentifier((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_TYPE:
        return getAppType();

      case JOB_LIFECYCLE:
        return getJobLifecycle();

      case RESULT_TYPE:
        return getResultType();

      case CONTENT:
        return getContent();

      case RESULT_CHECKSUM:
        return getResultChecksum();

      case TASK_ID:
        return Long.valueOf(getTaskId());

      case IDENTIFIER:
        return getIdentifier();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_TYPE:
        return isSetAppType();
      case JOB_LIFECYCLE:
        return isSetJobLifecycle();
      case RESULT_TYPE:
        return isSetResultType();
      case CONTENT:
        return isSetContent();
      case RESULT_CHECKSUM:
        return isSetResultChecksum();
      case TASK_ID:
        return isSetTaskId();
      case IDENTIFIER:
        return isSetIdentifier();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof submitResult_args)
        return this.equals((submitResult_args)that);
      return false;
    }

    public boolean equals(submitResult_args that) {
      if (that == null)
        return false;

      boolean this_present_appType = true && this.isSetAppType();
      boolean that_present_appType = true && that.isSetAppType();
      if (this_present_appType || that_present_appType) {
        if (!(this_present_appType && that_present_appType))
          return false;
        if (!this.appType.equals(that.appType))
          return false;
      }

      boolean this_present_jobLifecycle = true && this.isSetJobLifecycle();
      boolean that_present_jobLifecycle = true && that.isSetJobLifecycle();
      if (this_present_jobLifecycle || that_present_jobLifecycle) {
        if (!(this_present_jobLifecycle && that_present_jobLifecycle))
          return false;
        if (!this.jobLifecycle.equals(that.jobLifecycle))
          return false;
      }

      boolean this_present_resultType = true && this.isSetResultType();
      boolean that_present_resultType = true && that.isSetResultType();
      if (this_present_resultType || that_present_resultType) {
        if (!(this_present_resultType && that_present_resultType))
          return false;
        if (!this.resultType.equals(that.resultType))
          return false;
      }

      boolean this_present_content = true && this.isSetContent();
      boolean that_present_content = true && that.isSetContent();
      if (this_present_content || that_present_content) {
        if (!(this_present_content && that_present_content))
          return false;
        if (!this.content.equals(that.content))
          return false;
      }

      boolean this_present_resultChecksum = true && this.isSetResultChecksum();
      boolean that_present_resultChecksum = true && that.isSetResultChecksum();
      if (this_present_resultChecksum || that_present_resultChecksum) {
        if (!(this_present_resultChecksum && that_present_resultChecksum))
          return false;
        if (!this.resultChecksum.equals(that.resultChecksum))
          return false;
      }

      boolean this_present_taskId = true;
      boolean that_present_taskId = true;
      if (this_present_taskId || that_present_taskId) {
        if (!(this_present_taskId && that_present_taskId))
          return false;
        if (this.taskId != that.taskId)
          return false;
      }

      boolean this_present_identifier = true && this.isSetIdentifier();
      boolean that_present_identifier = true && that.isSetIdentifier();
      if (this_present_identifier || that_present_identifier) {
        if (!(this_present_identifier && that_present_identifier))
          return false;
        if (!this.identifier.equals(that.identifier))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(submitResult_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      submitResult_args typedOther = (submitResult_args)other;

      lastComparison = Boolean.valueOf(isSetAppType()).compareTo(typedOther.isSetAppType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appType, typedOther.appType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetJobLifecycle()).compareTo(typedOther.isSetJobLifecycle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobLifecycle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobLifecycle, typedOther.jobLifecycle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetResultType()).compareTo(typedOther.isSetResultType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResultType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultType, typedOther.resultType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetContent()).compareTo(typedOther.isSetContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, typedOther.content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetResultChecksum()).compareTo(typedOther.isSetResultChecksum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResultChecksum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultChecksum, typedOther.resultChecksum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTaskId()).compareTo(typedOther.isSetTaskId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, typedOther.taskId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIdentifier()).compareTo(typedOther.isSetIdentifier());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdentifier()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identifier, typedOther.identifier);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("submitResult_args(");
      boolean first = true;

      sb.append("appType:");
      if (this.appType == null) {
        sb.append("null");
      } else {
        sb.append(this.appType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jobLifecycle:");
      if (this.jobLifecycle == null) {
        sb.append("null");
      } else {
        sb.append(this.jobLifecycle);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("resultType:");
      if (this.resultType == null) {
        sb.append("null");
      } else {
        sb.append(this.resultType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.content, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("resultChecksum:");
      if (this.resultChecksum == null) {
        sb.append("null");
      } else {
        sb.append(this.resultChecksum);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("taskId:");
      sb.append(this.taskId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("identifier:");
      if (this.identifier == null) {
        sb.append("null");
      } else {
        sb.append(this.identifier);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (appType == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'appType' was not present! Struct: " + toString());
      }
      if (jobLifecycle == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'jobLifecycle' was not present! Struct: " + toString());
      }
      if (resultType == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'resultType' was not present! Struct: " + toString());
      }
      if (content == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'content' was not present! Struct: " + toString());
      }
      if (resultChecksum == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'resultChecksum' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'taskId' because it's a primitive and you chose the non-beans generator.
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class submitResult_argsStandardSchemeFactory implements SchemeFactory {
      public submitResult_argsStandardScheme getScheme() {
        return new submitResult_argsStandardScheme();
      }
    }

    private static class submitResult_argsStandardScheme extends StandardScheme<submitResult_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, submitResult_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APP_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.appType = com.softsec.tase.common.rpc.domain.app.AppType.findByValue(iprot.readI32());
                struct.setAppTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // JOB_LIFECYCLE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.jobLifecycle = com.softsec.tase.common.rpc.domain.job.JobLifecycle.findByValue(iprot.readI32());
                struct.setJobLifecycleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RESULT_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.resultType = com.softsec.tase.common.rpc.domain.job.JobPhase.findByValue(iprot.readI32());
                struct.setResultTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.content = iprot.readBinary();
                struct.setContentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // RESULT_CHECKSUM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.resultChecksum = iprot.readString();
                struct.setResultChecksumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TASK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.taskId = iprot.readI64();
                struct.setTaskIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // IDENTIFIER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.identifier = iprot.readString();
                struct.setIdentifierIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetTaskId()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'taskId' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, submitResult_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.appType != null) {
          oprot.writeFieldBegin(APP_TYPE_FIELD_DESC);
          oprot.writeI32(struct.appType.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.jobLifecycle != null) {
          oprot.writeFieldBegin(JOB_LIFECYCLE_FIELD_DESC);
          oprot.writeI32(struct.jobLifecycle.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.resultType != null) {
          oprot.writeFieldBegin(RESULT_TYPE_FIELD_DESC);
          oprot.writeI32(struct.resultType.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.content != null) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeBinary(struct.content);
          oprot.writeFieldEnd();
        }
        if (struct.resultChecksum != null) {
          oprot.writeFieldBegin(RESULT_CHECKSUM_FIELD_DESC);
          oprot.writeString(struct.resultChecksum);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
        oprot.writeI64(struct.taskId);
        oprot.writeFieldEnd();
        if (struct.identifier != null) {
          oprot.writeFieldBegin(IDENTIFIER_FIELD_DESC);
          oprot.writeString(struct.identifier);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class submitResult_argsTupleSchemeFactory implements SchemeFactory {
      public submitResult_argsTupleScheme getScheme() {
        return new submitResult_argsTupleScheme();
      }
    }

    private static class submitResult_argsTupleScheme extends TupleScheme<submitResult_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, submitResult_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeI32(struct.appType.getValue());
        oprot.writeI32(struct.jobLifecycle.getValue());
        oprot.writeI32(struct.resultType.getValue());
        oprot.writeBinary(struct.content);
        oprot.writeString(struct.resultChecksum);
        oprot.writeI64(struct.taskId);
        BitSet optionals = new BitSet();
        if (struct.isSetIdentifier()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIdentifier()) {
          oprot.writeString(struct.identifier);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, submitResult_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.appType = com.softsec.tase.common.rpc.domain.app.AppType.findByValue(iprot.readI32());
        struct.setAppTypeIsSet(true);
        struct.jobLifecycle = com.softsec.tase.common.rpc.domain.job.JobLifecycle.findByValue(iprot.readI32());
        struct.setJobLifecycleIsSet(true);
        struct.resultType = com.softsec.tase.common.rpc.domain.job.JobPhase.findByValue(iprot.readI32());
        struct.setResultTypeIsSet(true);
        struct.content = iprot.readBinary();
        struct.setContentIsSet(true);
        struct.resultChecksum = iprot.readString();
        struct.setResultChecksumIsSet(true);
        struct.taskId = iprot.readI64();
        struct.setTaskIdIsSet(true);
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.identifier = iprot.readString();
          struct.setIdentifierIsSet(true);
        }
      }
    }

  }

  public static class submitResult_result implements org.apache.thrift.TBase<submitResult_result, submitResult_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("submitResult_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField TE_FIELD_DESC = new org.apache.thrift.protocol.TField("te", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new submitResult_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new submitResult_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.softsec.tase.common.rpc.exception.InvalidRequestException ire; // required
    public com.softsec.tase.common.rpc.exception.UnavailableException ue; // required
    public com.softsec.tase.common.rpc.exception.TimeoutException te; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      UE((short)2, "ue"),
      TE((short)3, "te");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // UE
            return UE;
          case 3: // TE
            return TE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TE, new org.apache.thrift.meta_data.FieldMetaData("te", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(submitResult_result.class, metaDataMap);
    }

    public submitResult_result() {
    }

    public submitResult_result(
      int success,
      com.softsec.tase.common.rpc.exception.InvalidRequestException ire,
      com.softsec.tase.common.rpc.exception.UnavailableException ue,
      com.softsec.tase.common.rpc.exception.TimeoutException te)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ire = ire;
      this.ue = ue;
      this.te = te;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public submitResult_result(submitResult_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIre()) {
        this.ire = new com.softsec.tase.common.rpc.exception.InvalidRequestException(other.ire);
      }
      if (other.isSetUe()) {
        this.ue = new com.softsec.tase.common.rpc.exception.UnavailableException(other.ue);
      }
      if (other.isSetTe()) {
        this.te = new com.softsec.tase.common.rpc.exception.TimeoutException(other.te);
      }
    }

    public submitResult_result deepCopy() {
      return new submitResult_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ire = null;
      this.ue = null;
      this.te = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public submitResult_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.softsec.tase.common.rpc.exception.InvalidRequestException getIre() {
      return this.ire;
    }

    public submitResult_result setIre(com.softsec.tase.common.rpc.exception.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public com.softsec.tase.common.rpc.exception.UnavailableException getUe() {
      return this.ue;
    }

    public submitResult_result setUe(com.softsec.tase.common.rpc.exception.UnavailableException ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public com.softsec.tase.common.rpc.exception.TimeoutException getTe() {
      return this.te;
    }

    public submitResult_result setTe(com.softsec.tase.common.rpc.exception.TimeoutException te) {
      this.te = te;
      return this;
    }

    public void unsetTe() {
      this.te = null;
    }

    /** Returns true if field te is set (has been assigned a value) and false otherwise */
    public boolean isSetTe() {
      return this.te != null;
    }

    public void setTeIsSet(boolean value) {
      if (!value) {
        this.te = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((com.softsec.tase.common.rpc.exception.InvalidRequestException)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((com.softsec.tase.common.rpc.exception.UnavailableException)value);
        }
        break;

      case TE:
        if (value == null) {
          unsetTe();
        } else {
          setTe((com.softsec.tase.common.rpc.exception.TimeoutException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case IRE:
        return getIre();

      case UE:
        return getUe();

      case TE:
        return getTe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case UE:
        return isSetUe();
      case TE:
        return isSetTe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof submitResult_result)
        return this.equals((submitResult_result)that);
      return false;
    }

    public boolean equals(submitResult_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      boolean this_present_te = true && this.isSetTe();
      boolean that_present_te = true && that.isSetTe();
      if (this_present_te || that_present_te) {
        if (!(this_present_te && that_present_te))
          return false;
        if (!this.te.equals(that.te))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(submitResult_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      submitResult_result typedOther = (submitResult_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(typedOther.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, typedOther.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUe()).compareTo(typedOther.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, typedOther.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTe()).compareTo(typedOther.isSetTe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.te, typedOther.te);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("submitResult_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("te:");
      if (this.te == null) {
        sb.append("null");
      } else {
        sb.append(this.te);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class submitResult_resultStandardSchemeFactory implements SchemeFactory {
      public submitResult_resultStandardScheme getScheme() {
        return new submitResult_resultStandardScheme();
      }
    }

    private static class submitResult_resultStandardScheme extends StandardScheme<submitResult_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, submitResult_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new com.softsec.tase.common.rpc.exception.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new com.softsec.tase.common.rpc.exception.UnavailableException();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.te = new com.softsec.tase.common.rpc.exception.TimeoutException();
                struct.te.read(iprot);
                struct.setTeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, submitResult_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ue != null) {
          oprot.writeFieldBegin(UE_FIELD_DESC);
          struct.ue.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.te != null) {
          oprot.writeFieldBegin(TE_FIELD_DESC);
          struct.te.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class submitResult_resultTupleSchemeFactory implements SchemeFactory {
      public submitResult_resultTupleScheme getScheme() {
        return new submitResult_resultTupleScheme();
      }
    }

    private static class submitResult_resultTupleScheme extends TupleScheme<submitResult_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, submitResult_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetUe()) {
          optionals.set(2);
        }
        if (struct.isSetTe()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetUe()) {
          struct.ue.write(oprot);
        }
        if (struct.isSetTe()) {
          struct.te.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, submitResult_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new com.softsec.tase.common.rpc.exception.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ue = new com.softsec.tase.common.rpc.exception.UnavailableException();
          struct.ue.read(iprot);
          struct.setUeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.te = new com.softsec.tase.common.rpc.exception.TimeoutException();
          struct.te.read(iprot);
          struct.setTeIsSet(true);
        }
      }
    }

  }

  public static class transferData_args implements org.apache.thrift.TBase<transferData_args, transferData_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("transferData_args");

    private static final org.apache.thrift.protocol.TField APP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("appType", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField APP_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("appInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField APK_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("apkInfo", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField IMAGE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("imageList", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("result", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new transferData_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new transferData_argsTupleSchemeFactory());
    }

    /**
     * 
     * @see com.softsec.tase.common.rpc.domain.app.AppType
     */
    public com.softsec.tase.common.rpc.domain.app.AppType appType; // required
    public com.softsec.tase.common.rpc.domain.app.AppTransfer appInfo; // required
    public ByteBuffer apkInfo; // required
    public List<ByteBuffer> imageList; // required
    public ByteBuffer result; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see com.softsec.tase.common.rpc.domain.app.AppType
       */
      APP_TYPE((short)1, "appType"),
      APP_INFO((short)2, "appInfo"),
      APK_INFO((short)3, "apkInfo"),
      IMAGE_LIST((short)4, "imageList"),
      RESULT((short)5, "result");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_TYPE
            return APP_TYPE;
          case 2: // APP_INFO
            return APP_INFO;
          case 3: // APK_INFO
            return APK_INFO;
          case 4: // IMAGE_LIST
            return IMAGE_LIST;
          case 5: // RESULT
            return RESULT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("appType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.softsec.tase.common.rpc.domain.app.AppType.class)));
      tmpMap.put(_Fields.APP_INFO, new org.apache.thrift.meta_data.FieldMetaData("appInfo", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.softsec.tase.common.rpc.domain.app.AppTransfer.class)));
      tmpMap.put(_Fields.APK_INFO, new org.apache.thrift.meta_data.FieldMetaData("apkInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.IMAGE_LIST, new org.apache.thrift.meta_data.FieldMetaData("imageList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING              , true))));
      tmpMap.put(_Fields.RESULT, new org.apache.thrift.meta_data.FieldMetaData("result", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(transferData_args.class, metaDataMap);
    }

    public transferData_args() {
    }

    public transferData_args(
      com.softsec.tase.common.rpc.domain.app.AppType appType,
      com.softsec.tase.common.rpc.domain.app.AppTransfer appInfo,
      ByteBuffer apkInfo,
      List<ByteBuffer> imageList,
      ByteBuffer result)
    {
      this();
      this.appType = appType;
      this.appInfo = appInfo;
      this.apkInfo = apkInfo;
      this.imageList = imageList;
      this.result = result;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public transferData_args(transferData_args other) {
      if (other.isSetAppType()) {
        this.appType = other.appType;
      }
      if (other.isSetAppInfo()) {
        this.appInfo = new com.softsec.tase.common.rpc.domain.app.AppTransfer(other.appInfo);
      }
      if (other.isSetApkInfo()) {
        this.apkInfo = org.apache.thrift.TBaseHelper.copyBinary(other.apkInfo);
;
      }
      if (other.isSetImageList()) {
        List<ByteBuffer> __this__imageList = new ArrayList<ByteBuffer>();
        for (ByteBuffer other_element : other.imageList) {
          ByteBuffer temp_binary_element = org.apache.thrift.TBaseHelper.copyBinary(other_element);
;
          __this__imageList.add(temp_binary_element);
        }
        this.imageList = __this__imageList;
      }
      if (other.isSetResult()) {
        this.result = org.apache.thrift.TBaseHelper.copyBinary(other.result);
;
      }
    }

    public transferData_args deepCopy() {
      return new transferData_args(this);
    }

    @Override
    public void clear() {
      this.appType = null;
      this.appInfo = null;
      this.apkInfo = null;
      this.imageList = null;
      this.result = null;
    }

    /**
     * 
     * @see com.softsec.tase.common.rpc.domain.app.AppType
     */
    public com.softsec.tase.common.rpc.domain.app.AppType getAppType() {
      return this.appType;
    }

    /**
     * 
     * @see com.softsec.tase.common.rpc.domain.app.AppType
     */
    public transferData_args setAppType(com.softsec.tase.common.rpc.domain.app.AppType appType) {
      this.appType = appType;
      return this;
    }

    public void unsetAppType() {
      this.appType = null;
    }

    /** Returns true if field appType is set (has been assigned a value) and false otherwise */
    public boolean isSetAppType() {
      return this.appType != null;
    }

    public void setAppTypeIsSet(boolean value) {
      if (!value) {
        this.appType = null;
      }
    }

    public com.softsec.tase.common.rpc.domain.app.AppTransfer getAppInfo() {
      return this.appInfo;
    }

    public transferData_args setAppInfo(com.softsec.tase.common.rpc.domain.app.AppTransfer appInfo) {
      this.appInfo = appInfo;
      return this;
    }

    public void unsetAppInfo() {
      this.appInfo = null;
    }

    /** Returns true if field appInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetAppInfo() {
      return this.appInfo != null;
    }

    public void setAppInfoIsSet(boolean value) {
      if (!value) {
        this.appInfo = null;
      }
    }

    public byte[] getApkInfo() {
      setApkInfo(org.apache.thrift.TBaseHelper.rightSize(apkInfo));
      return apkInfo == null ? null : apkInfo.array();
    }

    public ByteBuffer bufferForApkInfo() {
      return apkInfo;
    }

    public transferData_args setApkInfo(byte[] apkInfo) {
      setApkInfo(apkInfo == null ? (ByteBuffer)null : ByteBuffer.wrap(apkInfo));
      return this;
    }

    public transferData_args setApkInfo(ByteBuffer apkInfo) {
      this.apkInfo = apkInfo;
      return this;
    }

    public void unsetApkInfo() {
      this.apkInfo = null;
    }

    /** Returns true if field apkInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetApkInfo() {
      return this.apkInfo != null;
    }

    public void setApkInfoIsSet(boolean value) {
      if (!value) {
        this.apkInfo = null;
      }
    }

    public int getImageListSize() {
      return (this.imageList == null) ? 0 : this.imageList.size();
    }

    public java.util.Iterator<ByteBuffer> getImageListIterator() {
      return (this.imageList == null) ? null : this.imageList.iterator();
    }

    public void addToImageList(ByteBuffer elem) {
      if (this.imageList == null) {
        this.imageList = new ArrayList<ByteBuffer>();
      }
      this.imageList.add(elem);
    }

    public List<ByteBuffer> getImageList() {
      return this.imageList;
    }

    public transferData_args setImageList(List<ByteBuffer> imageList) {
      this.imageList = imageList;
      return this;
    }

    public void unsetImageList() {
      this.imageList = null;
    }

    /** Returns true if field imageList is set (has been assigned a value) and false otherwise */
    public boolean isSetImageList() {
      return this.imageList != null;
    }

    public void setImageListIsSet(boolean value) {
      if (!value) {
        this.imageList = null;
      }
    }

    public byte[] getResult() {
      setResult(org.apache.thrift.TBaseHelper.rightSize(result));
      return result == null ? null : result.array();
    }

    public ByteBuffer bufferForResult() {
      return result;
    }

    public transferData_args setResult(byte[] result) {
      setResult(result == null ? (ByteBuffer)null : ByteBuffer.wrap(result));
      return this;
    }

    public transferData_args setResult(ByteBuffer result) {
      this.result = result;
      return this;
    }

    public void unsetResult() {
      this.result = null;
    }

    /** Returns true if field result is set (has been assigned a value) and false otherwise */
    public boolean isSetResult() {
      return this.result != null;
    }

    public void setResultIsSet(boolean value) {
      if (!value) {
        this.result = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_TYPE:
        if (value == null) {
          unsetAppType();
        } else {
          setAppType((com.softsec.tase.common.rpc.domain.app.AppType)value);
        }
        break;

      case APP_INFO:
        if (value == null) {
          unsetAppInfo();
        } else {
          setAppInfo((com.softsec.tase.common.rpc.domain.app.AppTransfer)value);
        }
        break;

      case APK_INFO:
        if (value == null) {
          unsetApkInfo();
        } else {
          setApkInfo((ByteBuffer)value);
        }
        break;

      case IMAGE_LIST:
        if (value == null) {
          unsetImageList();
        } else {
          setImageList((List<ByteBuffer>)value);
        }
        break;

      case RESULT:
        if (value == null) {
          unsetResult();
        } else {
          setResult((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_TYPE:
        return getAppType();

      case APP_INFO:
        return getAppInfo();

      case APK_INFO:
        return getApkInfo();

      case IMAGE_LIST:
        return getImageList();

      case RESULT:
        return getResult();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_TYPE:
        return isSetAppType();
      case APP_INFO:
        return isSetAppInfo();
      case APK_INFO:
        return isSetApkInfo();
      case IMAGE_LIST:
        return isSetImageList();
      case RESULT:
        return isSetResult();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof transferData_args)
        return this.equals((transferData_args)that);
      return false;
    }

    public boolean equals(transferData_args that) {
      if (that == null)
        return false;

      boolean this_present_appType = true && this.isSetAppType();
      boolean that_present_appType = true && that.isSetAppType();
      if (this_present_appType || that_present_appType) {
        if (!(this_present_appType && that_present_appType))
          return false;
        if (!this.appType.equals(that.appType))
          return false;
      }

      boolean this_present_appInfo = true && this.isSetAppInfo();
      boolean that_present_appInfo = true && that.isSetAppInfo();
      if (this_present_appInfo || that_present_appInfo) {
        if (!(this_present_appInfo && that_present_appInfo))
          return false;
        if (!this.appInfo.equals(that.appInfo))
          return false;
      }

      boolean this_present_apkInfo = true && this.isSetApkInfo();
      boolean that_present_apkInfo = true && that.isSetApkInfo();
      if (this_present_apkInfo || that_present_apkInfo) {
        if (!(this_present_apkInfo && that_present_apkInfo))
          return false;
        if (!this.apkInfo.equals(that.apkInfo))
          return false;
      }

      boolean this_present_imageList = true && this.isSetImageList();
      boolean that_present_imageList = true && that.isSetImageList();
      if (this_present_imageList || that_present_imageList) {
        if (!(this_present_imageList && that_present_imageList))
          return false;
        if (!this.imageList.equals(that.imageList))
          return false;
      }

      boolean this_present_result = true && this.isSetResult();
      boolean that_present_result = true && that.isSetResult();
      if (this_present_result || that_present_result) {
        if (!(this_present_result && that_present_result))
          return false;
        if (!this.result.equals(that.result))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(transferData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      transferData_args typedOther = (transferData_args)other;

      lastComparison = Boolean.valueOf(isSetAppType()).compareTo(typedOther.isSetAppType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appType, typedOther.appType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAppInfo()).compareTo(typedOther.isSetAppInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appInfo, typedOther.appInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApkInfo()).compareTo(typedOther.isSetApkInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApkInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apkInfo, typedOther.apkInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetImageList()).compareTo(typedOther.isSetImageList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetImageList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageList, typedOther.imageList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetResult()).compareTo(typedOther.isSetResult());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResult()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result, typedOther.result);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("transferData_args(");
      boolean first = true;

      sb.append("appType:");
      if (this.appType == null) {
        sb.append("null");
      } else {
        sb.append(this.appType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("appInfo:");
      if (this.appInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.appInfo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("apkInfo:");
      if (this.apkInfo == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.apkInfo, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("imageList:");
      if (this.imageList == null) {
        sb.append("null");
      } else {
        sb.append(this.imageList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("result:");
      if (this.result == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.result, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (appType == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'appType' was not present! Struct: " + toString());
      }
      if (appInfo == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'appInfo' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (appInfo != null) {
        appInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class transferData_argsStandardSchemeFactory implements SchemeFactory {
      public transferData_argsStandardScheme getScheme() {
        return new transferData_argsStandardScheme();
      }
    }

    private static class transferData_argsStandardScheme extends StandardScheme<transferData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, transferData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APP_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.appType = com.softsec.tase.common.rpc.domain.app.AppType.findByValue(iprot.readI32());
                struct.setAppTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // APP_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.appInfo = new com.softsec.tase.common.rpc.domain.app.AppTransfer();
                struct.appInfo.read(iprot);
                struct.setAppInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // APK_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.apkInfo = iprot.readBinary();
                struct.setApkInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // IMAGE_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.imageList = new ArrayList<ByteBuffer>(_list48.size);
                  for (int _i49 = 0; _i49 < _list48.size; ++_i49)
                  {
                    ByteBuffer _elem50; // required
                    _elem50 = iprot.readBinary();
                    struct.imageList.add(_elem50);
                  }
                  iprot.readListEnd();
                }
                struct.setImageListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // RESULT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.result = iprot.readBinary();
                struct.setResultIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, transferData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.appType != null) {
          oprot.writeFieldBegin(APP_TYPE_FIELD_DESC);
          oprot.writeI32(struct.appType.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.appInfo != null) {
          oprot.writeFieldBegin(APP_INFO_FIELD_DESC);
          struct.appInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.apkInfo != null) {
          oprot.writeFieldBegin(APK_INFO_FIELD_DESC);
          oprot.writeBinary(struct.apkInfo);
          oprot.writeFieldEnd();
        }
        if (struct.imageList != null) {
          oprot.writeFieldBegin(IMAGE_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.imageList.size()));
            for (ByteBuffer _iter51 : struct.imageList)
            {
              oprot.writeBinary(_iter51);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.result != null) {
          oprot.writeFieldBegin(RESULT_FIELD_DESC);
          oprot.writeBinary(struct.result);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class transferData_argsTupleSchemeFactory implements SchemeFactory {
      public transferData_argsTupleScheme getScheme() {
        return new transferData_argsTupleScheme();
      }
    }

    private static class transferData_argsTupleScheme extends TupleScheme<transferData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, transferData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeI32(struct.appType.getValue());
        struct.appInfo.write(oprot);
        BitSet optionals = new BitSet();
        if (struct.isSetApkInfo()) {
          optionals.set(0);
        }
        if (struct.isSetImageList()) {
          optionals.set(1);
        }
        if (struct.isSetResult()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetApkInfo()) {
          oprot.writeBinary(struct.apkInfo);
        }
        if (struct.isSetImageList()) {
          {
            oprot.writeI32(struct.imageList.size());
            for (ByteBuffer _iter52 : struct.imageList)
            {
              oprot.writeBinary(_iter52);
            }
          }
        }
        if (struct.isSetResult()) {
          oprot.writeBinary(struct.result);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, transferData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.appType = com.softsec.tase.common.rpc.domain.app.AppType.findByValue(iprot.readI32());
        struct.setAppTypeIsSet(true);
        struct.appInfo = new com.softsec.tase.common.rpc.domain.app.AppTransfer();
        struct.appInfo.read(iprot);
        struct.setAppInfoIsSet(true);
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.apkInfo = iprot.readBinary();
          struct.setApkInfoIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.imageList = new ArrayList<ByteBuffer>(_list53.size);
            for (int _i54 = 0; _i54 < _list53.size; ++_i54)
            {
              ByteBuffer _elem55; // required
              _elem55 = iprot.readBinary();
              struct.imageList.add(_elem55);
            }
          }
          struct.setImageListIsSet(true);
        }
        if (incoming.get(2)) {
          struct.result = iprot.readBinary();
          struct.setResultIsSet(true);
        }
      }
    }

  }

  public static class transferData_result implements org.apache.thrift.TBase<transferData_result, transferData_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("transferData_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField TE_FIELD_DESC = new org.apache.thrift.protocol.TField("te", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new transferData_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new transferData_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.softsec.tase.common.rpc.exception.InvalidRequestException ire; // required
    public com.softsec.tase.common.rpc.exception.UnavailableException ue; // required
    public com.softsec.tase.common.rpc.exception.TimeoutException te; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      UE((short)2, "ue"),
      TE((short)3, "te");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // UE
            return UE;
          case 3: // TE
            return TE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TE, new org.apache.thrift.meta_data.FieldMetaData("te", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(transferData_result.class, metaDataMap);
    }

    public transferData_result() {
    }

    public transferData_result(
      int success,
      com.softsec.tase.common.rpc.exception.InvalidRequestException ire,
      com.softsec.tase.common.rpc.exception.UnavailableException ue,
      com.softsec.tase.common.rpc.exception.TimeoutException te)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ire = ire;
      this.ue = ue;
      this.te = te;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public transferData_result(transferData_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIre()) {
        this.ire = new com.softsec.tase.common.rpc.exception.InvalidRequestException(other.ire);
      }
      if (other.isSetUe()) {
        this.ue = new com.softsec.tase.common.rpc.exception.UnavailableException(other.ue);
      }
      if (other.isSetTe()) {
        this.te = new com.softsec.tase.common.rpc.exception.TimeoutException(other.te);
      }
    }

    public transferData_result deepCopy() {
      return new transferData_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ire = null;
      this.ue = null;
      this.te = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public transferData_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.softsec.tase.common.rpc.exception.InvalidRequestException getIre() {
      return this.ire;
    }

    public transferData_result setIre(com.softsec.tase.common.rpc.exception.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public com.softsec.tase.common.rpc.exception.UnavailableException getUe() {
      return this.ue;
    }

    public transferData_result setUe(com.softsec.tase.common.rpc.exception.UnavailableException ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public com.softsec.tase.common.rpc.exception.TimeoutException getTe() {
      return this.te;
    }

    public transferData_result setTe(com.softsec.tase.common.rpc.exception.TimeoutException te) {
      this.te = te;
      return this;
    }

    public void unsetTe() {
      this.te = null;
    }

    /** Returns true if field te is set (has been assigned a value) and false otherwise */
    public boolean isSetTe() {
      return this.te != null;
    }

    public void setTeIsSet(boolean value) {
      if (!value) {
        this.te = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((com.softsec.tase.common.rpc.exception.InvalidRequestException)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((com.softsec.tase.common.rpc.exception.UnavailableException)value);
        }
        break;

      case TE:
        if (value == null) {
          unsetTe();
        } else {
          setTe((com.softsec.tase.common.rpc.exception.TimeoutException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case IRE:
        return getIre();

      case UE:
        return getUe();

      case TE:
        return getTe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case UE:
        return isSetUe();
      case TE:
        return isSetTe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof transferData_result)
        return this.equals((transferData_result)that);
      return false;
    }

    public boolean equals(transferData_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      boolean this_present_te = true && this.isSetTe();
      boolean that_present_te = true && that.isSetTe();
      if (this_present_te || that_present_te) {
        if (!(this_present_te && that_present_te))
          return false;
        if (!this.te.equals(that.te))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(transferData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      transferData_result typedOther = (transferData_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(typedOther.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, typedOther.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUe()).compareTo(typedOther.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, typedOther.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTe()).compareTo(typedOther.isSetTe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.te, typedOther.te);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("transferData_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("te:");
      if (this.te == null) {
        sb.append("null");
      } else {
        sb.append(this.te);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class transferData_resultStandardSchemeFactory implements SchemeFactory {
      public transferData_resultStandardScheme getScheme() {
        return new transferData_resultStandardScheme();
      }
    }

    private static class transferData_resultStandardScheme extends StandardScheme<transferData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, transferData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new com.softsec.tase.common.rpc.exception.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new com.softsec.tase.common.rpc.exception.UnavailableException();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.te = new com.softsec.tase.common.rpc.exception.TimeoutException();
                struct.te.read(iprot);
                struct.setTeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, transferData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ue != null) {
          oprot.writeFieldBegin(UE_FIELD_DESC);
          struct.ue.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.te != null) {
          oprot.writeFieldBegin(TE_FIELD_DESC);
          struct.te.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class transferData_resultTupleSchemeFactory implements SchemeFactory {
      public transferData_resultTupleScheme getScheme() {
        return new transferData_resultTupleScheme();
      }
    }

    private static class transferData_resultTupleScheme extends TupleScheme<transferData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, transferData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetUe()) {
          optionals.set(2);
        }
        if (struct.isSetTe()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetUe()) {
          struct.ue.write(oprot);
        }
        if (struct.isSetTe()) {
          struct.te.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, transferData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new com.softsec.tase.common.rpc.exception.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ue = new com.softsec.tase.common.rpc.exception.UnavailableException();
          struct.ue.read(iprot);
          struct.setUeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.te = new com.softsec.tase.common.rpc.exception.TimeoutException();
          struct.te.read(iprot);
          struct.setTeIsSet(true);
        }
      }
    }

  }

}
