/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.softsec.tase.common.rpc.domain.job;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * job resource requirement
 */
public class JobResourceRequirement implements org.apache.thrift.TBase<JobResourceRequirement, JobResourceRequirement._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JobResourceRequirement");

  private static final org.apache.thrift.protocol.TField JOB_LIFECYCLE_FIELD_DESC = new org.apache.thrift.protocol.TField("jobLifecycle", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField JOB_PHASE_FIELD_DESC = new org.apache.thrift.protocol.TField("jobPhase", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PROGRAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("programId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField EXECUTOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("executorId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CLUSTER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("clusterType", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField NODE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeType", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new JobResourceRequirementStandardSchemeFactory());
    schemes.put(TupleScheme.class, new JobResourceRequirementTupleSchemeFactory());
  }

  /**
   * 
   * @see JobLifecycle
   */
  public JobLifecycle jobLifecycle; // required
  /**
   * 
   * @see JobPhase
   */
  public JobPhase jobPhase; // required
  public long programId; // optional
  public String executorId; // optional
  /**
   * 
   * @see com.softsec.tase.common.rpc.domain.node.ClusterType
   */
  public com.softsec.tase.common.rpc.domain.node.ClusterType clusterType; // optional
  /**
   * 
   * @see com.softsec.tase.common.rpc.domain.node.NodeType
   */
  public com.softsec.tase.common.rpc.domain.node.NodeType nodeType; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see JobLifecycle
     */
    JOB_LIFECYCLE((short)1, "jobLifecycle"),
    /**
     * 
     * @see JobPhase
     */
    JOB_PHASE((short)2, "jobPhase"),
    PROGRAM_ID((short)3, "programId"),
    EXECUTOR_ID((short)4, "executorId"),
    /**
     * 
     * @see com.softsec.tase.common.rpc.domain.node.ClusterType
     */
    CLUSTER_TYPE((short)5, "clusterType"),
    /**
     * 
     * @see com.softsec.tase.common.rpc.domain.node.NodeType
     */
    NODE_TYPE((short)6, "nodeType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // JOB_LIFECYCLE
          return JOB_LIFECYCLE;
        case 2: // JOB_PHASE
          return JOB_PHASE;
        case 3: // PROGRAM_ID
          return PROGRAM_ID;
        case 4: // EXECUTOR_ID
          return EXECUTOR_ID;
        case 5: // CLUSTER_TYPE
          return CLUSTER_TYPE;
        case 6: // NODE_TYPE
          return NODE_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PROGRAMID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.PROGRAM_ID,_Fields.EXECUTOR_ID,_Fields.CLUSTER_TYPE,_Fields.NODE_TYPE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.JOB_LIFECYCLE, new org.apache.thrift.meta_data.FieldMetaData("jobLifecycle", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, JobLifecycle.class)));
    tmpMap.put(_Fields.JOB_PHASE, new org.apache.thrift.meta_data.FieldMetaData("jobPhase", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, JobPhase.class)));
    tmpMap.put(_Fields.PROGRAM_ID, new org.apache.thrift.meta_data.FieldMetaData("programId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXECUTOR_ID, new org.apache.thrift.meta_data.FieldMetaData("executorId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLUSTER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("clusterType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.softsec.tase.common.rpc.domain.node.ClusterType.class)));
    tmpMap.put(_Fields.NODE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("nodeType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.softsec.tase.common.rpc.domain.node.NodeType.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JobResourceRequirement.class, metaDataMap);
  }

  public JobResourceRequirement() {
  }

  public JobResourceRequirement(
    JobLifecycle jobLifecycle,
    JobPhase jobPhase)
  {
    this();
    this.jobLifecycle = jobLifecycle;
    this.jobPhase = jobPhase;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JobResourceRequirement(JobResourceRequirement other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetJobLifecycle()) {
      this.jobLifecycle = other.jobLifecycle;
    }
    if (other.isSetJobPhase()) {
      this.jobPhase = other.jobPhase;
    }
    this.programId = other.programId;
    if (other.isSetExecutorId()) {
      this.executorId = other.executorId;
    }
    if (other.isSetClusterType()) {
      this.clusterType = other.clusterType;
    }
    if (other.isSetNodeType()) {
      this.nodeType = other.nodeType;
    }
  }

  public JobResourceRequirement deepCopy() {
    return new JobResourceRequirement(this);
  }

  @Override
  public void clear() {
    this.jobLifecycle = null;
    this.jobPhase = null;
    setProgramIdIsSet(false);
    this.programId = 0;
    this.executorId = null;
    this.clusterType = null;
    this.nodeType = null;
  }

  /**
   * 
   * @see JobLifecycle
   */
  public JobLifecycle getJobLifecycle() {
    return this.jobLifecycle;
  }

  /**
   * 
   * @see JobLifecycle
   */
  public JobResourceRequirement setJobLifecycle(JobLifecycle jobLifecycle) {
    this.jobLifecycle = jobLifecycle;
    return this;
  }

  public void unsetJobLifecycle() {
    this.jobLifecycle = null;
  }

  /** Returns true if field jobLifecycle is set (has been assigned a value) and false otherwise */
  public boolean isSetJobLifecycle() {
    return this.jobLifecycle != null;
  }

  public void setJobLifecycleIsSet(boolean value) {
    if (!value) {
      this.jobLifecycle = null;
    }
  }

  /**
   * 
   * @see JobPhase
   */
  public JobPhase getJobPhase() {
    return this.jobPhase;
  }

  /**
   * 
   * @see JobPhase
   */
  public JobResourceRequirement setJobPhase(JobPhase jobPhase) {
    this.jobPhase = jobPhase;
    return this;
  }

  public void unsetJobPhase() {
    this.jobPhase = null;
  }

  /** Returns true if field jobPhase is set (has been assigned a value) and false otherwise */
  public boolean isSetJobPhase() {
    return this.jobPhase != null;
  }

  public void setJobPhaseIsSet(boolean value) {
    if (!value) {
      this.jobPhase = null;
    }
  }

  public long getProgramId() {
    return this.programId;
  }

  public JobResourceRequirement setProgramId(long programId) {
    this.programId = programId;
    setProgramIdIsSet(true);
    return this;
  }

  public void unsetProgramId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROGRAMID_ISSET_ID);
  }

  /** Returns true if field programId is set (has been assigned a value) and false otherwise */
  public boolean isSetProgramId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROGRAMID_ISSET_ID);
  }

  public void setProgramIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROGRAMID_ISSET_ID, value);
  }

  public String getExecutorId() {
    return this.executorId;
  }

  public JobResourceRequirement setExecutorId(String executorId) {
    this.executorId = executorId;
    return this;
  }

  public void unsetExecutorId() {
    this.executorId = null;
  }

  /** Returns true if field executorId is set (has been assigned a value) and false otherwise */
  public boolean isSetExecutorId() {
    return this.executorId != null;
  }

  public void setExecutorIdIsSet(boolean value) {
    if (!value) {
      this.executorId = null;
    }
  }

  /**
   * 
   * @see com.softsec.tase.common.rpc.domain.node.ClusterType
   */
  public com.softsec.tase.common.rpc.domain.node.ClusterType getClusterType() {
    return this.clusterType;
  }

  /**
   * 
   * @see com.softsec.tase.common.rpc.domain.node.ClusterType
   */
  public JobResourceRequirement setClusterType(com.softsec.tase.common.rpc.domain.node.ClusterType clusterType) {
    this.clusterType = clusterType;
    return this;
  }

  public void unsetClusterType() {
    this.clusterType = null;
  }

  /** Returns true if field clusterType is set (has been assigned a value) and false otherwise */
  public boolean isSetClusterType() {
    return this.clusterType != null;
  }

  public void setClusterTypeIsSet(boolean value) {
    if (!value) {
      this.clusterType = null;
    }
  }

  /**
   * 
   * @see com.softsec.tase.common.rpc.domain.node.NodeType
   */
  public com.softsec.tase.common.rpc.domain.node.NodeType getNodeType() {
    return this.nodeType;
  }

  /**
   * 
   * @see com.softsec.tase.common.rpc.domain.node.NodeType
   */
  public JobResourceRequirement setNodeType(com.softsec.tase.common.rpc.domain.node.NodeType nodeType) {
    this.nodeType = nodeType;
    return this;
  }

  public void unsetNodeType() {
    this.nodeType = null;
  }

  /** Returns true if field nodeType is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeType() {
    return this.nodeType != null;
  }

  public void setNodeTypeIsSet(boolean value) {
    if (!value) {
      this.nodeType = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case JOB_LIFECYCLE:
      if (value == null) {
        unsetJobLifecycle();
      } else {
        setJobLifecycle((JobLifecycle)value);
      }
      break;

    case JOB_PHASE:
      if (value == null) {
        unsetJobPhase();
      } else {
        setJobPhase((JobPhase)value);
      }
      break;

    case PROGRAM_ID:
      if (value == null) {
        unsetProgramId();
      } else {
        setProgramId((Long)value);
      }
      break;

    case EXECUTOR_ID:
      if (value == null) {
        unsetExecutorId();
      } else {
        setExecutorId((String)value);
      }
      break;

    case CLUSTER_TYPE:
      if (value == null) {
        unsetClusterType();
      } else {
        setClusterType((com.softsec.tase.common.rpc.domain.node.ClusterType)value);
      }
      break;

    case NODE_TYPE:
      if (value == null) {
        unsetNodeType();
      } else {
        setNodeType((com.softsec.tase.common.rpc.domain.node.NodeType)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case JOB_LIFECYCLE:
      return getJobLifecycle();

    case JOB_PHASE:
      return getJobPhase();

    case PROGRAM_ID:
      return Long.valueOf(getProgramId());

    case EXECUTOR_ID:
      return getExecutorId();

    case CLUSTER_TYPE:
      return getClusterType();

    case NODE_TYPE:
      return getNodeType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case JOB_LIFECYCLE:
      return isSetJobLifecycle();
    case JOB_PHASE:
      return isSetJobPhase();
    case PROGRAM_ID:
      return isSetProgramId();
    case EXECUTOR_ID:
      return isSetExecutorId();
    case CLUSTER_TYPE:
      return isSetClusterType();
    case NODE_TYPE:
      return isSetNodeType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof JobResourceRequirement)
      return this.equals((JobResourceRequirement)that);
    return false;
  }

  public boolean equals(JobResourceRequirement that) {
    if (that == null)
      return false;

    boolean this_present_jobLifecycle = true && this.isSetJobLifecycle();
    boolean that_present_jobLifecycle = true && that.isSetJobLifecycle();
    if (this_present_jobLifecycle || that_present_jobLifecycle) {
      if (!(this_present_jobLifecycle && that_present_jobLifecycle))
        return false;
      if (!this.jobLifecycle.equals(that.jobLifecycle))
        return false;
    }

    boolean this_present_jobPhase = true && this.isSetJobPhase();
    boolean that_present_jobPhase = true && that.isSetJobPhase();
    if (this_present_jobPhase || that_present_jobPhase) {
      if (!(this_present_jobPhase && that_present_jobPhase))
        return false;
      if (!this.jobPhase.equals(that.jobPhase))
        return false;
    }

    boolean this_present_programId = true && this.isSetProgramId();
    boolean that_present_programId = true && that.isSetProgramId();
    if (this_present_programId || that_present_programId) {
      if (!(this_present_programId && that_present_programId))
        return false;
      if (this.programId != that.programId)
        return false;
    }

    boolean this_present_executorId = true && this.isSetExecutorId();
    boolean that_present_executorId = true && that.isSetExecutorId();
    if (this_present_executorId || that_present_executorId) {
      if (!(this_present_executorId && that_present_executorId))
        return false;
      if (!this.executorId.equals(that.executorId))
        return false;
    }

    boolean this_present_clusterType = true && this.isSetClusterType();
    boolean that_present_clusterType = true && that.isSetClusterType();
    if (this_present_clusterType || that_present_clusterType) {
      if (!(this_present_clusterType && that_present_clusterType))
        return false;
      if (!this.clusterType.equals(that.clusterType))
        return false;
    }

    boolean this_present_nodeType = true && this.isSetNodeType();
    boolean that_present_nodeType = true && that.isSetNodeType();
    if (this_present_nodeType || that_present_nodeType) {
      if (!(this_present_nodeType && that_present_nodeType))
        return false;
      if (!this.nodeType.equals(that.nodeType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(JobResourceRequirement other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    JobResourceRequirement typedOther = (JobResourceRequirement)other;

    lastComparison = Boolean.valueOf(isSetJobLifecycle()).compareTo(typedOther.isSetJobLifecycle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobLifecycle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobLifecycle, typedOther.jobLifecycle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobPhase()).compareTo(typedOther.isSetJobPhase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobPhase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobPhase, typedOther.jobPhase);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProgramId()).compareTo(typedOther.isSetProgramId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProgramId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.programId, typedOther.programId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecutorId()).compareTo(typedOther.isSetExecutorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecutorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executorId, typedOther.executorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClusterType()).compareTo(typedOther.isSetClusterType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClusterType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clusterType, typedOther.clusterType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNodeType()).compareTo(typedOther.isSetNodeType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeType, typedOther.nodeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("JobResourceRequirement(");
    boolean first = true;

    sb.append("jobLifecycle:");
    if (this.jobLifecycle == null) {
      sb.append("null");
    } else {
      sb.append(this.jobLifecycle);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jobPhase:");
    if (this.jobPhase == null) {
      sb.append("null");
    } else {
      sb.append(this.jobPhase);
    }
    first = false;
    if (isSetProgramId()) {
      if (!first) sb.append(", ");
      sb.append("programId:");
      sb.append(this.programId);
      first = false;
    }
    if (isSetExecutorId()) {
      if (!first) sb.append(", ");
      sb.append("executorId:");
      if (this.executorId == null) {
        sb.append("null");
      } else {
        sb.append(this.executorId);
      }
      first = false;
    }
    if (isSetClusterType()) {
      if (!first) sb.append(", ");
      sb.append("clusterType:");
      if (this.clusterType == null) {
        sb.append("null");
      } else {
        sb.append(this.clusterType);
      }
      first = false;
    }
    if (isSetNodeType()) {
      if (!first) sb.append(", ");
      sb.append("nodeType:");
      if (this.nodeType == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeType);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (jobLifecycle == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'jobLifecycle' was not present! Struct: " + toString());
    }
    if (jobPhase == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'jobPhase' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JobResourceRequirementStandardSchemeFactory implements SchemeFactory {
    public JobResourceRequirementStandardScheme getScheme() {
      return new JobResourceRequirementStandardScheme();
    }
  }

  private static class JobResourceRequirementStandardScheme extends StandardScheme<JobResourceRequirement> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JobResourceRequirement struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // JOB_LIFECYCLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.jobLifecycle = JobLifecycle.findByValue(iprot.readI32());
              struct.setJobLifecycleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // JOB_PHASE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.jobPhase = JobPhase.findByValue(iprot.readI32());
              struct.setJobPhaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROGRAM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.programId = iprot.readI64();
              struct.setProgramIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXECUTOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.executorId = iprot.readString();
              struct.setExecutorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CLUSTER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.clusterType = com.softsec.tase.common.rpc.domain.node.ClusterType.findByValue(iprot.readI32());
              struct.setClusterTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NODE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nodeType = com.softsec.tase.common.rpc.domain.node.NodeType.findByValue(iprot.readI32());
              struct.setNodeTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JobResourceRequirement struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.jobLifecycle != null) {
        oprot.writeFieldBegin(JOB_LIFECYCLE_FIELD_DESC);
        oprot.writeI32(struct.jobLifecycle.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.jobPhase != null) {
        oprot.writeFieldBegin(JOB_PHASE_FIELD_DESC);
        oprot.writeI32(struct.jobPhase.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.isSetProgramId()) {
        oprot.writeFieldBegin(PROGRAM_ID_FIELD_DESC);
        oprot.writeI64(struct.programId);
        oprot.writeFieldEnd();
      }
      if (struct.executorId != null) {
        if (struct.isSetExecutorId()) {
          oprot.writeFieldBegin(EXECUTOR_ID_FIELD_DESC);
          oprot.writeString(struct.executorId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.clusterType != null) {
        if (struct.isSetClusterType()) {
          oprot.writeFieldBegin(CLUSTER_TYPE_FIELD_DESC);
          oprot.writeI32(struct.clusterType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.nodeType != null) {
        if (struct.isSetNodeType()) {
          oprot.writeFieldBegin(NODE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.nodeType.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class JobResourceRequirementTupleSchemeFactory implements SchemeFactory {
    public JobResourceRequirementTupleScheme getScheme() {
      return new JobResourceRequirementTupleScheme();
    }
  }

  private static class JobResourceRequirementTupleScheme extends TupleScheme<JobResourceRequirement> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, JobResourceRequirement struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.jobLifecycle.getValue());
      oprot.writeI32(struct.jobPhase.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetProgramId()) {
        optionals.set(0);
      }
      if (struct.isSetExecutorId()) {
        optionals.set(1);
      }
      if (struct.isSetClusterType()) {
        optionals.set(2);
      }
      if (struct.isSetNodeType()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetProgramId()) {
        oprot.writeI64(struct.programId);
      }
      if (struct.isSetExecutorId()) {
        oprot.writeString(struct.executorId);
      }
      if (struct.isSetClusterType()) {
        oprot.writeI32(struct.clusterType.getValue());
      }
      if (struct.isSetNodeType()) {
        oprot.writeI32(struct.nodeType.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, JobResourceRequirement struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.jobLifecycle = JobLifecycle.findByValue(iprot.readI32());
      struct.setJobLifecycleIsSet(true);
      struct.jobPhase = JobPhase.findByValue(iprot.readI32());
      struct.setJobPhaseIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.programId = iprot.readI64();
        struct.setProgramIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.executorId = iprot.readString();
        struct.setExecutorIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.clusterType = com.softsec.tase.common.rpc.domain.node.ClusterType.findByValue(iprot.readI32());
        struct.setClusterTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.nodeType = com.softsec.tase.common.rpc.domain.node.NodeType.findByValue(iprot.readI32());
        struct.setNodeTypeIsSet(true);
      }
    }
  }

}

