/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.softsec.tase.common.rpc.domain.job;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * container context parameter
 */
public class ContextParameter implements org.apache.thrift.TBase<ContextParameter, ContextParameter._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ContextParameter");

  private static final org.apache.thrift.protocol.TField SEQUENCE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("sequenceNum", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField OPT_FIELD_DESC = new org.apache.thrift.protocol.TField("opt", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField NEED_DOWNLOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("needDownload", org.apache.thrift.protocol.TType.BOOL, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ContextParameterStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ContextParameterTupleSchemeFactory());
  }

  public int sequenceNum; // required
  public String opt; // optional
  public String content; // optional
  public boolean needDownload; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SEQUENCE_NUM((short)1, "sequenceNum"),
    OPT((short)2, "opt"),
    CONTENT((short)3, "content"),
    NEED_DOWNLOAD((short)4, "needDownload");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SEQUENCE_NUM
          return SEQUENCE_NUM;
        case 2: // OPT
          return OPT;
        case 3: // CONTENT
          return CONTENT;
        case 4: // NEED_DOWNLOAD
          return NEED_DOWNLOAD;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SEQUENCENUM_ISSET_ID = 0;
  private static final int __NEEDDOWNLOAD_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.OPT,_Fields.CONTENT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SEQUENCE_NUM, new org.apache.thrift.meta_data.FieldMetaData("sequenceNum", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPT, new org.apache.thrift.meta_data.FieldMetaData("opt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NEED_DOWNLOAD, new org.apache.thrift.meta_data.FieldMetaData("needDownload", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ContextParameter.class, metaDataMap);
  }

  public ContextParameter() {
  }

  public ContextParameter(
    int sequenceNum,
    boolean needDownload)
  {
    this();
    this.sequenceNum = sequenceNum;
    setSequenceNumIsSet(true);
    this.needDownload = needDownload;
    setNeedDownloadIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ContextParameter(ContextParameter other) {
    __isset_bitfield = other.__isset_bitfield;
    this.sequenceNum = other.sequenceNum;
    if (other.isSetOpt()) {
      this.opt = other.opt;
    }
    if (other.isSetContent()) {
      this.content = other.content;
    }
    this.needDownload = other.needDownload;
  }

  public ContextParameter deepCopy() {
    return new ContextParameter(this);
  }

  @Override
  public void clear() {
    setSequenceNumIsSet(false);
    this.sequenceNum = 0;
    this.opt = null;
    this.content = null;
    setNeedDownloadIsSet(false);
    this.needDownload = false;
  }

  public int getSequenceNum() {
    return this.sequenceNum;
  }

  public ContextParameter setSequenceNum(int sequenceNum) {
    this.sequenceNum = sequenceNum;
    setSequenceNumIsSet(true);
    return this;
  }

  public void unsetSequenceNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEQUENCENUM_ISSET_ID);
  }

  /** Returns true if field sequenceNum is set (has been assigned a value) and false otherwise */
  public boolean isSetSequenceNum() {
    return EncodingUtils.testBit(__isset_bitfield, __SEQUENCENUM_ISSET_ID);
  }

  public void setSequenceNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEQUENCENUM_ISSET_ID, value);
  }

  public String getOpt() {
    return this.opt;
  }

  public ContextParameter setOpt(String opt) {
    this.opt = opt;
    return this;
  }

  public void unsetOpt() {
    this.opt = null;
  }

  /** Returns true if field opt is set (has been assigned a value) and false otherwise */
  public boolean isSetOpt() {
    return this.opt != null;
  }

  public void setOptIsSet(boolean value) {
    if (!value) {
      this.opt = null;
    }
  }

  public String getContent() {
    return this.content;
  }

  public ContextParameter setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public boolean isNeedDownload() {
    return this.needDownload;
  }

  public ContextParameter setNeedDownload(boolean needDownload) {
    this.needDownload = needDownload;
    setNeedDownloadIsSet(true);
    return this;
  }

  public void unsetNeedDownload() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEEDDOWNLOAD_ISSET_ID);
  }

  /** Returns true if field needDownload is set (has been assigned a value) and false otherwise */
  public boolean isSetNeedDownload() {
    return EncodingUtils.testBit(__isset_bitfield, __NEEDDOWNLOAD_ISSET_ID);
  }

  public void setNeedDownloadIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEEDDOWNLOAD_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SEQUENCE_NUM:
      if (value == null) {
        unsetSequenceNum();
      } else {
        setSequenceNum((Integer)value);
      }
      break;

    case OPT:
      if (value == null) {
        unsetOpt();
      } else {
        setOpt((String)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case NEED_DOWNLOAD:
      if (value == null) {
        unsetNeedDownload();
      } else {
        setNeedDownload((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SEQUENCE_NUM:
      return Integer.valueOf(getSequenceNum());

    case OPT:
      return getOpt();

    case CONTENT:
      return getContent();

    case NEED_DOWNLOAD:
      return Boolean.valueOf(isNeedDownload());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SEQUENCE_NUM:
      return isSetSequenceNum();
    case OPT:
      return isSetOpt();
    case CONTENT:
      return isSetContent();
    case NEED_DOWNLOAD:
      return isSetNeedDownload();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ContextParameter)
      return this.equals((ContextParameter)that);
    return false;
  }

  public boolean equals(ContextParameter that) {
    if (that == null)
      return false;

    boolean this_present_sequenceNum = true;
    boolean that_present_sequenceNum = true;
    if (this_present_sequenceNum || that_present_sequenceNum) {
      if (!(this_present_sequenceNum && that_present_sequenceNum))
        return false;
      if (this.sequenceNum != that.sequenceNum)
        return false;
    }

    boolean this_present_opt = true && this.isSetOpt();
    boolean that_present_opt = true && that.isSetOpt();
    if (this_present_opt || that_present_opt) {
      if (!(this_present_opt && that_present_opt))
        return false;
      if (!this.opt.equals(that.opt))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_needDownload = true;
    boolean that_present_needDownload = true;
    if (this_present_needDownload || that_present_needDownload) {
      if (!(this_present_needDownload && that_present_needDownload))
        return false;
      if (this.needDownload != that.needDownload)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ContextParameter other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ContextParameter typedOther = (ContextParameter)other;

    lastComparison = Boolean.valueOf(isSetSequenceNum()).compareTo(typedOther.isSetSequenceNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSequenceNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sequenceNum, typedOther.sequenceNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpt()).compareTo(typedOther.isSetOpt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opt, typedOther.opt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(typedOther.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, typedOther.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNeedDownload()).compareTo(typedOther.isSetNeedDownload());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNeedDownload()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.needDownload, typedOther.needDownload);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ContextParameter(");
    boolean first = true;

    sb.append("sequenceNum:");
    sb.append(this.sequenceNum);
    first = false;
    if (isSetOpt()) {
      if (!first) sb.append(", ");
      sb.append("opt:");
      if (this.opt == null) {
        sb.append("null");
      } else {
        sb.append(this.opt);
      }
      first = false;
    }
    if (isSetContent()) {
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("needDownload:");
    sb.append(this.needDownload);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'sequenceNum' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'needDownload' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ContextParameterStandardSchemeFactory implements SchemeFactory {
    public ContextParameterStandardScheme getScheme() {
      return new ContextParameterStandardScheme();
    }
  }

  private static class ContextParameterStandardScheme extends StandardScheme<ContextParameter> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ContextParameter struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SEQUENCE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sequenceNum = iprot.readI32();
              struct.setSequenceNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OPT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.opt = iprot.readString();
              struct.setOptIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NEED_DOWNLOAD
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.needDownload = iprot.readBool();
              struct.setNeedDownloadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetSequenceNum()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sequenceNum' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNeedDownload()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'needDownload' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ContextParameter struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SEQUENCE_NUM_FIELD_DESC);
      oprot.writeI32(struct.sequenceNum);
      oprot.writeFieldEnd();
      if (struct.opt != null) {
        if (struct.isSetOpt()) {
          oprot.writeFieldBegin(OPT_FIELD_DESC);
          oprot.writeString(struct.opt);
          oprot.writeFieldEnd();
        }
      }
      if (struct.content != null) {
        if (struct.isSetContent()) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(NEED_DOWNLOAD_FIELD_DESC);
      oprot.writeBool(struct.needDownload);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ContextParameterTupleSchemeFactory implements SchemeFactory {
    public ContextParameterTupleScheme getScheme() {
      return new ContextParameterTupleScheme();
    }
  }

  private static class ContextParameterTupleScheme extends TupleScheme<ContextParameter> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ContextParameter struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.sequenceNum);
      oprot.writeBool(struct.needDownload);
      BitSet optionals = new BitSet();
      if (struct.isSetOpt()) {
        optionals.set(0);
      }
      if (struct.isSetContent()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetOpt()) {
        oprot.writeString(struct.opt);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ContextParameter struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.sequenceNum = iprot.readI32();
      struct.setSequenceNumIsSet(true);
      struct.needDownload = iprot.readBool();
      struct.setNeedDownloadIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.opt = iprot.readString();
        struct.setOptIsSet(true);
      }
      if (incoming.get(1)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
    }
  }

}

