/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.softsec.tase.common.rpc.domain.app;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * app data move
 */
public class AppTransfer implements org.apache.thrift.TBase<AppTransfer, AppTransfer._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppTransfer");

  private static final org.apache.thrift.protocol.TField APP_CHECKSUM_FIELD_DESC = new org.apache.thrift.protocol.TField("appChecksum", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField APP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("appName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField WRAPPER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("wrapperId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField WRAPPER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("wrapperName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SUBJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("subject", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField SAVED_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("savedTime", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("size", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField COUNTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("country", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("price", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField DEVELOPER_FIELD_DESC = new org.apache.thrift.protocol.TField("developer", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField DEVICE_FIELD_DESC = new org.apache.thrift.protocol.TField("device", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField OS_FIELD_DESC = new org.apache.thrift.protocol.TField("os", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField OS_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("osVersion", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField DOWN_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("downUrl", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField DOWNLOAD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("downloadId", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField SNAPSHOT_URL_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("snapshotUrlList", org.apache.thrift.protocol.TType.LIST, (short)20);
  private static final org.apache.thrift.protocol.TField DOWNLOAD_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("downloadNum", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField IS_IMAGE_LOADED_FIELD_DESC = new org.apache.thrift.protocol.TField("isImageLoaded", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField IS_APK_LOADED_FIELD_DESC = new org.apache.thrift.protocol.TField("isApkLoaded", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField APP_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("appPath", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField CHECK_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("checkValue", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField RISK_FIELD_DESC = new org.apache.thrift.protocol.TField("risk", org.apache.thrift.protocol.TType.I32, (short)26);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AppTransferStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AppTransferTupleSchemeFactory());
  }

  public String appChecksum; // required
  public String appName; // optional
  public String wrapperId; // optional
  public String wrapperName; // optional
  public String subject; // optional
  public String version; // optional
  public long updateTime; // optional
  public long savedTime; // optional
  public String size; // optional
  public String description; // optional
  public String country; // optional
  public String price; // optional
  public String developer; // optional
  public String device; // optional
  public String os; // optional
  public String osVersion; // optional
  public String url; // optional
  public String downUrl; // optional
  public String downloadId; // optional
  public List<String> snapshotUrlList; // optional
  public int downloadNum; // optional
  public int isImageLoaded; // optional
  public int isApkLoaded; // optional
  public String appPath; // optional
  public int checkValue; // optional
  public int risk; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    APP_CHECKSUM((short)1, "appChecksum"),
    APP_NAME((short)2, "appName"),
    WRAPPER_ID((short)3, "wrapperId"),
    WRAPPER_NAME((short)4, "wrapperName"),
    SUBJECT((short)5, "subject"),
    VERSION((short)6, "version"),
    UPDATE_TIME((short)7, "updateTime"),
    SAVED_TIME((short)8, "savedTime"),
    SIZE((short)9, "size"),
    DESCRIPTION((short)10, "description"),
    COUNTRY((short)11, "country"),
    PRICE((short)12, "price"),
    DEVELOPER((short)13, "developer"),
    DEVICE((short)14, "device"),
    OS((short)15, "os"),
    OS_VERSION((short)16, "osVersion"),
    URL((short)17, "url"),
    DOWN_URL((short)18, "downUrl"),
    DOWNLOAD_ID((short)19, "downloadId"),
    SNAPSHOT_URL_LIST((short)20, "snapshotUrlList"),
    DOWNLOAD_NUM((short)21, "downloadNum"),
    IS_IMAGE_LOADED((short)22, "isImageLoaded"),
    IS_APK_LOADED((short)23, "isApkLoaded"),
    APP_PATH((short)24, "appPath"),
    CHECK_VALUE((short)25, "checkValue"),
    RISK((short)26, "risk");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // APP_CHECKSUM
          return APP_CHECKSUM;
        case 2: // APP_NAME
          return APP_NAME;
        case 3: // WRAPPER_ID
          return WRAPPER_ID;
        case 4: // WRAPPER_NAME
          return WRAPPER_NAME;
        case 5: // SUBJECT
          return SUBJECT;
        case 6: // VERSION
          return VERSION;
        case 7: // UPDATE_TIME
          return UPDATE_TIME;
        case 8: // SAVED_TIME
          return SAVED_TIME;
        case 9: // SIZE
          return SIZE;
        case 10: // DESCRIPTION
          return DESCRIPTION;
        case 11: // COUNTRY
          return COUNTRY;
        case 12: // PRICE
          return PRICE;
        case 13: // DEVELOPER
          return DEVELOPER;
        case 14: // DEVICE
          return DEVICE;
        case 15: // OS
          return OS;
        case 16: // OS_VERSION
          return OS_VERSION;
        case 17: // URL
          return URL;
        case 18: // DOWN_URL
          return DOWN_URL;
        case 19: // DOWNLOAD_ID
          return DOWNLOAD_ID;
        case 20: // SNAPSHOT_URL_LIST
          return SNAPSHOT_URL_LIST;
        case 21: // DOWNLOAD_NUM
          return DOWNLOAD_NUM;
        case 22: // IS_IMAGE_LOADED
          return IS_IMAGE_LOADED;
        case 23: // IS_APK_LOADED
          return IS_APK_LOADED;
        case 24: // APP_PATH
          return APP_PATH;
        case 25: // CHECK_VALUE
          return CHECK_VALUE;
        case 26: // RISK
          return RISK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __UPDATETIME_ISSET_ID = 0;
  private static final int __SAVEDTIME_ISSET_ID = 1;
  private static final int __DOWNLOADNUM_ISSET_ID = 2;
  private static final int __ISIMAGELOADED_ISSET_ID = 3;
  private static final int __ISAPKLOADED_ISSET_ID = 4;
  private static final int __CHECKVALUE_ISSET_ID = 5;
  private static final int __RISK_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.APP_NAME,_Fields.WRAPPER_ID,_Fields.WRAPPER_NAME,_Fields.SUBJECT,_Fields.VERSION,_Fields.UPDATE_TIME,_Fields.SAVED_TIME,_Fields.SIZE,_Fields.DESCRIPTION,_Fields.COUNTRY,_Fields.PRICE,_Fields.DEVELOPER,_Fields.DEVICE,_Fields.OS,_Fields.OS_VERSION,_Fields.URL,_Fields.DOWN_URL,_Fields.DOWNLOAD_ID,_Fields.SNAPSHOT_URL_LIST,_Fields.DOWNLOAD_NUM,_Fields.IS_IMAGE_LOADED,_Fields.IS_APK_LOADED,_Fields.APP_PATH,_Fields.CHECK_VALUE,_Fields.RISK};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.APP_CHECKSUM, new org.apache.thrift.meta_data.FieldMetaData("appChecksum", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_NAME, new org.apache.thrift.meta_data.FieldMetaData("appName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WRAPPER_ID, new org.apache.thrift.meta_data.FieldMetaData("wrapperId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WRAPPER_NAME, new org.apache.thrift.meta_data.FieldMetaData("wrapperName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUBJECT, new org.apache.thrift.meta_data.FieldMetaData("subject", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SAVED_TIME, new org.apache.thrift.meta_data.FieldMetaData("savedTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SIZE, new org.apache.thrift.meta_data.FieldMetaData("size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COUNTRY, new org.apache.thrift.meta_data.FieldMetaData("country", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRICE, new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEVELOPER, new org.apache.thrift.meta_data.FieldMetaData("developer", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEVICE, new org.apache.thrift.meta_data.FieldMetaData("device", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OS, new org.apache.thrift.meta_data.FieldMetaData("os", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OS_VERSION, new org.apache.thrift.meta_data.FieldMetaData("osVersion", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOWN_URL, new org.apache.thrift.meta_data.FieldMetaData("downUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOWNLOAD_ID, new org.apache.thrift.meta_data.FieldMetaData("downloadId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SNAPSHOT_URL_LIST, new org.apache.thrift.meta_data.FieldMetaData("snapshotUrlList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.DOWNLOAD_NUM, new org.apache.thrift.meta_data.FieldMetaData("downloadNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_IMAGE_LOADED, new org.apache.thrift.meta_data.FieldMetaData("isImageLoaded", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_APK_LOADED, new org.apache.thrift.meta_data.FieldMetaData("isApkLoaded", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.APP_PATH, new org.apache.thrift.meta_data.FieldMetaData("appPath", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHECK_VALUE, new org.apache.thrift.meta_data.FieldMetaData("checkValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RISK, new org.apache.thrift.meta_data.FieldMetaData("risk", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AppTransfer.class, metaDataMap);
  }

  public AppTransfer() {
  }

  public AppTransfer(
    String appChecksum)
  {
    this();
    this.appChecksum = appChecksum;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AppTransfer(AppTransfer other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAppChecksum()) {
      this.appChecksum = other.appChecksum;
    }
    if (other.isSetAppName()) {
      this.appName = other.appName;
    }
    if (other.isSetWrapperId()) {
      this.wrapperId = other.wrapperId;
    }
    if (other.isSetWrapperName()) {
      this.wrapperName = other.wrapperName;
    }
    if (other.isSetSubject()) {
      this.subject = other.subject;
    }
    if (other.isSetVersion()) {
      this.version = other.version;
    }
    this.updateTime = other.updateTime;
    this.savedTime = other.savedTime;
    if (other.isSetSize()) {
      this.size = other.size;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetCountry()) {
      this.country = other.country;
    }
    if (other.isSetPrice()) {
      this.price = other.price;
    }
    if (other.isSetDeveloper()) {
      this.developer = other.developer;
    }
    if (other.isSetDevice()) {
      this.device = other.device;
    }
    if (other.isSetOs()) {
      this.os = other.os;
    }
    if (other.isSetOsVersion()) {
      this.osVersion = other.osVersion;
    }
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    if (other.isSetDownUrl()) {
      this.downUrl = other.downUrl;
    }
    if (other.isSetDownloadId()) {
      this.downloadId = other.downloadId;
    }
    if (other.isSetSnapshotUrlList()) {
      List<String> __this__snapshotUrlList = new ArrayList<String>();
      for (String other_element : other.snapshotUrlList) {
        __this__snapshotUrlList.add(other_element);
      }
      this.snapshotUrlList = __this__snapshotUrlList;
    }
    this.downloadNum = other.downloadNum;
    this.isImageLoaded = other.isImageLoaded;
    this.isApkLoaded = other.isApkLoaded;
    if (other.isSetAppPath()) {
      this.appPath = other.appPath;
    }
    this.checkValue = other.checkValue;
    this.risk = other.risk;
  }

  public AppTransfer deepCopy() {
    return new AppTransfer(this);
  }

  @Override
  public void clear() {
    this.appChecksum = null;
    this.appName = null;
    this.wrapperId = null;
    this.wrapperName = null;
    this.subject = null;
    this.version = null;
    setUpdateTimeIsSet(false);
    this.updateTime = 0;
    setSavedTimeIsSet(false);
    this.savedTime = 0;
    this.size = null;
    this.description = null;
    this.country = null;
    this.price = null;
    this.developer = null;
    this.device = null;
    this.os = null;
    this.osVersion = null;
    this.url = null;
    this.downUrl = null;
    this.downloadId = null;
    this.snapshotUrlList = null;
    setDownloadNumIsSet(false);
    this.downloadNum = 0;
    setIsImageLoadedIsSet(false);
    this.isImageLoaded = 0;
    setIsApkLoadedIsSet(false);
    this.isApkLoaded = 0;
    this.appPath = null;
    setCheckValueIsSet(false);
    this.checkValue = 0;
    setRiskIsSet(false);
    this.risk = 0;
  }

  public String getAppChecksum() {
    return this.appChecksum;
  }

  public AppTransfer setAppChecksum(String appChecksum) {
    this.appChecksum = appChecksum;
    return this;
  }

  public void unsetAppChecksum() {
    this.appChecksum = null;
  }

  /** Returns true if field appChecksum is set (has been assigned a value) and false otherwise */
  public boolean isSetAppChecksum() {
    return this.appChecksum != null;
  }

  public void setAppChecksumIsSet(boolean value) {
    if (!value) {
      this.appChecksum = null;
    }
  }

  public String getAppName() {
    return this.appName;
  }

  public AppTransfer setAppName(String appName) {
    this.appName = appName;
    return this;
  }

  public void unsetAppName() {
    this.appName = null;
  }

  /** Returns true if field appName is set (has been assigned a value) and false otherwise */
  public boolean isSetAppName() {
    return this.appName != null;
  }

  public void setAppNameIsSet(boolean value) {
    if (!value) {
      this.appName = null;
    }
  }

  public String getWrapperId() {
    return this.wrapperId;
  }

  public AppTransfer setWrapperId(String wrapperId) {
    this.wrapperId = wrapperId;
    return this;
  }

  public void unsetWrapperId() {
    this.wrapperId = null;
  }

  /** Returns true if field wrapperId is set (has been assigned a value) and false otherwise */
  public boolean isSetWrapperId() {
    return this.wrapperId != null;
  }

  public void setWrapperIdIsSet(boolean value) {
    if (!value) {
      this.wrapperId = null;
    }
  }

  public String getWrapperName() {
    return this.wrapperName;
  }

  public AppTransfer setWrapperName(String wrapperName) {
    this.wrapperName = wrapperName;
    return this;
  }

  public void unsetWrapperName() {
    this.wrapperName = null;
  }

  /** Returns true if field wrapperName is set (has been assigned a value) and false otherwise */
  public boolean isSetWrapperName() {
    return this.wrapperName != null;
  }

  public void setWrapperNameIsSet(boolean value) {
    if (!value) {
      this.wrapperName = null;
    }
  }

  public String getSubject() {
    return this.subject;
  }

  public AppTransfer setSubject(String subject) {
    this.subject = subject;
    return this;
  }

  public void unsetSubject() {
    this.subject = null;
  }

  /** Returns true if field subject is set (has been assigned a value) and false otherwise */
  public boolean isSetSubject() {
    return this.subject != null;
  }

  public void setSubjectIsSet(boolean value) {
    if (!value) {
      this.subject = null;
    }
  }

  public String getVersion() {
    return this.version;
  }

  public AppTransfer setVersion(String version) {
    this.version = version;
    return this;
  }

  public void unsetVersion() {
    this.version = null;
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return this.version != null;
  }

  public void setVersionIsSet(boolean value) {
    if (!value) {
      this.version = null;
    }
  }

  public long getUpdateTime() {
    return this.updateTime;
  }

  public AppTransfer setUpdateTime(long updateTime) {
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    return this;
  }

  public void unsetUpdateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  public void setUpdateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATETIME_ISSET_ID, value);
  }

  public long getSavedTime() {
    return this.savedTime;
  }

  public AppTransfer setSavedTime(long savedTime) {
    this.savedTime = savedTime;
    setSavedTimeIsSet(true);
    return this;
  }

  public void unsetSavedTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SAVEDTIME_ISSET_ID);
  }

  /** Returns true if field savedTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSavedTime() {
    return EncodingUtils.testBit(__isset_bitfield, __SAVEDTIME_ISSET_ID);
  }

  public void setSavedTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SAVEDTIME_ISSET_ID, value);
  }

  public String getSize() {
    return this.size;
  }

  public AppTransfer setSize(String size) {
    this.size = size;
    return this;
  }

  public void unsetSize() {
    this.size = null;
  }

  /** Returns true if field size is set (has been assigned a value) and false otherwise */
  public boolean isSetSize() {
    return this.size != null;
  }

  public void setSizeIsSet(boolean value) {
    if (!value) {
      this.size = null;
    }
  }

  public String getDescription() {
    return this.description;
  }

  public AppTransfer setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public String getCountry() {
    return this.country;
  }

  public AppTransfer setCountry(String country) {
    this.country = country;
    return this;
  }

  public void unsetCountry() {
    this.country = null;
  }

  /** Returns true if field country is set (has been assigned a value) and false otherwise */
  public boolean isSetCountry() {
    return this.country != null;
  }

  public void setCountryIsSet(boolean value) {
    if (!value) {
      this.country = null;
    }
  }

  public String getPrice() {
    return this.price;
  }

  public AppTransfer setPrice(String price) {
    this.price = price;
    return this;
  }

  public void unsetPrice() {
    this.price = null;
  }

  /** Returns true if field price is set (has been assigned a value) and false otherwise */
  public boolean isSetPrice() {
    return this.price != null;
  }

  public void setPriceIsSet(boolean value) {
    if (!value) {
      this.price = null;
    }
  }

  public String getDeveloper() {
    return this.developer;
  }

  public AppTransfer setDeveloper(String developer) {
    this.developer = developer;
    return this;
  }

  public void unsetDeveloper() {
    this.developer = null;
  }

  /** Returns true if field developer is set (has been assigned a value) and false otherwise */
  public boolean isSetDeveloper() {
    return this.developer != null;
  }

  public void setDeveloperIsSet(boolean value) {
    if (!value) {
      this.developer = null;
    }
  }

  public String getDevice() {
    return this.device;
  }

  public AppTransfer setDevice(String device) {
    this.device = device;
    return this;
  }

  public void unsetDevice() {
    this.device = null;
  }

  /** Returns true if field device is set (has been assigned a value) and false otherwise */
  public boolean isSetDevice() {
    return this.device != null;
  }

  public void setDeviceIsSet(boolean value) {
    if (!value) {
      this.device = null;
    }
  }

  public String getOs() {
    return this.os;
  }

  public AppTransfer setOs(String os) {
    this.os = os;
    return this;
  }

  public void unsetOs() {
    this.os = null;
  }

  /** Returns true if field os is set (has been assigned a value) and false otherwise */
  public boolean isSetOs() {
    return this.os != null;
  }

  public void setOsIsSet(boolean value) {
    if (!value) {
      this.os = null;
    }
  }

  public String getOsVersion() {
    return this.osVersion;
  }

  public AppTransfer setOsVersion(String osVersion) {
    this.osVersion = osVersion;
    return this;
  }

  public void unsetOsVersion() {
    this.osVersion = null;
  }

  /** Returns true if field osVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetOsVersion() {
    return this.osVersion != null;
  }

  public void setOsVersionIsSet(boolean value) {
    if (!value) {
      this.osVersion = null;
    }
  }

  public String getUrl() {
    return this.url;
  }

  public AppTransfer setUrl(String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public String getDownUrl() {
    return this.downUrl;
  }

  public AppTransfer setDownUrl(String downUrl) {
    this.downUrl = downUrl;
    return this;
  }

  public void unsetDownUrl() {
    this.downUrl = null;
  }

  /** Returns true if field downUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetDownUrl() {
    return this.downUrl != null;
  }

  public void setDownUrlIsSet(boolean value) {
    if (!value) {
      this.downUrl = null;
    }
  }

  public String getDownloadId() {
    return this.downloadId;
  }

  public AppTransfer setDownloadId(String downloadId) {
    this.downloadId = downloadId;
    return this;
  }

  public void unsetDownloadId() {
    this.downloadId = null;
  }

  /** Returns true if field downloadId is set (has been assigned a value) and false otherwise */
  public boolean isSetDownloadId() {
    return this.downloadId != null;
  }

  public void setDownloadIdIsSet(boolean value) {
    if (!value) {
      this.downloadId = null;
    }
  }

  public int getSnapshotUrlListSize() {
    return (this.snapshotUrlList == null) ? 0 : this.snapshotUrlList.size();
  }

  public java.util.Iterator<String> getSnapshotUrlListIterator() {
    return (this.snapshotUrlList == null) ? null : this.snapshotUrlList.iterator();
  }

  public void addToSnapshotUrlList(String elem) {
    if (this.snapshotUrlList == null) {
      this.snapshotUrlList = new ArrayList<String>();
    }
    this.snapshotUrlList.add(elem);
  }

  public List<String> getSnapshotUrlList() {
    return this.snapshotUrlList;
  }

  public AppTransfer setSnapshotUrlList(List<String> snapshotUrlList) {
    this.snapshotUrlList = snapshotUrlList;
    return this;
  }

  public void unsetSnapshotUrlList() {
    this.snapshotUrlList = null;
  }

  /** Returns true if field snapshotUrlList is set (has been assigned a value) and false otherwise */
  public boolean isSetSnapshotUrlList() {
    return this.snapshotUrlList != null;
  }

  public void setSnapshotUrlListIsSet(boolean value) {
    if (!value) {
      this.snapshotUrlList = null;
    }
  }

  public int getDownloadNum() {
    return this.downloadNum;
  }

  public AppTransfer setDownloadNum(int downloadNum) {
    this.downloadNum = downloadNum;
    setDownloadNumIsSet(true);
    return this;
  }

  public void unsetDownloadNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOWNLOADNUM_ISSET_ID);
  }

  /** Returns true if field downloadNum is set (has been assigned a value) and false otherwise */
  public boolean isSetDownloadNum() {
    return EncodingUtils.testBit(__isset_bitfield, __DOWNLOADNUM_ISSET_ID);
  }

  public void setDownloadNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOWNLOADNUM_ISSET_ID, value);
  }

  public int getIsImageLoaded() {
    return this.isImageLoaded;
  }

  public AppTransfer setIsImageLoaded(int isImageLoaded) {
    this.isImageLoaded = isImageLoaded;
    setIsImageLoadedIsSet(true);
    return this;
  }

  public void unsetIsImageLoaded() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISIMAGELOADED_ISSET_ID);
  }

  /** Returns true if field isImageLoaded is set (has been assigned a value) and false otherwise */
  public boolean isSetIsImageLoaded() {
    return EncodingUtils.testBit(__isset_bitfield, __ISIMAGELOADED_ISSET_ID);
  }

  public void setIsImageLoadedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISIMAGELOADED_ISSET_ID, value);
  }

  public int getIsApkLoaded() {
    return this.isApkLoaded;
  }

  public AppTransfer setIsApkLoaded(int isApkLoaded) {
    this.isApkLoaded = isApkLoaded;
    setIsApkLoadedIsSet(true);
    return this;
  }

  public void unsetIsApkLoaded() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISAPKLOADED_ISSET_ID);
  }

  /** Returns true if field isApkLoaded is set (has been assigned a value) and false otherwise */
  public boolean isSetIsApkLoaded() {
    return EncodingUtils.testBit(__isset_bitfield, __ISAPKLOADED_ISSET_ID);
  }

  public void setIsApkLoadedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISAPKLOADED_ISSET_ID, value);
  }

  public String getAppPath() {
    return this.appPath;
  }

  public AppTransfer setAppPath(String appPath) {
    this.appPath = appPath;
    return this;
  }

  public void unsetAppPath() {
    this.appPath = null;
  }

  /** Returns true if field appPath is set (has been assigned a value) and false otherwise */
  public boolean isSetAppPath() {
    return this.appPath != null;
  }

  public void setAppPathIsSet(boolean value) {
    if (!value) {
      this.appPath = null;
    }
  }

  public int getCheckValue() {
    return this.checkValue;
  }

  public AppTransfer setCheckValue(int checkValue) {
    this.checkValue = checkValue;
    setCheckValueIsSet(true);
    return this;
  }

  public void unsetCheckValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHECKVALUE_ISSET_ID);
  }

  /** Returns true if field checkValue is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckValue() {
    return EncodingUtils.testBit(__isset_bitfield, __CHECKVALUE_ISSET_ID);
  }

  public void setCheckValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHECKVALUE_ISSET_ID, value);
  }

  public int getRisk() {
    return this.risk;
  }

  public AppTransfer setRisk(int risk) {
    this.risk = risk;
    setRiskIsSet(true);
    return this;
  }

  public void unsetRisk() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RISK_ISSET_ID);
  }

  /** Returns true if field risk is set (has been assigned a value) and false otherwise */
  public boolean isSetRisk() {
    return EncodingUtils.testBit(__isset_bitfield, __RISK_ISSET_ID);
  }

  public void setRiskIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RISK_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case APP_CHECKSUM:
      if (value == null) {
        unsetAppChecksum();
      } else {
        setAppChecksum((String)value);
      }
      break;

    case APP_NAME:
      if (value == null) {
        unsetAppName();
      } else {
        setAppName((String)value);
      }
      break;

    case WRAPPER_ID:
      if (value == null) {
        unsetWrapperId();
      } else {
        setWrapperId((String)value);
      }
      break;

    case WRAPPER_NAME:
      if (value == null) {
        unsetWrapperName();
      } else {
        setWrapperName((String)value);
      }
      break;

    case SUBJECT:
      if (value == null) {
        unsetSubject();
      } else {
        setSubject((String)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((String)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((Long)value);
      }
      break;

    case SAVED_TIME:
      if (value == null) {
        unsetSavedTime();
      } else {
        setSavedTime((Long)value);
      }
      break;

    case SIZE:
      if (value == null) {
        unsetSize();
      } else {
        setSize((String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case COUNTRY:
      if (value == null) {
        unsetCountry();
      } else {
        setCountry((String)value);
      }
      break;

    case PRICE:
      if (value == null) {
        unsetPrice();
      } else {
        setPrice((String)value);
      }
      break;

    case DEVELOPER:
      if (value == null) {
        unsetDeveloper();
      } else {
        setDeveloper((String)value);
      }
      break;

    case DEVICE:
      if (value == null) {
        unsetDevice();
      } else {
        setDevice((String)value);
      }
      break;

    case OS:
      if (value == null) {
        unsetOs();
      } else {
        setOs((String)value);
      }
      break;

    case OS_VERSION:
      if (value == null) {
        unsetOsVersion();
      } else {
        setOsVersion((String)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    case DOWN_URL:
      if (value == null) {
        unsetDownUrl();
      } else {
        setDownUrl((String)value);
      }
      break;

    case DOWNLOAD_ID:
      if (value == null) {
        unsetDownloadId();
      } else {
        setDownloadId((String)value);
      }
      break;

    case SNAPSHOT_URL_LIST:
      if (value == null) {
        unsetSnapshotUrlList();
      } else {
        setSnapshotUrlList((List<String>)value);
      }
      break;

    case DOWNLOAD_NUM:
      if (value == null) {
        unsetDownloadNum();
      } else {
        setDownloadNum((Integer)value);
      }
      break;

    case IS_IMAGE_LOADED:
      if (value == null) {
        unsetIsImageLoaded();
      } else {
        setIsImageLoaded((Integer)value);
      }
      break;

    case IS_APK_LOADED:
      if (value == null) {
        unsetIsApkLoaded();
      } else {
        setIsApkLoaded((Integer)value);
      }
      break;

    case APP_PATH:
      if (value == null) {
        unsetAppPath();
      } else {
        setAppPath((String)value);
      }
      break;

    case CHECK_VALUE:
      if (value == null) {
        unsetCheckValue();
      } else {
        setCheckValue((Integer)value);
      }
      break;

    case RISK:
      if (value == null) {
        unsetRisk();
      } else {
        setRisk((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case APP_CHECKSUM:
      return getAppChecksum();

    case APP_NAME:
      return getAppName();

    case WRAPPER_ID:
      return getWrapperId();

    case WRAPPER_NAME:
      return getWrapperName();

    case SUBJECT:
      return getSubject();

    case VERSION:
      return getVersion();

    case UPDATE_TIME:
      return Long.valueOf(getUpdateTime());

    case SAVED_TIME:
      return Long.valueOf(getSavedTime());

    case SIZE:
      return getSize();

    case DESCRIPTION:
      return getDescription();

    case COUNTRY:
      return getCountry();

    case PRICE:
      return getPrice();

    case DEVELOPER:
      return getDeveloper();

    case DEVICE:
      return getDevice();

    case OS:
      return getOs();

    case OS_VERSION:
      return getOsVersion();

    case URL:
      return getUrl();

    case DOWN_URL:
      return getDownUrl();

    case DOWNLOAD_ID:
      return getDownloadId();

    case SNAPSHOT_URL_LIST:
      return getSnapshotUrlList();

    case DOWNLOAD_NUM:
      return Integer.valueOf(getDownloadNum());

    case IS_IMAGE_LOADED:
      return Integer.valueOf(getIsImageLoaded());

    case IS_APK_LOADED:
      return Integer.valueOf(getIsApkLoaded());

    case APP_PATH:
      return getAppPath();

    case CHECK_VALUE:
      return Integer.valueOf(getCheckValue());

    case RISK:
      return Integer.valueOf(getRisk());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case APP_CHECKSUM:
      return isSetAppChecksum();
    case APP_NAME:
      return isSetAppName();
    case WRAPPER_ID:
      return isSetWrapperId();
    case WRAPPER_NAME:
      return isSetWrapperName();
    case SUBJECT:
      return isSetSubject();
    case VERSION:
      return isSetVersion();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case SAVED_TIME:
      return isSetSavedTime();
    case SIZE:
      return isSetSize();
    case DESCRIPTION:
      return isSetDescription();
    case COUNTRY:
      return isSetCountry();
    case PRICE:
      return isSetPrice();
    case DEVELOPER:
      return isSetDeveloper();
    case DEVICE:
      return isSetDevice();
    case OS:
      return isSetOs();
    case OS_VERSION:
      return isSetOsVersion();
    case URL:
      return isSetUrl();
    case DOWN_URL:
      return isSetDownUrl();
    case DOWNLOAD_ID:
      return isSetDownloadId();
    case SNAPSHOT_URL_LIST:
      return isSetSnapshotUrlList();
    case DOWNLOAD_NUM:
      return isSetDownloadNum();
    case IS_IMAGE_LOADED:
      return isSetIsImageLoaded();
    case IS_APK_LOADED:
      return isSetIsApkLoaded();
    case APP_PATH:
      return isSetAppPath();
    case CHECK_VALUE:
      return isSetCheckValue();
    case RISK:
      return isSetRisk();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AppTransfer)
      return this.equals((AppTransfer)that);
    return false;
  }

  public boolean equals(AppTransfer that) {
    if (that == null)
      return false;

    boolean this_present_appChecksum = true && this.isSetAppChecksum();
    boolean that_present_appChecksum = true && that.isSetAppChecksum();
    if (this_present_appChecksum || that_present_appChecksum) {
      if (!(this_present_appChecksum && that_present_appChecksum))
        return false;
      if (!this.appChecksum.equals(that.appChecksum))
        return false;
    }

    boolean this_present_appName = true && this.isSetAppName();
    boolean that_present_appName = true && that.isSetAppName();
    if (this_present_appName || that_present_appName) {
      if (!(this_present_appName && that_present_appName))
        return false;
      if (!this.appName.equals(that.appName))
        return false;
    }

    boolean this_present_wrapperId = true && this.isSetWrapperId();
    boolean that_present_wrapperId = true && that.isSetWrapperId();
    if (this_present_wrapperId || that_present_wrapperId) {
      if (!(this_present_wrapperId && that_present_wrapperId))
        return false;
      if (!this.wrapperId.equals(that.wrapperId))
        return false;
    }

    boolean this_present_wrapperName = true && this.isSetWrapperName();
    boolean that_present_wrapperName = true && that.isSetWrapperName();
    if (this_present_wrapperName || that_present_wrapperName) {
      if (!(this_present_wrapperName && that_present_wrapperName))
        return false;
      if (!this.wrapperName.equals(that.wrapperName))
        return false;
    }

    boolean this_present_subject = true && this.isSetSubject();
    boolean that_present_subject = true && that.isSetSubject();
    if (this_present_subject || that_present_subject) {
      if (!(this_present_subject && that_present_subject))
        return false;
      if (!this.subject.equals(that.subject))
        return false;
    }

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (!this.version.equals(that.version))
        return false;
    }

    boolean this_present_updateTime = true && this.isSetUpdateTime();
    boolean that_present_updateTime = true && that.isSetUpdateTime();
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (this.updateTime != that.updateTime)
        return false;
    }

    boolean this_present_savedTime = true && this.isSetSavedTime();
    boolean that_present_savedTime = true && that.isSetSavedTime();
    if (this_present_savedTime || that_present_savedTime) {
      if (!(this_present_savedTime && that_present_savedTime))
        return false;
      if (this.savedTime != that.savedTime)
        return false;
    }

    boolean this_present_size = true && this.isSetSize();
    boolean that_present_size = true && that.isSetSize();
    if (this_present_size || that_present_size) {
      if (!(this_present_size && that_present_size))
        return false;
      if (!this.size.equals(that.size))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_country = true && this.isSetCountry();
    boolean that_present_country = true && that.isSetCountry();
    if (this_present_country || that_present_country) {
      if (!(this_present_country && that_present_country))
        return false;
      if (!this.country.equals(that.country))
        return false;
    }

    boolean this_present_price = true && this.isSetPrice();
    boolean that_present_price = true && that.isSetPrice();
    if (this_present_price || that_present_price) {
      if (!(this_present_price && that_present_price))
        return false;
      if (!this.price.equals(that.price))
        return false;
    }

    boolean this_present_developer = true && this.isSetDeveloper();
    boolean that_present_developer = true && that.isSetDeveloper();
    if (this_present_developer || that_present_developer) {
      if (!(this_present_developer && that_present_developer))
        return false;
      if (!this.developer.equals(that.developer))
        return false;
    }

    boolean this_present_device = true && this.isSetDevice();
    boolean that_present_device = true && that.isSetDevice();
    if (this_present_device || that_present_device) {
      if (!(this_present_device && that_present_device))
        return false;
      if (!this.device.equals(that.device))
        return false;
    }

    boolean this_present_os = true && this.isSetOs();
    boolean that_present_os = true && that.isSetOs();
    if (this_present_os || that_present_os) {
      if (!(this_present_os && that_present_os))
        return false;
      if (!this.os.equals(that.os))
        return false;
    }

    boolean this_present_osVersion = true && this.isSetOsVersion();
    boolean that_present_osVersion = true && that.isSetOsVersion();
    if (this_present_osVersion || that_present_osVersion) {
      if (!(this_present_osVersion && that_present_osVersion))
        return false;
      if (!this.osVersion.equals(that.osVersion))
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_downUrl = true && this.isSetDownUrl();
    boolean that_present_downUrl = true && that.isSetDownUrl();
    if (this_present_downUrl || that_present_downUrl) {
      if (!(this_present_downUrl && that_present_downUrl))
        return false;
      if (!this.downUrl.equals(that.downUrl))
        return false;
    }

    boolean this_present_downloadId = true && this.isSetDownloadId();
    boolean that_present_downloadId = true && that.isSetDownloadId();
    if (this_present_downloadId || that_present_downloadId) {
      if (!(this_present_downloadId && that_present_downloadId))
        return false;
      if (!this.downloadId.equals(that.downloadId))
        return false;
    }

    boolean this_present_snapshotUrlList = true && this.isSetSnapshotUrlList();
    boolean that_present_snapshotUrlList = true && that.isSetSnapshotUrlList();
    if (this_present_snapshotUrlList || that_present_snapshotUrlList) {
      if (!(this_present_snapshotUrlList && that_present_snapshotUrlList))
        return false;
      if (!this.snapshotUrlList.equals(that.snapshotUrlList))
        return false;
    }

    boolean this_present_downloadNum = true && this.isSetDownloadNum();
    boolean that_present_downloadNum = true && that.isSetDownloadNum();
    if (this_present_downloadNum || that_present_downloadNum) {
      if (!(this_present_downloadNum && that_present_downloadNum))
        return false;
      if (this.downloadNum != that.downloadNum)
        return false;
    }

    boolean this_present_isImageLoaded = true && this.isSetIsImageLoaded();
    boolean that_present_isImageLoaded = true && that.isSetIsImageLoaded();
    if (this_present_isImageLoaded || that_present_isImageLoaded) {
      if (!(this_present_isImageLoaded && that_present_isImageLoaded))
        return false;
      if (this.isImageLoaded != that.isImageLoaded)
        return false;
    }

    boolean this_present_isApkLoaded = true && this.isSetIsApkLoaded();
    boolean that_present_isApkLoaded = true && that.isSetIsApkLoaded();
    if (this_present_isApkLoaded || that_present_isApkLoaded) {
      if (!(this_present_isApkLoaded && that_present_isApkLoaded))
        return false;
      if (this.isApkLoaded != that.isApkLoaded)
        return false;
    }

    boolean this_present_appPath = true && this.isSetAppPath();
    boolean that_present_appPath = true && that.isSetAppPath();
    if (this_present_appPath || that_present_appPath) {
      if (!(this_present_appPath && that_present_appPath))
        return false;
      if (!this.appPath.equals(that.appPath))
        return false;
    }

    boolean this_present_checkValue = true && this.isSetCheckValue();
    boolean that_present_checkValue = true && that.isSetCheckValue();
    if (this_present_checkValue || that_present_checkValue) {
      if (!(this_present_checkValue && that_present_checkValue))
        return false;
      if (this.checkValue != that.checkValue)
        return false;
    }

    boolean this_present_risk = true && this.isSetRisk();
    boolean that_present_risk = true && that.isSetRisk();
    if (this_present_risk || that_present_risk) {
      if (!(this_present_risk && that_present_risk))
        return false;
      if (this.risk != that.risk)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(AppTransfer other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    AppTransfer typedOther = (AppTransfer)other;

    lastComparison = Boolean.valueOf(isSetAppChecksum()).compareTo(typedOther.isSetAppChecksum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppChecksum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appChecksum, typedOther.appChecksum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppName()).compareTo(typedOther.isSetAppName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appName, typedOther.appName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWrapperId()).compareTo(typedOther.isSetWrapperId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWrapperId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wrapperId, typedOther.wrapperId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWrapperName()).compareTo(typedOther.isSetWrapperName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWrapperName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wrapperName, typedOther.wrapperName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubject()).compareTo(typedOther.isSetSubject());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubject()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subject, typedOther.subject);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(typedOther.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, typedOther.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(typedOther.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, typedOther.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSavedTime()).compareTo(typedOther.isSetSavedTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSavedTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.savedTime, typedOther.savedTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSize()).compareTo(typedOther.isSetSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.size, typedOther.size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(typedOther.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, typedOther.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCountry()).compareTo(typedOther.isSetCountry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.country, typedOther.country);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrice()).compareTo(typedOther.isSetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, typedOther.price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeveloper()).compareTo(typedOther.isSetDeveloper());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeveloper()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.developer, typedOther.developer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDevice()).compareTo(typedOther.isSetDevice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDevice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.device, typedOther.device);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOs()).compareTo(typedOther.isSetOs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.os, typedOther.os);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOsVersion()).compareTo(typedOther.isSetOsVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOsVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.osVersion, typedOther.osVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(typedOther.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, typedOther.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDownUrl()).compareTo(typedOther.isSetDownUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDownUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.downUrl, typedOther.downUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDownloadId()).compareTo(typedOther.isSetDownloadId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDownloadId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.downloadId, typedOther.downloadId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSnapshotUrlList()).compareTo(typedOther.isSetSnapshotUrlList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSnapshotUrlList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.snapshotUrlList, typedOther.snapshotUrlList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDownloadNum()).compareTo(typedOther.isSetDownloadNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDownloadNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.downloadNum, typedOther.downloadNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsImageLoaded()).compareTo(typedOther.isSetIsImageLoaded());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsImageLoaded()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isImageLoaded, typedOther.isImageLoaded);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsApkLoaded()).compareTo(typedOther.isSetIsApkLoaded());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsApkLoaded()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isApkLoaded, typedOther.isApkLoaded);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppPath()).compareTo(typedOther.isSetAppPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appPath, typedOther.appPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckValue()).compareTo(typedOther.isSetCheckValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkValue, typedOther.checkValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRisk()).compareTo(typedOther.isSetRisk());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRisk()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.risk, typedOther.risk);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AppTransfer(");
    boolean first = true;

    sb.append("appChecksum:");
    if (this.appChecksum == null) {
      sb.append("null");
    } else {
      sb.append(this.appChecksum);
    }
    first = false;
    if (isSetAppName()) {
      if (!first) sb.append(", ");
      sb.append("appName:");
      if (this.appName == null) {
        sb.append("null");
      } else {
        sb.append(this.appName);
      }
      first = false;
    }
    if (isSetWrapperId()) {
      if (!first) sb.append(", ");
      sb.append("wrapperId:");
      if (this.wrapperId == null) {
        sb.append("null");
      } else {
        sb.append(this.wrapperId);
      }
      first = false;
    }
    if (isSetWrapperName()) {
      if (!first) sb.append(", ");
      sb.append("wrapperName:");
      if (this.wrapperName == null) {
        sb.append("null");
      } else {
        sb.append(this.wrapperName);
      }
      first = false;
    }
    if (isSetSubject()) {
      if (!first) sb.append(", ");
      sb.append("subject:");
      if (this.subject == null) {
        sb.append("null");
      } else {
        sb.append(this.subject);
      }
      first = false;
    }
    if (isSetVersion()) {
      if (!first) sb.append(", ");
      sb.append("version:");
      if (this.version == null) {
        sb.append("null");
      } else {
        sb.append(this.version);
      }
      first = false;
    }
    if (isSetUpdateTime()) {
      if (!first) sb.append(", ");
      sb.append("updateTime:");
      sb.append(this.updateTime);
      first = false;
    }
    if (isSetSavedTime()) {
      if (!first) sb.append(", ");
      sb.append("savedTime:");
      sb.append(this.savedTime);
      first = false;
    }
    if (isSetSize()) {
      if (!first) sb.append(", ");
      sb.append("size:");
      if (this.size == null) {
        sb.append("null");
      } else {
        sb.append(this.size);
      }
      first = false;
    }
    if (isSetDescription()) {
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
    }
    if (isSetCountry()) {
      if (!first) sb.append(", ");
      sb.append("country:");
      if (this.country == null) {
        sb.append("null");
      } else {
        sb.append(this.country);
      }
      first = false;
    }
    if (isSetPrice()) {
      if (!first) sb.append(", ");
      sb.append("price:");
      if (this.price == null) {
        sb.append("null");
      } else {
        sb.append(this.price);
      }
      first = false;
    }
    if (isSetDeveloper()) {
      if (!first) sb.append(", ");
      sb.append("developer:");
      if (this.developer == null) {
        sb.append("null");
      } else {
        sb.append(this.developer);
      }
      first = false;
    }
    if (isSetDevice()) {
      if (!first) sb.append(", ");
      sb.append("device:");
      if (this.device == null) {
        sb.append("null");
      } else {
        sb.append(this.device);
      }
      first = false;
    }
    if (isSetOs()) {
      if (!first) sb.append(", ");
      sb.append("os:");
      if (this.os == null) {
        sb.append("null");
      } else {
        sb.append(this.os);
      }
      first = false;
    }
    if (isSetOsVersion()) {
      if (!first) sb.append(", ");
      sb.append("osVersion:");
      if (this.osVersion == null) {
        sb.append("null");
      } else {
        sb.append(this.osVersion);
      }
      first = false;
    }
    if (isSetUrl()) {
      if (!first) sb.append(", ");
      sb.append("url:");
      if (this.url == null) {
        sb.append("null");
      } else {
        sb.append(this.url);
      }
      first = false;
    }
    if (isSetDownUrl()) {
      if (!first) sb.append(", ");
      sb.append("downUrl:");
      if (this.downUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.downUrl);
      }
      first = false;
    }
    if (isSetDownloadId()) {
      if (!first) sb.append(", ");
      sb.append("downloadId:");
      if (this.downloadId == null) {
        sb.append("null");
      } else {
        sb.append(this.downloadId);
      }
      first = false;
    }
    if (isSetSnapshotUrlList()) {
      if (!first) sb.append(", ");
      sb.append("snapshotUrlList:");
      if (this.snapshotUrlList == null) {
        sb.append("null");
      } else {
        sb.append(this.snapshotUrlList);
      }
      first = false;
    }
    if (isSetDownloadNum()) {
      if (!first) sb.append(", ");
      sb.append("downloadNum:");
      sb.append(this.downloadNum);
      first = false;
    }
    if (isSetIsImageLoaded()) {
      if (!first) sb.append(", ");
      sb.append("isImageLoaded:");
      sb.append(this.isImageLoaded);
      first = false;
    }
    if (isSetIsApkLoaded()) {
      if (!first) sb.append(", ");
      sb.append("isApkLoaded:");
      sb.append(this.isApkLoaded);
      first = false;
    }
    if (isSetAppPath()) {
      if (!first) sb.append(", ");
      sb.append("appPath:");
      if (this.appPath == null) {
        sb.append("null");
      } else {
        sb.append(this.appPath);
      }
      first = false;
    }
    if (isSetCheckValue()) {
      if (!first) sb.append(", ");
      sb.append("checkValue:");
      sb.append(this.checkValue);
      first = false;
    }
    if (isSetRisk()) {
      if (!first) sb.append(", ");
      sb.append("risk:");
      sb.append(this.risk);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (appChecksum == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'appChecksum' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AppTransferStandardSchemeFactory implements SchemeFactory {
    public AppTransferStandardScheme getScheme() {
      return new AppTransferStandardScheme();
    }
  }

  private static class AppTransferStandardScheme extends StandardScheme<AppTransfer> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AppTransfer struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // APP_CHECKSUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appChecksum = iprot.readString();
              struct.setAppChecksumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // APP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appName = iprot.readString();
              struct.setAppNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // WRAPPER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.wrapperId = iprot.readString();
              struct.setWrapperIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // WRAPPER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.wrapperName = iprot.readString();
              struct.setWrapperNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SUBJECT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.subject = iprot.readString();
              struct.setSubjectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.version = iprot.readString();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updateTime = iprot.readI64();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SAVED_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.savedTime = iprot.readI64();
              struct.setSavedTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.size = iprot.readString();
              struct.setSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // COUNTRY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.country = iprot.readString();
              struct.setCountryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.price = iprot.readString();
              struct.setPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // DEVELOPER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.developer = iprot.readString();
              struct.setDeveloperIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // DEVICE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.device = iprot.readString();
              struct.setDeviceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // OS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.os = iprot.readString();
              struct.setOsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // OS_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.osVersion = iprot.readString();
              struct.setOsVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // DOWN_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.downUrl = iprot.readString();
              struct.setDownUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // DOWNLOAD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.downloadId = iprot.readString();
              struct.setDownloadIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // SNAPSHOT_URL_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                struct.snapshotUrlList = new ArrayList<String>(_list48.size);
                for (int _i49 = 0; _i49 < _list48.size; ++_i49)
                {
                  String _elem50; // required
                  _elem50 = iprot.readString();
                  struct.snapshotUrlList.add(_elem50);
                }
                iprot.readListEnd();
              }
              struct.setSnapshotUrlListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // DOWNLOAD_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.downloadNum = iprot.readI32();
              struct.setDownloadNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // IS_IMAGE_LOADED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isImageLoaded = iprot.readI32();
              struct.setIsImageLoadedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // IS_APK_LOADED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isApkLoaded = iprot.readI32();
              struct.setIsApkLoadedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // APP_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appPath = iprot.readString();
              struct.setAppPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // CHECK_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.checkValue = iprot.readI32();
              struct.setCheckValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // RISK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.risk = iprot.readI32();
              struct.setRiskIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AppTransfer struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.appChecksum != null) {
        oprot.writeFieldBegin(APP_CHECKSUM_FIELD_DESC);
        oprot.writeString(struct.appChecksum);
        oprot.writeFieldEnd();
      }
      if (struct.appName != null) {
        if (struct.isSetAppName()) {
          oprot.writeFieldBegin(APP_NAME_FIELD_DESC);
          oprot.writeString(struct.appName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.wrapperId != null) {
        if (struct.isSetWrapperId()) {
          oprot.writeFieldBegin(WRAPPER_ID_FIELD_DESC);
          oprot.writeString(struct.wrapperId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.wrapperName != null) {
        if (struct.isSetWrapperName()) {
          oprot.writeFieldBegin(WRAPPER_NAME_FIELD_DESC);
          oprot.writeString(struct.wrapperName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.subject != null) {
        if (struct.isSetSubject()) {
          oprot.writeFieldBegin(SUBJECT_FIELD_DESC);
          oprot.writeString(struct.subject);
          oprot.writeFieldEnd();
        }
      }
      if (struct.version != null) {
        if (struct.isSetVersion()) {
          oprot.writeFieldBegin(VERSION_FIELD_DESC);
          oprot.writeString(struct.version);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
        oprot.writeI64(struct.updateTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSavedTime()) {
        oprot.writeFieldBegin(SAVED_TIME_FIELD_DESC);
        oprot.writeI64(struct.savedTime);
        oprot.writeFieldEnd();
      }
      if (struct.size != null) {
        if (struct.isSetSize()) {
          oprot.writeFieldBegin(SIZE_FIELD_DESC);
          oprot.writeString(struct.size);
          oprot.writeFieldEnd();
        }
      }
      if (struct.description != null) {
        if (struct.isSetDescription()) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
      }
      if (struct.country != null) {
        if (struct.isSetCountry()) {
          oprot.writeFieldBegin(COUNTRY_FIELD_DESC);
          oprot.writeString(struct.country);
          oprot.writeFieldEnd();
        }
      }
      if (struct.price != null) {
        if (struct.isSetPrice()) {
          oprot.writeFieldBegin(PRICE_FIELD_DESC);
          oprot.writeString(struct.price);
          oprot.writeFieldEnd();
        }
      }
      if (struct.developer != null) {
        if (struct.isSetDeveloper()) {
          oprot.writeFieldBegin(DEVELOPER_FIELD_DESC);
          oprot.writeString(struct.developer);
          oprot.writeFieldEnd();
        }
      }
      if (struct.device != null) {
        if (struct.isSetDevice()) {
          oprot.writeFieldBegin(DEVICE_FIELD_DESC);
          oprot.writeString(struct.device);
          oprot.writeFieldEnd();
        }
      }
      if (struct.os != null) {
        if (struct.isSetOs()) {
          oprot.writeFieldBegin(OS_FIELD_DESC);
          oprot.writeString(struct.os);
          oprot.writeFieldEnd();
        }
      }
      if (struct.osVersion != null) {
        if (struct.isSetOsVersion()) {
          oprot.writeFieldBegin(OS_VERSION_FIELD_DESC);
          oprot.writeString(struct.osVersion);
          oprot.writeFieldEnd();
        }
      }
      if (struct.url != null) {
        if (struct.isSetUrl()) {
          oprot.writeFieldBegin(URL_FIELD_DESC);
          oprot.writeString(struct.url);
          oprot.writeFieldEnd();
        }
      }
      if (struct.downUrl != null) {
        if (struct.isSetDownUrl()) {
          oprot.writeFieldBegin(DOWN_URL_FIELD_DESC);
          oprot.writeString(struct.downUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.downloadId != null) {
        if (struct.isSetDownloadId()) {
          oprot.writeFieldBegin(DOWNLOAD_ID_FIELD_DESC);
          oprot.writeString(struct.downloadId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.snapshotUrlList != null) {
        if (struct.isSetSnapshotUrlList()) {
          oprot.writeFieldBegin(SNAPSHOT_URL_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.snapshotUrlList.size()));
            for (String _iter51 : struct.snapshotUrlList)
            {
              oprot.writeString(_iter51);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDownloadNum()) {
        oprot.writeFieldBegin(DOWNLOAD_NUM_FIELD_DESC);
        oprot.writeI32(struct.downloadNum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsImageLoaded()) {
        oprot.writeFieldBegin(IS_IMAGE_LOADED_FIELD_DESC);
        oprot.writeI32(struct.isImageLoaded);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsApkLoaded()) {
        oprot.writeFieldBegin(IS_APK_LOADED_FIELD_DESC);
        oprot.writeI32(struct.isApkLoaded);
        oprot.writeFieldEnd();
      }
      if (struct.appPath != null) {
        if (struct.isSetAppPath()) {
          oprot.writeFieldBegin(APP_PATH_FIELD_DESC);
          oprot.writeString(struct.appPath);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCheckValue()) {
        oprot.writeFieldBegin(CHECK_VALUE_FIELD_DESC);
        oprot.writeI32(struct.checkValue);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRisk()) {
        oprot.writeFieldBegin(RISK_FIELD_DESC);
        oprot.writeI32(struct.risk);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AppTransferTupleSchemeFactory implements SchemeFactory {
    public AppTransferTupleScheme getScheme() {
      return new AppTransferTupleScheme();
    }
  }

  private static class AppTransferTupleScheme extends TupleScheme<AppTransfer> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AppTransfer struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.appChecksum);
      BitSet optionals = new BitSet();
      if (struct.isSetAppName()) {
        optionals.set(0);
      }
      if (struct.isSetWrapperId()) {
        optionals.set(1);
      }
      if (struct.isSetWrapperName()) {
        optionals.set(2);
      }
      if (struct.isSetSubject()) {
        optionals.set(3);
      }
      if (struct.isSetVersion()) {
        optionals.set(4);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(5);
      }
      if (struct.isSetSavedTime()) {
        optionals.set(6);
      }
      if (struct.isSetSize()) {
        optionals.set(7);
      }
      if (struct.isSetDescription()) {
        optionals.set(8);
      }
      if (struct.isSetCountry()) {
        optionals.set(9);
      }
      if (struct.isSetPrice()) {
        optionals.set(10);
      }
      if (struct.isSetDeveloper()) {
        optionals.set(11);
      }
      if (struct.isSetDevice()) {
        optionals.set(12);
      }
      if (struct.isSetOs()) {
        optionals.set(13);
      }
      if (struct.isSetOsVersion()) {
        optionals.set(14);
      }
      if (struct.isSetUrl()) {
        optionals.set(15);
      }
      if (struct.isSetDownUrl()) {
        optionals.set(16);
      }
      if (struct.isSetDownloadId()) {
        optionals.set(17);
      }
      if (struct.isSetSnapshotUrlList()) {
        optionals.set(18);
      }
      if (struct.isSetDownloadNum()) {
        optionals.set(19);
      }
      if (struct.isSetIsImageLoaded()) {
        optionals.set(20);
      }
      if (struct.isSetIsApkLoaded()) {
        optionals.set(21);
      }
      if (struct.isSetAppPath()) {
        optionals.set(22);
      }
      if (struct.isSetCheckValue()) {
        optionals.set(23);
      }
      if (struct.isSetRisk()) {
        optionals.set(24);
      }
      oprot.writeBitSet(optionals, 25);
      if (struct.isSetAppName()) {
        oprot.writeString(struct.appName);
      }
      if (struct.isSetWrapperId()) {
        oprot.writeString(struct.wrapperId);
      }
      if (struct.isSetWrapperName()) {
        oprot.writeString(struct.wrapperName);
      }
      if (struct.isSetSubject()) {
        oprot.writeString(struct.subject);
      }
      if (struct.isSetVersion()) {
        oprot.writeString(struct.version);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeI64(struct.updateTime);
      }
      if (struct.isSetSavedTime()) {
        oprot.writeI64(struct.savedTime);
      }
      if (struct.isSetSize()) {
        oprot.writeString(struct.size);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetCountry()) {
        oprot.writeString(struct.country);
      }
      if (struct.isSetPrice()) {
        oprot.writeString(struct.price);
      }
      if (struct.isSetDeveloper()) {
        oprot.writeString(struct.developer);
      }
      if (struct.isSetDevice()) {
        oprot.writeString(struct.device);
      }
      if (struct.isSetOs()) {
        oprot.writeString(struct.os);
      }
      if (struct.isSetOsVersion()) {
        oprot.writeString(struct.osVersion);
      }
      if (struct.isSetUrl()) {
        oprot.writeString(struct.url);
      }
      if (struct.isSetDownUrl()) {
        oprot.writeString(struct.downUrl);
      }
      if (struct.isSetDownloadId()) {
        oprot.writeString(struct.downloadId);
      }
      if (struct.isSetSnapshotUrlList()) {
        {
          oprot.writeI32(struct.snapshotUrlList.size());
          for (String _iter52 : struct.snapshotUrlList)
          {
            oprot.writeString(_iter52);
          }
        }
      }
      if (struct.isSetDownloadNum()) {
        oprot.writeI32(struct.downloadNum);
      }
      if (struct.isSetIsImageLoaded()) {
        oprot.writeI32(struct.isImageLoaded);
      }
      if (struct.isSetIsApkLoaded()) {
        oprot.writeI32(struct.isApkLoaded);
      }
      if (struct.isSetAppPath()) {
        oprot.writeString(struct.appPath);
      }
      if (struct.isSetCheckValue()) {
        oprot.writeI32(struct.checkValue);
      }
      if (struct.isSetRisk()) {
        oprot.writeI32(struct.risk);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AppTransfer struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.appChecksum = iprot.readString();
      struct.setAppChecksumIsSet(true);
      BitSet incoming = iprot.readBitSet(25);
      if (incoming.get(0)) {
        struct.appName = iprot.readString();
        struct.setAppNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.wrapperId = iprot.readString();
        struct.setWrapperIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.wrapperName = iprot.readString();
        struct.setWrapperNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.subject = iprot.readString();
        struct.setSubjectIsSet(true);
      }
      if (incoming.get(4)) {
        struct.version = iprot.readString();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(5)) {
        struct.updateTime = iprot.readI64();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.savedTime = iprot.readI64();
        struct.setSavedTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.size = iprot.readString();
        struct.setSizeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(9)) {
        struct.country = iprot.readString();
        struct.setCountryIsSet(true);
      }
      if (incoming.get(10)) {
        struct.price = iprot.readString();
        struct.setPriceIsSet(true);
      }
      if (incoming.get(11)) {
        struct.developer = iprot.readString();
        struct.setDeveloperIsSet(true);
      }
      if (incoming.get(12)) {
        struct.device = iprot.readString();
        struct.setDeviceIsSet(true);
      }
      if (incoming.get(13)) {
        struct.os = iprot.readString();
        struct.setOsIsSet(true);
      }
      if (incoming.get(14)) {
        struct.osVersion = iprot.readString();
        struct.setOsVersionIsSet(true);
      }
      if (incoming.get(15)) {
        struct.url = iprot.readString();
        struct.setUrlIsSet(true);
      }
      if (incoming.get(16)) {
        struct.downUrl = iprot.readString();
        struct.setDownUrlIsSet(true);
      }
      if (incoming.get(17)) {
        struct.downloadId = iprot.readString();
        struct.setDownloadIdIsSet(true);
      }
      if (incoming.get(18)) {
        {
          org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.snapshotUrlList = new ArrayList<String>(_list53.size);
          for (int _i54 = 0; _i54 < _list53.size; ++_i54)
          {
            String _elem55; // required
            _elem55 = iprot.readString();
            struct.snapshotUrlList.add(_elem55);
          }
        }
        struct.setSnapshotUrlListIsSet(true);
      }
      if (incoming.get(19)) {
        struct.downloadNum = iprot.readI32();
        struct.setDownloadNumIsSet(true);
      }
      if (incoming.get(20)) {
        struct.isImageLoaded = iprot.readI32();
        struct.setIsImageLoadedIsSet(true);
      }
      if (incoming.get(21)) {
        struct.isApkLoaded = iprot.readI32();
        struct.setIsApkLoadedIsSet(true);
      }
      if (incoming.get(22)) {
        struct.appPath = iprot.readString();
        struct.setAppPathIsSet(true);
      }
      if (incoming.get(23)) {
        struct.checkValue = iprot.readI32();
        struct.setCheckValueIsSet(true);
      }
      if (incoming.get(24)) {
        struct.risk = iprot.readI32();
        struct.setRiskIsSet(true);
      }
    }
  }

}

