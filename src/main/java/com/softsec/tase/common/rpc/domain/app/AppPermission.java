/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.softsec.tase.common.rpc.domain.app;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * App Permission Info
 */
public class AppPermission implements org.apache.thrift.TBase<AppPermission, AppPermission._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppPermission");

  private static final org.apache.thrift.protocol.TField PERMISSION_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("permissionGroup", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PERMISSION_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("permissionDesc", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PERMISSION_DESC_FULL_FIELD_DESC = new org.apache.thrift.protocol.TField("permissionDescFull", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AppPermissionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AppPermissionTupleSchemeFactory());
  }

  public String permissionGroup; // optional
  public String permissionDesc; // optional
  public String permissionDescFull; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PERMISSION_GROUP((short)1, "permissionGroup"),
    PERMISSION_DESC((short)2, "permissionDesc"),
    PERMISSION_DESC_FULL((short)3, "permissionDescFull");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PERMISSION_GROUP
          return PERMISSION_GROUP;
        case 2: // PERMISSION_DESC
          return PERMISSION_DESC;
        case 3: // PERMISSION_DESC_FULL
          return PERMISSION_DESC_FULL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.PERMISSION_GROUP,_Fields.PERMISSION_DESC,_Fields.PERMISSION_DESC_FULL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PERMISSION_GROUP, new org.apache.thrift.meta_data.FieldMetaData("permissionGroup", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PERMISSION_DESC, new org.apache.thrift.meta_data.FieldMetaData("permissionDesc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PERMISSION_DESC_FULL, new org.apache.thrift.meta_data.FieldMetaData("permissionDescFull", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AppPermission.class, metaDataMap);
  }

  public AppPermission() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AppPermission(AppPermission other) {
    if (other.isSetPermissionGroup()) {
      this.permissionGroup = other.permissionGroup;
    }
    if (other.isSetPermissionDesc()) {
      this.permissionDesc = other.permissionDesc;
    }
    if (other.isSetPermissionDescFull()) {
      this.permissionDescFull = other.permissionDescFull;
    }
  }

  public AppPermission deepCopy() {
    return new AppPermission(this);
  }

  @Override
  public void clear() {
    this.permissionGroup = null;
    this.permissionDesc = null;
    this.permissionDescFull = null;
  }

  public String getPermissionGroup() {
    return this.permissionGroup;
  }

  public AppPermission setPermissionGroup(String permissionGroup) {
    this.permissionGroup = permissionGroup;
    return this;
  }

  public void unsetPermissionGroup() {
    this.permissionGroup = null;
  }

  /** Returns true if field permissionGroup is set (has been assigned a value) and false otherwise */
  public boolean isSetPermissionGroup() {
    return this.permissionGroup != null;
  }

  public void setPermissionGroupIsSet(boolean value) {
    if (!value) {
      this.permissionGroup = null;
    }
  }

  public String getPermissionDesc() {
    return this.permissionDesc;
  }

  public AppPermission setPermissionDesc(String permissionDesc) {
    this.permissionDesc = permissionDesc;
    return this;
  }

  public void unsetPermissionDesc() {
    this.permissionDesc = null;
  }

  /** Returns true if field permissionDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetPermissionDesc() {
    return this.permissionDesc != null;
  }

  public void setPermissionDescIsSet(boolean value) {
    if (!value) {
      this.permissionDesc = null;
    }
  }

  public String getPermissionDescFull() {
    return this.permissionDescFull;
  }

  public AppPermission setPermissionDescFull(String permissionDescFull) {
    this.permissionDescFull = permissionDescFull;
    return this;
  }

  public void unsetPermissionDescFull() {
    this.permissionDescFull = null;
  }

  /** Returns true if field permissionDescFull is set (has been assigned a value) and false otherwise */
  public boolean isSetPermissionDescFull() {
    return this.permissionDescFull != null;
  }

  public void setPermissionDescFullIsSet(boolean value) {
    if (!value) {
      this.permissionDescFull = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PERMISSION_GROUP:
      if (value == null) {
        unsetPermissionGroup();
      } else {
        setPermissionGroup((String)value);
      }
      break;

    case PERMISSION_DESC:
      if (value == null) {
        unsetPermissionDesc();
      } else {
        setPermissionDesc((String)value);
      }
      break;

    case PERMISSION_DESC_FULL:
      if (value == null) {
        unsetPermissionDescFull();
      } else {
        setPermissionDescFull((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PERMISSION_GROUP:
      return getPermissionGroup();

    case PERMISSION_DESC:
      return getPermissionDesc();

    case PERMISSION_DESC_FULL:
      return getPermissionDescFull();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PERMISSION_GROUP:
      return isSetPermissionGroup();
    case PERMISSION_DESC:
      return isSetPermissionDesc();
    case PERMISSION_DESC_FULL:
      return isSetPermissionDescFull();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AppPermission)
      return this.equals((AppPermission)that);
    return false;
  }

  public boolean equals(AppPermission that) {
    if (that == null)
      return false;

    boolean this_present_permissionGroup = true && this.isSetPermissionGroup();
    boolean that_present_permissionGroup = true && that.isSetPermissionGroup();
    if (this_present_permissionGroup || that_present_permissionGroup) {
      if (!(this_present_permissionGroup && that_present_permissionGroup))
        return false;
      if (!this.permissionGroup.equals(that.permissionGroup))
        return false;
    }

    boolean this_present_permissionDesc = true && this.isSetPermissionDesc();
    boolean that_present_permissionDesc = true && that.isSetPermissionDesc();
    if (this_present_permissionDesc || that_present_permissionDesc) {
      if (!(this_present_permissionDesc && that_present_permissionDesc))
        return false;
      if (!this.permissionDesc.equals(that.permissionDesc))
        return false;
    }

    boolean this_present_permissionDescFull = true && this.isSetPermissionDescFull();
    boolean that_present_permissionDescFull = true && that.isSetPermissionDescFull();
    if (this_present_permissionDescFull || that_present_permissionDescFull) {
      if (!(this_present_permissionDescFull && that_present_permissionDescFull))
        return false;
      if (!this.permissionDescFull.equals(that.permissionDescFull))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(AppPermission other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    AppPermission typedOther = (AppPermission)other;

    lastComparison = Boolean.valueOf(isSetPermissionGroup()).compareTo(typedOther.isSetPermissionGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPermissionGroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.permissionGroup, typedOther.permissionGroup);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPermissionDesc()).compareTo(typedOther.isSetPermissionDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPermissionDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.permissionDesc, typedOther.permissionDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPermissionDescFull()).compareTo(typedOther.isSetPermissionDescFull());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPermissionDescFull()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.permissionDescFull, typedOther.permissionDescFull);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AppPermission(");
    boolean first = true;

    if (isSetPermissionGroup()) {
      sb.append("permissionGroup:");
      if (this.permissionGroup == null) {
        sb.append("null");
      } else {
        sb.append(this.permissionGroup);
      }
      first = false;
    }
    if (isSetPermissionDesc()) {
      if (!first) sb.append(", ");
      sb.append("permissionDesc:");
      if (this.permissionDesc == null) {
        sb.append("null");
      } else {
        sb.append(this.permissionDesc);
      }
      first = false;
    }
    if (isSetPermissionDescFull()) {
      if (!first) sb.append(", ");
      sb.append("permissionDescFull:");
      if (this.permissionDescFull == null) {
        sb.append("null");
      } else {
        sb.append(this.permissionDescFull);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AppPermissionStandardSchemeFactory implements SchemeFactory {
    public AppPermissionStandardScheme getScheme() {
      return new AppPermissionStandardScheme();
    }
  }

  private static class AppPermissionStandardScheme extends StandardScheme<AppPermission> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AppPermission struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PERMISSION_GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.permissionGroup = iprot.readString();
              struct.setPermissionGroupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PERMISSION_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.permissionDesc = iprot.readString();
              struct.setPermissionDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PERMISSION_DESC_FULL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.permissionDescFull = iprot.readString();
              struct.setPermissionDescFullIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AppPermission struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.permissionGroup != null) {
        if (struct.isSetPermissionGroup()) {
          oprot.writeFieldBegin(PERMISSION_GROUP_FIELD_DESC);
          oprot.writeString(struct.permissionGroup);
          oprot.writeFieldEnd();
        }
      }
      if (struct.permissionDesc != null) {
        if (struct.isSetPermissionDesc()) {
          oprot.writeFieldBegin(PERMISSION_DESC_FIELD_DESC);
          oprot.writeString(struct.permissionDesc);
          oprot.writeFieldEnd();
        }
      }
      if (struct.permissionDescFull != null) {
        if (struct.isSetPermissionDescFull()) {
          oprot.writeFieldBegin(PERMISSION_DESC_FULL_FIELD_DESC);
          oprot.writeString(struct.permissionDescFull);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AppPermissionTupleSchemeFactory implements SchemeFactory {
    public AppPermissionTupleScheme getScheme() {
      return new AppPermissionTupleScheme();
    }
  }

  private static class AppPermissionTupleScheme extends TupleScheme<AppPermission> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AppPermission struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPermissionGroup()) {
        optionals.set(0);
      }
      if (struct.isSetPermissionDesc()) {
        optionals.set(1);
      }
      if (struct.isSetPermissionDescFull()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetPermissionGroup()) {
        oprot.writeString(struct.permissionGroup);
      }
      if (struct.isSetPermissionDesc()) {
        oprot.writeString(struct.permissionDesc);
      }
      if (struct.isSetPermissionDescFull()) {
        oprot.writeString(struct.permissionDescFull);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AppPermission struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.permissionGroup = iprot.readString();
        struct.setPermissionGroupIsSet(true);
      }
      if (incoming.get(1)) {
        struct.permissionDesc = iprot.readString();
        struct.setPermissionDescIsSet(true);
      }
      if (incoming.get(2)) {
        struct.permissionDescFull = iprot.readString();
        struct.setPermissionDescFullIsSet(true);
      }
    }
  }

}

