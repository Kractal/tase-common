/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.softsec.tase.common.rpc.domain.container;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * programme data
 */
public class Programme implements org.apache.thrift.TBase<Programme, Programme._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Programme");

  private static final org.apache.thrift.protocol.TField COMMITTER_FIELD_DESC = new org.apache.thrift.protocol.TField("committer", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PROGRAMME_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("programmeName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField APP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("appType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField JOB_LIFECYCLE_FIELD_DESC = new org.apache.thrift.protocol.TField("jobLifecycle", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField JOB_PHASE_FIELD_DESC = new org.apache.thrift.protocol.TField("jobPhase", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField NODE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeType", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField SCRIPT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("scriptName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField SCRIPT_FIELD_DESC = new org.apache.thrift.protocol.TField("script", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField SCRIPT_MD5_FIELD_DESC = new org.apache.thrift.protocol.TField("scriptMd5", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField EXECUTABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("executableName", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField EXECUTABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("executable", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField EXECUTABLE_MD5_FIELD_DESC = new org.apache.thrift.protocol.TField("executableMd5", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField ENV_VARIABLES_FIELD_DESC = new org.apache.thrift.protocol.TField("envVariables", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField MIN_MEM_FIELD_DESC = new org.apache.thrift.protocol.TField("minMem", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField MIN_FS_FIELD_DESC = new org.apache.thrift.protocol.TField("minFs", org.apache.thrift.protocol.TType.I32, (short)16);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProgrammeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProgrammeTupleSchemeFactory());
  }

  public String committer; // required
  public String programmeName; // required
  /**
   * 
   * @see com.softsec.tase.common.rpc.domain.app.AppType
   */
  public com.softsec.tase.common.rpc.domain.app.AppType appType; // required
  /**
   * 
   * @see com.softsec.tase.common.rpc.domain.job.JobLifecycle
   */
  public com.softsec.tase.common.rpc.domain.job.JobLifecycle jobLifecycle; // required
  /**
   * 
   * @see com.softsec.tase.common.rpc.domain.job.JobPhase
   */
  public com.softsec.tase.common.rpc.domain.job.JobPhase jobPhase; // required
  /**
   * 
   * @see com.softsec.tase.common.rpc.domain.node.NodeType
   */
  public com.softsec.tase.common.rpc.domain.node.NodeType nodeType; // required
  public String scriptName; // required
  public ByteBuffer script; // required
  public String scriptMd5; // required
  public String executableName; // required
  public ByteBuffer executable; // required
  public String executableMd5; // required
  public String envVariables; // optional
  public String description; // optional
  public int minMem; // optional
  public int minFs; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COMMITTER((short)1, "committer"),
    PROGRAMME_NAME((short)2, "programmeName"),
    /**
     * 
     * @see com.softsec.tase.common.rpc.domain.app.AppType
     */
    APP_TYPE((short)3, "appType"),
    /**
     * 
     * @see com.softsec.tase.common.rpc.domain.job.JobLifecycle
     */
    JOB_LIFECYCLE((short)4, "jobLifecycle"),
    /**
     * 
     * @see com.softsec.tase.common.rpc.domain.job.JobPhase
     */
    JOB_PHASE((short)5, "jobPhase"),
    /**
     * 
     * @see com.softsec.tase.common.rpc.domain.node.NodeType
     */
    NODE_TYPE((short)6, "nodeType"),
    SCRIPT_NAME((short)7, "scriptName"),
    SCRIPT((short)8, "script"),
    SCRIPT_MD5((short)9, "scriptMd5"),
    EXECUTABLE_NAME((short)10, "executableName"),
    EXECUTABLE((short)11, "executable"),
    EXECUTABLE_MD5((short)12, "executableMd5"),
    ENV_VARIABLES((short)13, "envVariables"),
    DESCRIPTION((short)14, "description"),
    MIN_MEM((short)15, "minMem"),
    MIN_FS((short)16, "minFs");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMMITTER
          return COMMITTER;
        case 2: // PROGRAMME_NAME
          return PROGRAMME_NAME;
        case 3: // APP_TYPE
          return APP_TYPE;
        case 4: // JOB_LIFECYCLE
          return JOB_LIFECYCLE;
        case 5: // JOB_PHASE
          return JOB_PHASE;
        case 6: // NODE_TYPE
          return NODE_TYPE;
        case 7: // SCRIPT_NAME
          return SCRIPT_NAME;
        case 8: // SCRIPT
          return SCRIPT;
        case 9: // SCRIPT_MD5
          return SCRIPT_MD5;
        case 10: // EXECUTABLE_NAME
          return EXECUTABLE_NAME;
        case 11: // EXECUTABLE
          return EXECUTABLE;
        case 12: // EXECUTABLE_MD5
          return EXECUTABLE_MD5;
        case 13: // ENV_VARIABLES
          return ENV_VARIABLES;
        case 14: // DESCRIPTION
          return DESCRIPTION;
        case 15: // MIN_MEM
          return MIN_MEM;
        case 16: // MIN_FS
          return MIN_FS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MINMEM_ISSET_ID = 0;
  private static final int __MINFS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.ENV_VARIABLES,_Fields.DESCRIPTION,_Fields.MIN_MEM,_Fields.MIN_FS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMMITTER, new org.apache.thrift.meta_data.FieldMetaData("committer", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROGRAMME_NAME, new org.apache.thrift.meta_data.FieldMetaData("programmeName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("appType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.softsec.tase.common.rpc.domain.app.AppType.class)));
    tmpMap.put(_Fields.JOB_LIFECYCLE, new org.apache.thrift.meta_data.FieldMetaData("jobLifecycle", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.softsec.tase.common.rpc.domain.job.JobLifecycle.class)));
    tmpMap.put(_Fields.JOB_PHASE, new org.apache.thrift.meta_data.FieldMetaData("jobPhase", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.softsec.tase.common.rpc.domain.job.JobPhase.class)));
    tmpMap.put(_Fields.NODE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("nodeType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.softsec.tase.common.rpc.domain.node.NodeType.class)));
    tmpMap.put(_Fields.SCRIPT_NAME, new org.apache.thrift.meta_data.FieldMetaData("scriptName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCRIPT, new org.apache.thrift.meta_data.FieldMetaData("script", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.SCRIPT_MD5, new org.apache.thrift.meta_data.FieldMetaData("scriptMd5", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXECUTABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("executableName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXECUTABLE, new org.apache.thrift.meta_data.FieldMetaData("executable", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.EXECUTABLE_MD5, new org.apache.thrift.meta_data.FieldMetaData("executableMd5", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENV_VARIABLES, new org.apache.thrift.meta_data.FieldMetaData("envVariables", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MIN_MEM, new org.apache.thrift.meta_data.FieldMetaData("minMem", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MIN_FS, new org.apache.thrift.meta_data.FieldMetaData("minFs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Programme.class, metaDataMap);
  }

  public Programme() {
  }

  public Programme(
    String committer,
    String programmeName,
    com.softsec.tase.common.rpc.domain.app.AppType appType,
    com.softsec.tase.common.rpc.domain.job.JobLifecycle jobLifecycle,
    com.softsec.tase.common.rpc.domain.job.JobPhase jobPhase,
    com.softsec.tase.common.rpc.domain.node.NodeType nodeType,
    String scriptName,
    ByteBuffer script,
    String scriptMd5,
    String executableName,
    ByteBuffer executable,
    String executableMd5)
  {
    this();
    this.committer = committer;
    this.programmeName = programmeName;
    this.appType = appType;
    this.jobLifecycle = jobLifecycle;
    this.jobPhase = jobPhase;
    this.nodeType = nodeType;
    this.scriptName = scriptName;
    this.script = script;
    this.scriptMd5 = scriptMd5;
    this.executableName = executableName;
    this.executable = executable;
    this.executableMd5 = executableMd5;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Programme(Programme other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCommitter()) {
      this.committer = other.committer;
    }
    if (other.isSetProgrammeName()) {
      this.programmeName = other.programmeName;
    }
    if (other.isSetAppType()) {
      this.appType = other.appType;
    }
    if (other.isSetJobLifecycle()) {
      this.jobLifecycle = other.jobLifecycle;
    }
    if (other.isSetJobPhase()) {
      this.jobPhase = other.jobPhase;
    }
    if (other.isSetNodeType()) {
      this.nodeType = other.nodeType;
    }
    if (other.isSetScriptName()) {
      this.scriptName = other.scriptName;
    }
    if (other.isSetScript()) {
      this.script = org.apache.thrift.TBaseHelper.copyBinary(other.script);
;
    }
    if (other.isSetScriptMd5()) {
      this.scriptMd5 = other.scriptMd5;
    }
    if (other.isSetExecutableName()) {
      this.executableName = other.executableName;
    }
    if (other.isSetExecutable()) {
      this.executable = org.apache.thrift.TBaseHelper.copyBinary(other.executable);
;
    }
    if (other.isSetExecutableMd5()) {
      this.executableMd5 = other.executableMd5;
    }
    if (other.isSetEnvVariables()) {
      this.envVariables = other.envVariables;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    this.minMem = other.minMem;
    this.minFs = other.minFs;
  }

  public Programme deepCopy() {
    return new Programme(this);
  }

  @Override
  public void clear() {
    this.committer = null;
    this.programmeName = null;
    this.appType = null;
    this.jobLifecycle = null;
    this.jobPhase = null;
    this.nodeType = null;
    this.scriptName = null;
    this.script = null;
    this.scriptMd5 = null;
    this.executableName = null;
    this.executable = null;
    this.executableMd5 = null;
    this.envVariables = null;
    this.description = null;
    setMinMemIsSet(false);
    this.minMem = 0;
    setMinFsIsSet(false);
    this.minFs = 0;
  }

  public String getCommitter() {
    return this.committer;
  }

  public Programme setCommitter(String committer) {
    this.committer = committer;
    return this;
  }

  public void unsetCommitter() {
    this.committer = null;
  }

  /** Returns true if field committer is set (has been assigned a value) and false otherwise */
  public boolean isSetCommitter() {
    return this.committer != null;
  }

  public void setCommitterIsSet(boolean value) {
    if (!value) {
      this.committer = null;
    }
  }

  public String getProgrammeName() {
    return this.programmeName;
  }

  public Programme setProgrammeName(String programmeName) {
    this.programmeName = programmeName;
    return this;
  }

  public void unsetProgrammeName() {
    this.programmeName = null;
  }

  /** Returns true if field programmeName is set (has been assigned a value) and false otherwise */
  public boolean isSetProgrammeName() {
    return this.programmeName != null;
  }

  public void setProgrammeNameIsSet(boolean value) {
    if (!value) {
      this.programmeName = null;
    }
  }

  /**
   * 
   * @see com.softsec.tase.common.rpc.domain.app.AppType
   */
  public com.softsec.tase.common.rpc.domain.app.AppType getAppType() {
    return this.appType;
  }

  /**
   * 
   * @see com.softsec.tase.common.rpc.domain.app.AppType
   */
  public Programme setAppType(com.softsec.tase.common.rpc.domain.app.AppType appType) {
    this.appType = appType;
    return this;
  }

  public void unsetAppType() {
    this.appType = null;
  }

  /** Returns true if field appType is set (has been assigned a value) and false otherwise */
  public boolean isSetAppType() {
    return this.appType != null;
  }

  public void setAppTypeIsSet(boolean value) {
    if (!value) {
      this.appType = null;
    }
  }

  /**
   * 
   * @see com.softsec.tase.common.rpc.domain.job.JobLifecycle
   */
  public com.softsec.tase.common.rpc.domain.job.JobLifecycle getJobLifecycle() {
    return this.jobLifecycle;
  }

  /**
   * 
   * @see com.softsec.tase.common.rpc.domain.job.JobLifecycle
   */
  public Programme setJobLifecycle(com.softsec.tase.common.rpc.domain.job.JobLifecycle jobLifecycle) {
    this.jobLifecycle = jobLifecycle;
    return this;
  }

  public void unsetJobLifecycle() {
    this.jobLifecycle = null;
  }

  /** Returns true if field jobLifecycle is set (has been assigned a value) and false otherwise */
  public boolean isSetJobLifecycle() {
    return this.jobLifecycle != null;
  }

  public void setJobLifecycleIsSet(boolean value) {
    if (!value) {
      this.jobLifecycle = null;
    }
  }

  /**
   * 
   * @see com.softsec.tase.common.rpc.domain.job.JobPhase
   */
  public com.softsec.tase.common.rpc.domain.job.JobPhase getJobPhase() {
    return this.jobPhase;
  }

  /**
   * 
   * @see com.softsec.tase.common.rpc.domain.job.JobPhase
   */
  public Programme setJobPhase(com.softsec.tase.common.rpc.domain.job.JobPhase jobPhase) {
    this.jobPhase = jobPhase;
    return this;
  }

  public void unsetJobPhase() {
    this.jobPhase = null;
  }

  /** Returns true if field jobPhase is set (has been assigned a value) and false otherwise */
  public boolean isSetJobPhase() {
    return this.jobPhase != null;
  }

  public void setJobPhaseIsSet(boolean value) {
    if (!value) {
      this.jobPhase = null;
    }
  }

  /**
   * 
   * @see com.softsec.tase.common.rpc.domain.node.NodeType
   */
  public com.softsec.tase.common.rpc.domain.node.NodeType getNodeType() {
    return this.nodeType;
  }

  /**
   * 
   * @see com.softsec.tase.common.rpc.domain.node.NodeType
   */
  public Programme setNodeType(com.softsec.tase.common.rpc.domain.node.NodeType nodeType) {
    this.nodeType = nodeType;
    return this;
  }

  public void unsetNodeType() {
    this.nodeType = null;
  }

  /** Returns true if field nodeType is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeType() {
    return this.nodeType != null;
  }

  public void setNodeTypeIsSet(boolean value) {
    if (!value) {
      this.nodeType = null;
    }
  }

  public String getScriptName() {
    return this.scriptName;
  }

  public Programme setScriptName(String scriptName) {
    this.scriptName = scriptName;
    return this;
  }

  public void unsetScriptName() {
    this.scriptName = null;
  }

  /** Returns true if field scriptName is set (has been assigned a value) and false otherwise */
  public boolean isSetScriptName() {
    return this.scriptName != null;
  }

  public void setScriptNameIsSet(boolean value) {
    if (!value) {
      this.scriptName = null;
    }
  }

  public byte[] getScript() {
    setScript(org.apache.thrift.TBaseHelper.rightSize(script));
    return script == null ? null : script.array();
  }

  public ByteBuffer bufferForScript() {
    return script;
  }

  public Programme setScript(byte[] script) {
    setScript(script == null ? (ByteBuffer)null : ByteBuffer.wrap(script));
    return this;
  }

  public Programme setScript(ByteBuffer script) {
    this.script = script;
    return this;
  }

  public void unsetScript() {
    this.script = null;
  }

  /** Returns true if field script is set (has been assigned a value) and false otherwise */
  public boolean isSetScript() {
    return this.script != null;
  }

  public void setScriptIsSet(boolean value) {
    if (!value) {
      this.script = null;
    }
  }

  public String getScriptMd5() {
    return this.scriptMd5;
  }

  public Programme setScriptMd5(String scriptMd5) {
    this.scriptMd5 = scriptMd5;
    return this;
  }

  public void unsetScriptMd5() {
    this.scriptMd5 = null;
  }

  /** Returns true if field scriptMd5 is set (has been assigned a value) and false otherwise */
  public boolean isSetScriptMd5() {
    return this.scriptMd5 != null;
  }

  public void setScriptMd5IsSet(boolean value) {
    if (!value) {
      this.scriptMd5 = null;
    }
  }

  public String getExecutableName() {
    return this.executableName;
  }

  public Programme setExecutableName(String executableName) {
    this.executableName = executableName;
    return this;
  }

  public void unsetExecutableName() {
    this.executableName = null;
  }

  /** Returns true if field executableName is set (has been assigned a value) and false otherwise */
  public boolean isSetExecutableName() {
    return this.executableName != null;
  }

  public void setExecutableNameIsSet(boolean value) {
    if (!value) {
      this.executableName = null;
    }
  }

  public byte[] getExecutable() {
    setExecutable(org.apache.thrift.TBaseHelper.rightSize(executable));
    return executable == null ? null : executable.array();
  }

  public ByteBuffer bufferForExecutable() {
    return executable;
  }

  public Programme setExecutable(byte[] executable) {
    setExecutable(executable == null ? (ByteBuffer)null : ByteBuffer.wrap(executable));
    return this;
  }

  public Programme setExecutable(ByteBuffer executable) {
    this.executable = executable;
    return this;
  }

  public void unsetExecutable() {
    this.executable = null;
  }

  /** Returns true if field executable is set (has been assigned a value) and false otherwise */
  public boolean isSetExecutable() {
    return this.executable != null;
  }

  public void setExecutableIsSet(boolean value) {
    if (!value) {
      this.executable = null;
    }
  }

  public String getExecutableMd5() {
    return this.executableMd5;
  }

  public Programme setExecutableMd5(String executableMd5) {
    this.executableMd5 = executableMd5;
    return this;
  }

  public void unsetExecutableMd5() {
    this.executableMd5 = null;
  }

  /** Returns true if field executableMd5 is set (has been assigned a value) and false otherwise */
  public boolean isSetExecutableMd5() {
    return this.executableMd5 != null;
  }

  public void setExecutableMd5IsSet(boolean value) {
    if (!value) {
      this.executableMd5 = null;
    }
  }

  public String getEnvVariables() {
    return this.envVariables;
  }

  public Programme setEnvVariables(String envVariables) {
    this.envVariables = envVariables;
    return this;
  }

  public void unsetEnvVariables() {
    this.envVariables = null;
  }

  /** Returns true if field envVariables is set (has been assigned a value) and false otherwise */
  public boolean isSetEnvVariables() {
    return this.envVariables != null;
  }

  public void setEnvVariablesIsSet(boolean value) {
    if (!value) {
      this.envVariables = null;
    }
  }

  public String getDescription() {
    return this.description;
  }

  public Programme setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public int getMinMem() {
    return this.minMem;
  }

  public Programme setMinMem(int minMem) {
    this.minMem = minMem;
    setMinMemIsSet(true);
    return this;
  }

  public void unsetMinMem() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINMEM_ISSET_ID);
  }

  /** Returns true if field minMem is set (has been assigned a value) and false otherwise */
  public boolean isSetMinMem() {
    return EncodingUtils.testBit(__isset_bitfield, __MINMEM_ISSET_ID);
  }

  public void setMinMemIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINMEM_ISSET_ID, value);
  }

  public int getMinFs() {
    return this.minFs;
  }

  public Programme setMinFs(int minFs) {
    this.minFs = minFs;
    setMinFsIsSet(true);
    return this;
  }

  public void unsetMinFs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINFS_ISSET_ID);
  }

  /** Returns true if field minFs is set (has been assigned a value) and false otherwise */
  public boolean isSetMinFs() {
    return EncodingUtils.testBit(__isset_bitfield, __MINFS_ISSET_ID);
  }

  public void setMinFsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINFS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COMMITTER:
      if (value == null) {
        unsetCommitter();
      } else {
        setCommitter((String)value);
      }
      break;

    case PROGRAMME_NAME:
      if (value == null) {
        unsetProgrammeName();
      } else {
        setProgrammeName((String)value);
      }
      break;

    case APP_TYPE:
      if (value == null) {
        unsetAppType();
      } else {
        setAppType((com.softsec.tase.common.rpc.domain.app.AppType)value);
      }
      break;

    case JOB_LIFECYCLE:
      if (value == null) {
        unsetJobLifecycle();
      } else {
        setJobLifecycle((com.softsec.tase.common.rpc.domain.job.JobLifecycle)value);
      }
      break;

    case JOB_PHASE:
      if (value == null) {
        unsetJobPhase();
      } else {
        setJobPhase((com.softsec.tase.common.rpc.domain.job.JobPhase)value);
      }
      break;

    case NODE_TYPE:
      if (value == null) {
        unsetNodeType();
      } else {
        setNodeType((com.softsec.tase.common.rpc.domain.node.NodeType)value);
      }
      break;

    case SCRIPT_NAME:
      if (value == null) {
        unsetScriptName();
      } else {
        setScriptName((String)value);
      }
      break;

    case SCRIPT:
      if (value == null) {
        unsetScript();
      } else {
        setScript((ByteBuffer)value);
      }
      break;

    case SCRIPT_MD5:
      if (value == null) {
        unsetScriptMd5();
      } else {
        setScriptMd5((String)value);
      }
      break;

    case EXECUTABLE_NAME:
      if (value == null) {
        unsetExecutableName();
      } else {
        setExecutableName((String)value);
      }
      break;

    case EXECUTABLE:
      if (value == null) {
        unsetExecutable();
      } else {
        setExecutable((ByteBuffer)value);
      }
      break;

    case EXECUTABLE_MD5:
      if (value == null) {
        unsetExecutableMd5();
      } else {
        setExecutableMd5((String)value);
      }
      break;

    case ENV_VARIABLES:
      if (value == null) {
        unsetEnvVariables();
      } else {
        setEnvVariables((String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case MIN_MEM:
      if (value == null) {
        unsetMinMem();
      } else {
        setMinMem((Integer)value);
      }
      break;

    case MIN_FS:
      if (value == null) {
        unsetMinFs();
      } else {
        setMinFs((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COMMITTER:
      return getCommitter();

    case PROGRAMME_NAME:
      return getProgrammeName();

    case APP_TYPE:
      return getAppType();

    case JOB_LIFECYCLE:
      return getJobLifecycle();

    case JOB_PHASE:
      return getJobPhase();

    case NODE_TYPE:
      return getNodeType();

    case SCRIPT_NAME:
      return getScriptName();

    case SCRIPT:
      return getScript();

    case SCRIPT_MD5:
      return getScriptMd5();

    case EXECUTABLE_NAME:
      return getExecutableName();

    case EXECUTABLE:
      return getExecutable();

    case EXECUTABLE_MD5:
      return getExecutableMd5();

    case ENV_VARIABLES:
      return getEnvVariables();

    case DESCRIPTION:
      return getDescription();

    case MIN_MEM:
      return Integer.valueOf(getMinMem());

    case MIN_FS:
      return Integer.valueOf(getMinFs());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COMMITTER:
      return isSetCommitter();
    case PROGRAMME_NAME:
      return isSetProgrammeName();
    case APP_TYPE:
      return isSetAppType();
    case JOB_LIFECYCLE:
      return isSetJobLifecycle();
    case JOB_PHASE:
      return isSetJobPhase();
    case NODE_TYPE:
      return isSetNodeType();
    case SCRIPT_NAME:
      return isSetScriptName();
    case SCRIPT:
      return isSetScript();
    case SCRIPT_MD5:
      return isSetScriptMd5();
    case EXECUTABLE_NAME:
      return isSetExecutableName();
    case EXECUTABLE:
      return isSetExecutable();
    case EXECUTABLE_MD5:
      return isSetExecutableMd5();
    case ENV_VARIABLES:
      return isSetEnvVariables();
    case DESCRIPTION:
      return isSetDescription();
    case MIN_MEM:
      return isSetMinMem();
    case MIN_FS:
      return isSetMinFs();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Programme)
      return this.equals((Programme)that);
    return false;
  }

  public boolean equals(Programme that) {
    if (that == null)
      return false;

    boolean this_present_committer = true && this.isSetCommitter();
    boolean that_present_committer = true && that.isSetCommitter();
    if (this_present_committer || that_present_committer) {
      if (!(this_present_committer && that_present_committer))
        return false;
      if (!this.committer.equals(that.committer))
        return false;
    }

    boolean this_present_programmeName = true && this.isSetProgrammeName();
    boolean that_present_programmeName = true && that.isSetProgrammeName();
    if (this_present_programmeName || that_present_programmeName) {
      if (!(this_present_programmeName && that_present_programmeName))
        return false;
      if (!this.programmeName.equals(that.programmeName))
        return false;
    }

    boolean this_present_appType = true && this.isSetAppType();
    boolean that_present_appType = true && that.isSetAppType();
    if (this_present_appType || that_present_appType) {
      if (!(this_present_appType && that_present_appType))
        return false;
      if (!this.appType.equals(that.appType))
        return false;
    }

    boolean this_present_jobLifecycle = true && this.isSetJobLifecycle();
    boolean that_present_jobLifecycle = true && that.isSetJobLifecycle();
    if (this_present_jobLifecycle || that_present_jobLifecycle) {
      if (!(this_present_jobLifecycle && that_present_jobLifecycle))
        return false;
      if (!this.jobLifecycle.equals(that.jobLifecycle))
        return false;
    }

    boolean this_present_jobPhase = true && this.isSetJobPhase();
    boolean that_present_jobPhase = true && that.isSetJobPhase();
    if (this_present_jobPhase || that_present_jobPhase) {
      if (!(this_present_jobPhase && that_present_jobPhase))
        return false;
      if (!this.jobPhase.equals(that.jobPhase))
        return false;
    }

    boolean this_present_nodeType = true && this.isSetNodeType();
    boolean that_present_nodeType = true && that.isSetNodeType();
    if (this_present_nodeType || that_present_nodeType) {
      if (!(this_present_nodeType && that_present_nodeType))
        return false;
      if (!this.nodeType.equals(that.nodeType))
        return false;
    }

    boolean this_present_scriptName = true && this.isSetScriptName();
    boolean that_present_scriptName = true && that.isSetScriptName();
    if (this_present_scriptName || that_present_scriptName) {
      if (!(this_present_scriptName && that_present_scriptName))
        return false;
      if (!this.scriptName.equals(that.scriptName))
        return false;
    }

    boolean this_present_script = true && this.isSetScript();
    boolean that_present_script = true && that.isSetScript();
    if (this_present_script || that_present_script) {
      if (!(this_present_script && that_present_script))
        return false;
      if (!this.script.equals(that.script))
        return false;
    }

    boolean this_present_scriptMd5 = true && this.isSetScriptMd5();
    boolean that_present_scriptMd5 = true && that.isSetScriptMd5();
    if (this_present_scriptMd5 || that_present_scriptMd5) {
      if (!(this_present_scriptMd5 && that_present_scriptMd5))
        return false;
      if (!this.scriptMd5.equals(that.scriptMd5))
        return false;
    }

    boolean this_present_executableName = true && this.isSetExecutableName();
    boolean that_present_executableName = true && that.isSetExecutableName();
    if (this_present_executableName || that_present_executableName) {
      if (!(this_present_executableName && that_present_executableName))
        return false;
      if (!this.executableName.equals(that.executableName))
        return false;
    }

    boolean this_present_executable = true && this.isSetExecutable();
    boolean that_present_executable = true && that.isSetExecutable();
    if (this_present_executable || that_present_executable) {
      if (!(this_present_executable && that_present_executable))
        return false;
      if (!this.executable.equals(that.executable))
        return false;
    }

    boolean this_present_executableMd5 = true && this.isSetExecutableMd5();
    boolean that_present_executableMd5 = true && that.isSetExecutableMd5();
    if (this_present_executableMd5 || that_present_executableMd5) {
      if (!(this_present_executableMd5 && that_present_executableMd5))
        return false;
      if (!this.executableMd5.equals(that.executableMd5))
        return false;
    }

    boolean this_present_envVariables = true && this.isSetEnvVariables();
    boolean that_present_envVariables = true && that.isSetEnvVariables();
    if (this_present_envVariables || that_present_envVariables) {
      if (!(this_present_envVariables && that_present_envVariables))
        return false;
      if (!this.envVariables.equals(that.envVariables))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_minMem = true && this.isSetMinMem();
    boolean that_present_minMem = true && that.isSetMinMem();
    if (this_present_minMem || that_present_minMem) {
      if (!(this_present_minMem && that_present_minMem))
        return false;
      if (this.minMem != that.minMem)
        return false;
    }

    boolean this_present_minFs = true && this.isSetMinFs();
    boolean that_present_minFs = true && that.isSetMinFs();
    if (this_present_minFs || that_present_minFs) {
      if (!(this_present_minFs && that_present_minFs))
        return false;
      if (this.minFs != that.minFs)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Programme other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Programme typedOther = (Programme)other;

    lastComparison = Boolean.valueOf(isSetCommitter()).compareTo(typedOther.isSetCommitter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommitter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.committer, typedOther.committer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProgrammeName()).compareTo(typedOther.isSetProgrammeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProgrammeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.programmeName, typedOther.programmeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppType()).compareTo(typedOther.isSetAppType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appType, typedOther.appType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobLifecycle()).compareTo(typedOther.isSetJobLifecycle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobLifecycle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobLifecycle, typedOther.jobLifecycle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobPhase()).compareTo(typedOther.isSetJobPhase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobPhase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobPhase, typedOther.jobPhase);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNodeType()).compareTo(typedOther.isSetNodeType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeType, typedOther.nodeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScriptName()).compareTo(typedOther.isSetScriptName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScriptName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scriptName, typedOther.scriptName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScript()).compareTo(typedOther.isSetScript());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScript()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.script, typedOther.script);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScriptMd5()).compareTo(typedOther.isSetScriptMd5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScriptMd5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scriptMd5, typedOther.scriptMd5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecutableName()).compareTo(typedOther.isSetExecutableName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecutableName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executableName, typedOther.executableName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecutable()).compareTo(typedOther.isSetExecutable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecutable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executable, typedOther.executable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecutableMd5()).compareTo(typedOther.isSetExecutableMd5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecutableMd5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executableMd5, typedOther.executableMd5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnvVariables()).compareTo(typedOther.isSetEnvVariables());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnvVariables()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.envVariables, typedOther.envVariables);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(typedOther.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, typedOther.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinMem()).compareTo(typedOther.isSetMinMem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinMem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minMem, typedOther.minMem);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinFs()).compareTo(typedOther.isSetMinFs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinFs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minFs, typedOther.minFs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Programme(");
    boolean first = true;

    sb.append("committer:");
    if (this.committer == null) {
      sb.append("null");
    } else {
      sb.append(this.committer);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("programmeName:");
    if (this.programmeName == null) {
      sb.append("null");
    } else {
      sb.append(this.programmeName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("appType:");
    if (this.appType == null) {
      sb.append("null");
    } else {
      sb.append(this.appType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jobLifecycle:");
    if (this.jobLifecycle == null) {
      sb.append("null");
    } else {
      sb.append(this.jobLifecycle);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jobPhase:");
    if (this.jobPhase == null) {
      sb.append("null");
    } else {
      sb.append(this.jobPhase);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nodeType:");
    if (this.nodeType == null) {
      sb.append("null");
    } else {
      sb.append(this.nodeType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("scriptName:");
    if (this.scriptName == null) {
      sb.append("null");
    } else {
      sb.append(this.scriptName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("script:");
    if (this.script == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.script, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("scriptMd5:");
    if (this.scriptMd5 == null) {
      sb.append("null");
    } else {
      sb.append(this.scriptMd5);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("executableName:");
    if (this.executableName == null) {
      sb.append("null");
    } else {
      sb.append(this.executableName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("executable:");
    if (this.executable == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.executable, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("executableMd5:");
    if (this.executableMd5 == null) {
      sb.append("null");
    } else {
      sb.append(this.executableMd5);
    }
    first = false;
    if (isSetEnvVariables()) {
      if (!first) sb.append(", ");
      sb.append("envVariables:");
      if (this.envVariables == null) {
        sb.append("null");
      } else {
        sb.append(this.envVariables);
      }
      first = false;
    }
    if (isSetDescription()) {
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
    }
    if (isSetMinMem()) {
      if (!first) sb.append(", ");
      sb.append("minMem:");
      sb.append(this.minMem);
      first = false;
    }
    if (isSetMinFs()) {
      if (!first) sb.append(", ");
      sb.append("minFs:");
      sb.append(this.minFs);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (committer == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'committer' was not present! Struct: " + toString());
    }
    if (programmeName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'programmeName' was not present! Struct: " + toString());
    }
    if (appType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'appType' was not present! Struct: " + toString());
    }
    if (jobLifecycle == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'jobLifecycle' was not present! Struct: " + toString());
    }
    if (jobPhase == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'jobPhase' was not present! Struct: " + toString());
    }
    if (nodeType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'nodeType' was not present! Struct: " + toString());
    }
    if (scriptName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'scriptName' was not present! Struct: " + toString());
    }
    if (script == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'script' was not present! Struct: " + toString());
    }
    if (scriptMd5 == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'scriptMd5' was not present! Struct: " + toString());
    }
    if (executableName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'executableName' was not present! Struct: " + toString());
    }
    if (executable == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'executable' was not present! Struct: " + toString());
    }
    if (executableMd5 == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'executableMd5' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProgrammeStandardSchemeFactory implements SchemeFactory {
    public ProgrammeStandardScheme getScheme() {
      return new ProgrammeStandardScheme();
    }
  }

  private static class ProgrammeStandardScheme extends StandardScheme<Programme> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Programme struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMMITTER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.committer = iprot.readString();
              struct.setCommitterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROGRAMME_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.programmeName = iprot.readString();
              struct.setProgrammeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // APP_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.appType = com.softsec.tase.common.rpc.domain.app.AppType.findByValue(iprot.readI32());
              struct.setAppTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // JOB_LIFECYCLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.jobLifecycle = com.softsec.tase.common.rpc.domain.job.JobLifecycle.findByValue(iprot.readI32());
              struct.setJobLifecycleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // JOB_PHASE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.jobPhase = com.softsec.tase.common.rpc.domain.job.JobPhase.findByValue(iprot.readI32());
              struct.setJobPhaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NODE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nodeType = com.softsec.tase.common.rpc.domain.node.NodeType.findByValue(iprot.readI32());
              struct.setNodeTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SCRIPT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.scriptName = iprot.readString();
              struct.setScriptNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SCRIPT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.script = iprot.readBinary();
              struct.setScriptIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SCRIPT_MD5
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.scriptMd5 = iprot.readString();
              struct.setScriptMd5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // EXECUTABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.executableName = iprot.readString();
              struct.setExecutableNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // EXECUTABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.executable = iprot.readBinary();
              struct.setExecutableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // EXECUTABLE_MD5
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.executableMd5 = iprot.readString();
              struct.setExecutableMd5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ENV_VARIABLES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.envVariables = iprot.readString();
              struct.setEnvVariablesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // MIN_MEM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.minMem = iprot.readI32();
              struct.setMinMemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // MIN_FS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.minFs = iprot.readI32();
              struct.setMinFsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Programme struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.committer != null) {
        oprot.writeFieldBegin(COMMITTER_FIELD_DESC);
        oprot.writeString(struct.committer);
        oprot.writeFieldEnd();
      }
      if (struct.programmeName != null) {
        oprot.writeFieldBegin(PROGRAMME_NAME_FIELD_DESC);
        oprot.writeString(struct.programmeName);
        oprot.writeFieldEnd();
      }
      if (struct.appType != null) {
        oprot.writeFieldBegin(APP_TYPE_FIELD_DESC);
        oprot.writeI32(struct.appType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.jobLifecycle != null) {
        oprot.writeFieldBegin(JOB_LIFECYCLE_FIELD_DESC);
        oprot.writeI32(struct.jobLifecycle.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.jobPhase != null) {
        oprot.writeFieldBegin(JOB_PHASE_FIELD_DESC);
        oprot.writeI32(struct.jobPhase.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.nodeType != null) {
        oprot.writeFieldBegin(NODE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.nodeType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.scriptName != null) {
        oprot.writeFieldBegin(SCRIPT_NAME_FIELD_DESC);
        oprot.writeString(struct.scriptName);
        oprot.writeFieldEnd();
      }
      if (struct.script != null) {
        oprot.writeFieldBegin(SCRIPT_FIELD_DESC);
        oprot.writeBinary(struct.script);
        oprot.writeFieldEnd();
      }
      if (struct.scriptMd5 != null) {
        oprot.writeFieldBegin(SCRIPT_MD5_FIELD_DESC);
        oprot.writeString(struct.scriptMd5);
        oprot.writeFieldEnd();
      }
      if (struct.executableName != null) {
        oprot.writeFieldBegin(EXECUTABLE_NAME_FIELD_DESC);
        oprot.writeString(struct.executableName);
        oprot.writeFieldEnd();
      }
      if (struct.executable != null) {
        oprot.writeFieldBegin(EXECUTABLE_FIELD_DESC);
        oprot.writeBinary(struct.executable);
        oprot.writeFieldEnd();
      }
      if (struct.executableMd5 != null) {
        oprot.writeFieldBegin(EXECUTABLE_MD5_FIELD_DESC);
        oprot.writeString(struct.executableMd5);
        oprot.writeFieldEnd();
      }
      if (struct.envVariables != null) {
        if (struct.isSetEnvVariables()) {
          oprot.writeFieldBegin(ENV_VARIABLES_FIELD_DESC);
          oprot.writeString(struct.envVariables);
          oprot.writeFieldEnd();
        }
      }
      if (struct.description != null) {
        if (struct.isSetDescription()) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMinMem()) {
        oprot.writeFieldBegin(MIN_MEM_FIELD_DESC);
        oprot.writeI32(struct.minMem);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMinFs()) {
        oprot.writeFieldBegin(MIN_FS_FIELD_DESC);
        oprot.writeI32(struct.minFs);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProgrammeTupleSchemeFactory implements SchemeFactory {
    public ProgrammeTupleScheme getScheme() {
      return new ProgrammeTupleScheme();
    }
  }

  private static class ProgrammeTupleScheme extends TupleScheme<Programme> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Programme struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.committer);
      oprot.writeString(struct.programmeName);
      oprot.writeI32(struct.appType.getValue());
      oprot.writeI32(struct.jobLifecycle.getValue());
      oprot.writeI32(struct.jobPhase.getValue());
      oprot.writeI32(struct.nodeType.getValue());
      oprot.writeString(struct.scriptName);
      oprot.writeBinary(struct.script);
      oprot.writeString(struct.scriptMd5);
      oprot.writeString(struct.executableName);
      oprot.writeBinary(struct.executable);
      oprot.writeString(struct.executableMd5);
      BitSet optionals = new BitSet();
      if (struct.isSetEnvVariables()) {
        optionals.set(0);
      }
      if (struct.isSetDescription()) {
        optionals.set(1);
      }
      if (struct.isSetMinMem()) {
        optionals.set(2);
      }
      if (struct.isSetMinFs()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetEnvVariables()) {
        oprot.writeString(struct.envVariables);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetMinMem()) {
        oprot.writeI32(struct.minMem);
      }
      if (struct.isSetMinFs()) {
        oprot.writeI32(struct.minFs);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Programme struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.committer = iprot.readString();
      struct.setCommitterIsSet(true);
      struct.programmeName = iprot.readString();
      struct.setProgrammeNameIsSet(true);
      struct.appType = com.softsec.tase.common.rpc.domain.app.AppType.findByValue(iprot.readI32());
      struct.setAppTypeIsSet(true);
      struct.jobLifecycle = com.softsec.tase.common.rpc.domain.job.JobLifecycle.findByValue(iprot.readI32());
      struct.setJobLifecycleIsSet(true);
      struct.jobPhase = com.softsec.tase.common.rpc.domain.job.JobPhase.findByValue(iprot.readI32());
      struct.setJobPhaseIsSet(true);
      struct.nodeType = com.softsec.tase.common.rpc.domain.node.NodeType.findByValue(iprot.readI32());
      struct.setNodeTypeIsSet(true);
      struct.scriptName = iprot.readString();
      struct.setScriptNameIsSet(true);
      struct.script = iprot.readBinary();
      struct.setScriptIsSet(true);
      struct.scriptMd5 = iprot.readString();
      struct.setScriptMd5IsSet(true);
      struct.executableName = iprot.readString();
      struct.setExecutableNameIsSet(true);
      struct.executable = iprot.readBinary();
      struct.setExecutableIsSet(true);
      struct.executableMd5 = iprot.readString();
      struct.setExecutableMd5IsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.envVariables = iprot.readString();
        struct.setEnvVariablesIsSet(true);
      }
      if (incoming.get(1)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.minMem = iprot.readI32();
        struct.setMinMemIsSet(true);
      }
      if (incoming.get(3)) {
        struct.minFs = iprot.readI32();
        struct.setMinFsIsSet(true);
      }
    }
  }

}

