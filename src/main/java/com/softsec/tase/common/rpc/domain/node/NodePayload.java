/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.softsec.tase.common.rpc.domain.node;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class NodePayload implements org.apache.thrift.TBase<NodePayload, NodePayload._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NodePayload");

  private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CLUSTER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("clusterType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField NODE_TYPE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeTypeList", org.apache.thrift.protocol.TType.SET, (short)3);
  private static final org.apache.thrift.protocol.TField NODE_RUNTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeRuntime", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField QUEUE_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("queueLimit", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField QUEUE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("queueNum", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField EXPECTED_DELAY_FIELD_DESC = new org.apache.thrift.protocol.TField("expectedDelay", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField PREFERRED_PROGRAM_TYPE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("preferredProgramTypeList", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField PREFERRED_PROGRAM_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("preferredProgramIdList", org.apache.thrift.protocol.TType.LIST, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new NodePayloadStandardSchemeFactory());
    schemes.put(TupleScheme.class, new NodePayloadTupleSchemeFactory());
  }

  public String nodeId; // required
  /**
   * 
   * @see ClusterType
   */
  public ClusterType clusterType; // required
  public Set<NodeType> nodeTypeList; // required
  public NodeRuntime nodeRuntime; // required
  public int queueLimit; // required
  public int queueNum; // required
  public long expectedDelay; // required
  public List<Integer> preferredProgramTypeList; // required
  public List<Long> preferredProgramIdList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NODE_ID((short)1, "nodeId"),
    /**
     * 
     * @see ClusterType
     */
    CLUSTER_TYPE((short)2, "clusterType"),
    NODE_TYPE_LIST((short)3, "nodeTypeList"),
    NODE_RUNTIME((short)4, "nodeRuntime"),
    QUEUE_LIMIT((short)5, "queueLimit"),
    QUEUE_NUM((short)6, "queueNum"),
    EXPECTED_DELAY((short)7, "expectedDelay"),
    PREFERRED_PROGRAM_TYPE_LIST((short)8, "preferredProgramTypeList"),
    PREFERRED_PROGRAM_ID_LIST((short)9, "preferredProgramIdList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NODE_ID
          return NODE_ID;
        case 2: // CLUSTER_TYPE
          return CLUSTER_TYPE;
        case 3: // NODE_TYPE_LIST
          return NODE_TYPE_LIST;
        case 4: // NODE_RUNTIME
          return NODE_RUNTIME;
        case 5: // QUEUE_LIMIT
          return QUEUE_LIMIT;
        case 6: // QUEUE_NUM
          return QUEUE_NUM;
        case 7: // EXPECTED_DELAY
          return EXPECTED_DELAY;
        case 8: // PREFERRED_PROGRAM_TYPE_LIST
          return PREFERRED_PROGRAM_TYPE_LIST;
        case 9: // PREFERRED_PROGRAM_ID_LIST
          return PREFERRED_PROGRAM_ID_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __QUEUELIMIT_ISSET_ID = 0;
  private static final int __QUEUENUM_ISSET_ID = 1;
  private static final int __EXPECTEDDELAY_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodeId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLUSTER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("clusterType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ClusterType.class)));
    tmpMap.put(_Fields.NODE_TYPE_LIST, new org.apache.thrift.meta_data.FieldMetaData("nodeTypeList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, NodeType.class))));
    tmpMap.put(_Fields.NODE_RUNTIME, new org.apache.thrift.meta_data.FieldMetaData("nodeRuntime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NodeRuntime.class)));
    tmpMap.put(_Fields.QUEUE_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("queueLimit", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.QUEUE_NUM, new org.apache.thrift.meta_data.FieldMetaData("queueNum", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXPECTED_DELAY, new org.apache.thrift.meta_data.FieldMetaData("expectedDelay", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PREFERRED_PROGRAM_TYPE_LIST, new org.apache.thrift.meta_data.FieldMetaData("preferredProgramTypeList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.PREFERRED_PROGRAM_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("preferredProgramIdList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NodePayload.class, metaDataMap);
  }

  public NodePayload() {
  }

  public NodePayload(
    String nodeId,
    ClusterType clusterType,
    Set<NodeType> nodeTypeList,
    NodeRuntime nodeRuntime,
    int queueLimit,
    int queueNum,
    long expectedDelay,
    List<Integer> preferredProgramTypeList,
    List<Long> preferredProgramIdList)
  {
    this();
    this.nodeId = nodeId;
    this.clusterType = clusterType;
    this.nodeTypeList = nodeTypeList;
    this.nodeRuntime = nodeRuntime;
    this.queueLimit = queueLimit;
    setQueueLimitIsSet(true);
    this.queueNum = queueNum;
    setQueueNumIsSet(true);
    this.expectedDelay = expectedDelay;
    setExpectedDelayIsSet(true);
    this.preferredProgramTypeList = preferredProgramTypeList;
    this.preferredProgramIdList = preferredProgramIdList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NodePayload(NodePayload other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetNodeId()) {
      this.nodeId = other.nodeId;
    }
    if (other.isSetClusterType()) {
      this.clusterType = other.clusterType;
    }
    if (other.isSetNodeTypeList()) {
      Set<NodeType> __this__nodeTypeList = new HashSet<NodeType>();
      for (NodeType other_element : other.nodeTypeList) {
        __this__nodeTypeList.add(other_element);
      }
      this.nodeTypeList = __this__nodeTypeList;
    }
    if (other.isSetNodeRuntime()) {
      this.nodeRuntime = new NodeRuntime(other.nodeRuntime);
    }
    this.queueLimit = other.queueLimit;
    this.queueNum = other.queueNum;
    this.expectedDelay = other.expectedDelay;
    if (other.isSetPreferredProgramTypeList()) {
      List<Integer> __this__preferredProgramTypeList = new ArrayList<Integer>();
      for (Integer other_element : other.preferredProgramTypeList) {
        __this__preferredProgramTypeList.add(other_element);
      }
      this.preferredProgramTypeList = __this__preferredProgramTypeList;
    }
    if (other.isSetPreferredProgramIdList()) {
      List<Long> __this__preferredProgramIdList = new ArrayList<Long>();
      for (Long other_element : other.preferredProgramIdList) {
        __this__preferredProgramIdList.add(other_element);
      }
      this.preferredProgramIdList = __this__preferredProgramIdList;
    }
  }

  public NodePayload deepCopy() {
    return new NodePayload(this);
  }

  @Override
  public void clear() {
    this.nodeId = null;
    this.clusterType = null;
    this.nodeTypeList = null;
    this.nodeRuntime = null;
    setQueueLimitIsSet(false);
    this.queueLimit = 0;
    setQueueNumIsSet(false);
    this.queueNum = 0;
    setExpectedDelayIsSet(false);
    this.expectedDelay = 0;
    this.preferredProgramTypeList = null;
    this.preferredProgramIdList = null;
  }

  public String getNodeId() {
    return this.nodeId;
  }

  public NodePayload setNodeId(String nodeId) {
    this.nodeId = nodeId;
    return this;
  }

  public void unsetNodeId() {
    this.nodeId = null;
  }

  /** Returns true if field nodeId is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeId() {
    return this.nodeId != null;
  }

  public void setNodeIdIsSet(boolean value) {
    if (!value) {
      this.nodeId = null;
    }
  }

  /**
   * 
   * @see ClusterType
   */
  public ClusterType getClusterType() {
    return this.clusterType;
  }

  /**
   * 
   * @see ClusterType
   */
  public NodePayload setClusterType(ClusterType clusterType) {
    this.clusterType = clusterType;
    return this;
  }

  public void unsetClusterType() {
    this.clusterType = null;
  }

  /** Returns true if field clusterType is set (has been assigned a value) and false otherwise */
  public boolean isSetClusterType() {
    return this.clusterType != null;
  }

  public void setClusterTypeIsSet(boolean value) {
    if (!value) {
      this.clusterType = null;
    }
  }

  public int getNodeTypeListSize() {
    return (this.nodeTypeList == null) ? 0 : this.nodeTypeList.size();
  }

  public java.util.Iterator<NodeType> getNodeTypeListIterator() {
    return (this.nodeTypeList == null) ? null : this.nodeTypeList.iterator();
  }

  public void addToNodeTypeList(NodeType elem) {
    if (this.nodeTypeList == null) {
      this.nodeTypeList = new HashSet<NodeType>();
    }
    this.nodeTypeList.add(elem);
  }

  public Set<NodeType> getNodeTypeList() {
    return this.nodeTypeList;
  }

  public NodePayload setNodeTypeList(Set<NodeType> nodeTypeList) {
    this.nodeTypeList = nodeTypeList;
    return this;
  }

  public void unsetNodeTypeList() {
    this.nodeTypeList = null;
  }

  /** Returns true if field nodeTypeList is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeTypeList() {
    return this.nodeTypeList != null;
  }

  public void setNodeTypeListIsSet(boolean value) {
    if (!value) {
      this.nodeTypeList = null;
    }
  }

  public NodeRuntime getNodeRuntime() {
    return this.nodeRuntime;
  }

  public NodePayload setNodeRuntime(NodeRuntime nodeRuntime) {
    this.nodeRuntime = nodeRuntime;
    return this;
  }

  public void unsetNodeRuntime() {
    this.nodeRuntime = null;
  }

  /** Returns true if field nodeRuntime is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeRuntime() {
    return this.nodeRuntime != null;
  }

  public void setNodeRuntimeIsSet(boolean value) {
    if (!value) {
      this.nodeRuntime = null;
    }
  }

  public int getQueueLimit() {
    return this.queueLimit;
  }

  public NodePayload setQueueLimit(int queueLimit) {
    this.queueLimit = queueLimit;
    setQueueLimitIsSet(true);
    return this;
  }

  public void unsetQueueLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUEUELIMIT_ISSET_ID);
  }

  /** Returns true if field queueLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetQueueLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __QUEUELIMIT_ISSET_ID);
  }

  public void setQueueLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUEUELIMIT_ISSET_ID, value);
  }

  public int getQueueNum() {
    return this.queueNum;
  }

  public NodePayload setQueueNum(int queueNum) {
    this.queueNum = queueNum;
    setQueueNumIsSet(true);
    return this;
  }

  public void unsetQueueNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUEUENUM_ISSET_ID);
  }

  /** Returns true if field queueNum is set (has been assigned a value) and false otherwise */
  public boolean isSetQueueNum() {
    return EncodingUtils.testBit(__isset_bitfield, __QUEUENUM_ISSET_ID);
  }

  public void setQueueNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUEUENUM_ISSET_ID, value);
  }

  public long getExpectedDelay() {
    return this.expectedDelay;
  }

  public NodePayload setExpectedDelay(long expectedDelay) {
    this.expectedDelay = expectedDelay;
    setExpectedDelayIsSet(true);
    return this;
  }

  public void unsetExpectedDelay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPECTEDDELAY_ISSET_ID);
  }

  /** Returns true if field expectedDelay is set (has been assigned a value) and false otherwise */
  public boolean isSetExpectedDelay() {
    return EncodingUtils.testBit(__isset_bitfield, __EXPECTEDDELAY_ISSET_ID);
  }

  public void setExpectedDelayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPECTEDDELAY_ISSET_ID, value);
  }

  public int getPreferredProgramTypeListSize() {
    return (this.preferredProgramTypeList == null) ? 0 : this.preferredProgramTypeList.size();
  }

  public java.util.Iterator<Integer> getPreferredProgramTypeListIterator() {
    return (this.preferredProgramTypeList == null) ? null : this.preferredProgramTypeList.iterator();
  }

  public void addToPreferredProgramTypeList(int elem) {
    if (this.preferredProgramTypeList == null) {
      this.preferredProgramTypeList = new ArrayList<Integer>();
    }
    this.preferredProgramTypeList.add(elem);
  }

  public List<Integer> getPreferredProgramTypeList() {
    return this.preferredProgramTypeList;
  }

  public NodePayload setPreferredProgramTypeList(List<Integer> preferredProgramTypeList) {
    this.preferredProgramTypeList = preferredProgramTypeList;
    return this;
  }

  public void unsetPreferredProgramTypeList() {
    this.preferredProgramTypeList = null;
  }

  /** Returns true if field preferredProgramTypeList is set (has been assigned a value) and false otherwise */
  public boolean isSetPreferredProgramTypeList() {
    return this.preferredProgramTypeList != null;
  }

  public void setPreferredProgramTypeListIsSet(boolean value) {
    if (!value) {
      this.preferredProgramTypeList = null;
    }
  }

  public int getPreferredProgramIdListSize() {
    return (this.preferredProgramIdList == null) ? 0 : this.preferredProgramIdList.size();
  }

  public java.util.Iterator<Long> getPreferredProgramIdListIterator() {
    return (this.preferredProgramIdList == null) ? null : this.preferredProgramIdList.iterator();
  }

  public void addToPreferredProgramIdList(long elem) {
    if (this.preferredProgramIdList == null) {
      this.preferredProgramIdList = new ArrayList<Long>();
    }
    this.preferredProgramIdList.add(elem);
  }

  public List<Long> getPreferredProgramIdList() {
    return this.preferredProgramIdList;
  }

  public NodePayload setPreferredProgramIdList(List<Long> preferredProgramIdList) {
    this.preferredProgramIdList = preferredProgramIdList;
    return this;
  }

  public void unsetPreferredProgramIdList() {
    this.preferredProgramIdList = null;
  }

  /** Returns true if field preferredProgramIdList is set (has been assigned a value) and false otherwise */
  public boolean isSetPreferredProgramIdList() {
    return this.preferredProgramIdList != null;
  }

  public void setPreferredProgramIdListIsSet(boolean value) {
    if (!value) {
      this.preferredProgramIdList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NODE_ID:
      if (value == null) {
        unsetNodeId();
      } else {
        setNodeId((String)value);
      }
      break;

    case CLUSTER_TYPE:
      if (value == null) {
        unsetClusterType();
      } else {
        setClusterType((ClusterType)value);
      }
      break;

    case NODE_TYPE_LIST:
      if (value == null) {
        unsetNodeTypeList();
      } else {
        setNodeTypeList((Set<NodeType>)value);
      }
      break;

    case NODE_RUNTIME:
      if (value == null) {
        unsetNodeRuntime();
      } else {
        setNodeRuntime((NodeRuntime)value);
      }
      break;

    case QUEUE_LIMIT:
      if (value == null) {
        unsetQueueLimit();
      } else {
        setQueueLimit((Integer)value);
      }
      break;

    case QUEUE_NUM:
      if (value == null) {
        unsetQueueNum();
      } else {
        setQueueNum((Integer)value);
      }
      break;

    case EXPECTED_DELAY:
      if (value == null) {
        unsetExpectedDelay();
      } else {
        setExpectedDelay((Long)value);
      }
      break;

    case PREFERRED_PROGRAM_TYPE_LIST:
      if (value == null) {
        unsetPreferredProgramTypeList();
      } else {
        setPreferredProgramTypeList((List<Integer>)value);
      }
      break;

    case PREFERRED_PROGRAM_ID_LIST:
      if (value == null) {
        unsetPreferredProgramIdList();
      } else {
        setPreferredProgramIdList((List<Long>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NODE_ID:
      return getNodeId();

    case CLUSTER_TYPE:
      return getClusterType();

    case NODE_TYPE_LIST:
      return getNodeTypeList();

    case NODE_RUNTIME:
      return getNodeRuntime();

    case QUEUE_LIMIT:
      return Integer.valueOf(getQueueLimit());

    case QUEUE_NUM:
      return Integer.valueOf(getQueueNum());

    case EXPECTED_DELAY:
      return Long.valueOf(getExpectedDelay());

    case PREFERRED_PROGRAM_TYPE_LIST:
      return getPreferredProgramTypeList();

    case PREFERRED_PROGRAM_ID_LIST:
      return getPreferredProgramIdList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NODE_ID:
      return isSetNodeId();
    case CLUSTER_TYPE:
      return isSetClusterType();
    case NODE_TYPE_LIST:
      return isSetNodeTypeList();
    case NODE_RUNTIME:
      return isSetNodeRuntime();
    case QUEUE_LIMIT:
      return isSetQueueLimit();
    case QUEUE_NUM:
      return isSetQueueNum();
    case EXPECTED_DELAY:
      return isSetExpectedDelay();
    case PREFERRED_PROGRAM_TYPE_LIST:
      return isSetPreferredProgramTypeList();
    case PREFERRED_PROGRAM_ID_LIST:
      return isSetPreferredProgramIdList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof NodePayload)
      return this.equals((NodePayload)that);
    return false;
  }

  public boolean equals(NodePayload that) {
    if (that == null)
      return false;

    boolean this_present_nodeId = true && this.isSetNodeId();
    boolean that_present_nodeId = true && that.isSetNodeId();
    if (this_present_nodeId || that_present_nodeId) {
      if (!(this_present_nodeId && that_present_nodeId))
        return false;
      if (!this.nodeId.equals(that.nodeId))
        return false;
    }

    boolean this_present_clusterType = true && this.isSetClusterType();
    boolean that_present_clusterType = true && that.isSetClusterType();
    if (this_present_clusterType || that_present_clusterType) {
      if (!(this_present_clusterType && that_present_clusterType))
        return false;
      if (!this.clusterType.equals(that.clusterType))
        return false;
    }

    boolean this_present_nodeTypeList = true && this.isSetNodeTypeList();
    boolean that_present_nodeTypeList = true && that.isSetNodeTypeList();
    if (this_present_nodeTypeList || that_present_nodeTypeList) {
      if (!(this_present_nodeTypeList && that_present_nodeTypeList))
        return false;
      if (!this.nodeTypeList.equals(that.nodeTypeList))
        return false;
    }

    boolean this_present_nodeRuntime = true && this.isSetNodeRuntime();
    boolean that_present_nodeRuntime = true && that.isSetNodeRuntime();
    if (this_present_nodeRuntime || that_present_nodeRuntime) {
      if (!(this_present_nodeRuntime && that_present_nodeRuntime))
        return false;
      if (!this.nodeRuntime.equals(that.nodeRuntime))
        return false;
    }

    boolean this_present_queueLimit = true;
    boolean that_present_queueLimit = true;
    if (this_present_queueLimit || that_present_queueLimit) {
      if (!(this_present_queueLimit && that_present_queueLimit))
        return false;
      if (this.queueLimit != that.queueLimit)
        return false;
    }

    boolean this_present_queueNum = true;
    boolean that_present_queueNum = true;
    if (this_present_queueNum || that_present_queueNum) {
      if (!(this_present_queueNum && that_present_queueNum))
        return false;
      if (this.queueNum != that.queueNum)
        return false;
    }

    boolean this_present_expectedDelay = true;
    boolean that_present_expectedDelay = true;
    if (this_present_expectedDelay || that_present_expectedDelay) {
      if (!(this_present_expectedDelay && that_present_expectedDelay))
        return false;
      if (this.expectedDelay != that.expectedDelay)
        return false;
    }

    boolean this_present_preferredProgramTypeList = true && this.isSetPreferredProgramTypeList();
    boolean that_present_preferredProgramTypeList = true && that.isSetPreferredProgramTypeList();
    if (this_present_preferredProgramTypeList || that_present_preferredProgramTypeList) {
      if (!(this_present_preferredProgramTypeList && that_present_preferredProgramTypeList))
        return false;
      if (!this.preferredProgramTypeList.equals(that.preferredProgramTypeList))
        return false;
    }

    boolean this_present_preferredProgramIdList = true && this.isSetPreferredProgramIdList();
    boolean that_present_preferredProgramIdList = true && that.isSetPreferredProgramIdList();
    if (this_present_preferredProgramIdList || that_present_preferredProgramIdList) {
      if (!(this_present_preferredProgramIdList && that_present_preferredProgramIdList))
        return false;
      if (!this.preferredProgramIdList.equals(that.preferredProgramIdList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(NodePayload other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    NodePayload typedOther = (NodePayload)other;

    lastComparison = Boolean.valueOf(isSetNodeId()).compareTo(typedOther.isSetNodeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeId, typedOther.nodeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClusterType()).compareTo(typedOther.isSetClusterType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClusterType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clusterType, typedOther.clusterType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNodeTypeList()).compareTo(typedOther.isSetNodeTypeList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeTypeList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeTypeList, typedOther.nodeTypeList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNodeRuntime()).compareTo(typedOther.isSetNodeRuntime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeRuntime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeRuntime, typedOther.nodeRuntime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueueLimit()).compareTo(typedOther.isSetQueueLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueueLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queueLimit, typedOther.queueLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueueNum()).compareTo(typedOther.isSetQueueNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueueNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queueNum, typedOther.queueNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpectedDelay()).compareTo(typedOther.isSetExpectedDelay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpectedDelay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expectedDelay, typedOther.expectedDelay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreferredProgramTypeList()).compareTo(typedOther.isSetPreferredProgramTypeList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreferredProgramTypeList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preferredProgramTypeList, typedOther.preferredProgramTypeList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreferredProgramIdList()).compareTo(typedOther.isSetPreferredProgramIdList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreferredProgramIdList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preferredProgramIdList, typedOther.preferredProgramIdList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("NodePayload(");
    boolean first = true;

    sb.append("nodeId:");
    if (this.nodeId == null) {
      sb.append("null");
    } else {
      sb.append(this.nodeId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clusterType:");
    if (this.clusterType == null) {
      sb.append("null");
    } else {
      sb.append(this.clusterType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nodeTypeList:");
    if (this.nodeTypeList == null) {
      sb.append("null");
    } else {
      sb.append(this.nodeTypeList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nodeRuntime:");
    if (this.nodeRuntime == null) {
      sb.append("null");
    } else {
      sb.append(this.nodeRuntime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("queueLimit:");
    sb.append(this.queueLimit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("queueNum:");
    sb.append(this.queueNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("expectedDelay:");
    sb.append(this.expectedDelay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("preferredProgramTypeList:");
    if (this.preferredProgramTypeList == null) {
      sb.append("null");
    } else {
      sb.append(this.preferredProgramTypeList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("preferredProgramIdList:");
    if (this.preferredProgramIdList == null) {
      sb.append("null");
    } else {
      sb.append(this.preferredProgramIdList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (nodeId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'nodeId' was not present! Struct: " + toString());
    }
    if (clusterType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'clusterType' was not present! Struct: " + toString());
    }
    if (nodeTypeList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'nodeTypeList' was not present! Struct: " + toString());
    }
    if (nodeRuntime == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'nodeRuntime' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'queueLimit' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'queueNum' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'expectedDelay' because it's a primitive and you chose the non-beans generator.
    if (preferredProgramTypeList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'preferredProgramTypeList' was not present! Struct: " + toString());
    }
    if (preferredProgramIdList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'preferredProgramIdList' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (nodeRuntime != null) {
      nodeRuntime.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NodePayloadStandardSchemeFactory implements SchemeFactory {
    public NodePayloadStandardScheme getScheme() {
      return new NodePayloadStandardScheme();
    }
  }

  private static class NodePayloadStandardScheme extends StandardScheme<NodePayload> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NodePayload struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NODE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nodeId = iprot.readString();
              struct.setNodeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLUSTER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.clusterType = ClusterType.findByValue(iprot.readI32());
              struct.setClusterTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NODE_TYPE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                struct.nodeTypeList = new HashSet<NodeType>(2*_set0.size);
                for (int _i1 = 0; _i1 < _set0.size; ++_i1)
                {
                  NodeType _elem2; // required
                  _elem2 = NodeType.findByValue(iprot.readI32());
                  struct.nodeTypeList.add(_elem2);
                }
                iprot.readSetEnd();
              }
              struct.setNodeTypeListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NODE_RUNTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.nodeRuntime = new NodeRuntime();
              struct.nodeRuntime.read(iprot);
              struct.setNodeRuntimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // QUEUE_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.queueLimit = iprot.readI32();
              struct.setQueueLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // QUEUE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.queueNum = iprot.readI32();
              struct.setQueueNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // EXPECTED_DELAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.expectedDelay = iprot.readI64();
              struct.setExpectedDelayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PREFERRED_PROGRAM_TYPE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.preferredProgramTypeList = new ArrayList<Integer>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  int _elem5; // required
                  _elem5 = iprot.readI32();
                  struct.preferredProgramTypeList.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setPreferredProgramTypeListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PREFERRED_PROGRAM_ID_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.preferredProgramIdList = new ArrayList<Long>(_list6.size);
                for (int _i7 = 0; _i7 < _list6.size; ++_i7)
                {
                  long _elem8; // required
                  _elem8 = iprot.readI64();
                  struct.preferredProgramIdList.add(_elem8);
                }
                iprot.readListEnd();
              }
              struct.setPreferredProgramIdListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetQueueLimit()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'queueLimit' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetQueueNum()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'queueNum' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetExpectedDelay()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'expectedDelay' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NodePayload struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.nodeId != null) {
        oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
        oprot.writeString(struct.nodeId);
        oprot.writeFieldEnd();
      }
      if (struct.clusterType != null) {
        oprot.writeFieldBegin(CLUSTER_TYPE_FIELD_DESC);
        oprot.writeI32(struct.clusterType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.nodeTypeList != null) {
        oprot.writeFieldBegin(NODE_TYPE_LIST_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.nodeTypeList.size()));
          for (NodeType _iter9 : struct.nodeTypeList)
          {
            oprot.writeI32(_iter9.getValue());
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.nodeRuntime != null) {
        oprot.writeFieldBegin(NODE_RUNTIME_FIELD_DESC);
        struct.nodeRuntime.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(QUEUE_LIMIT_FIELD_DESC);
      oprot.writeI32(struct.queueLimit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(QUEUE_NUM_FIELD_DESC);
      oprot.writeI32(struct.queueNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXPECTED_DELAY_FIELD_DESC);
      oprot.writeI64(struct.expectedDelay);
      oprot.writeFieldEnd();
      if (struct.preferredProgramTypeList != null) {
        oprot.writeFieldBegin(PREFERRED_PROGRAM_TYPE_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.preferredProgramTypeList.size()));
          for (int _iter10 : struct.preferredProgramTypeList)
          {
            oprot.writeI32(_iter10);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.preferredProgramIdList != null) {
        oprot.writeFieldBegin(PREFERRED_PROGRAM_ID_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.preferredProgramIdList.size()));
          for (long _iter11 : struct.preferredProgramIdList)
          {
            oprot.writeI64(_iter11);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NodePayloadTupleSchemeFactory implements SchemeFactory {
    public NodePayloadTupleScheme getScheme() {
      return new NodePayloadTupleScheme();
    }
  }

  private static class NodePayloadTupleScheme extends TupleScheme<NodePayload> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NodePayload struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.nodeId);
      oprot.writeI32(struct.clusterType.getValue());
      {
        oprot.writeI32(struct.nodeTypeList.size());
        for (NodeType _iter12 : struct.nodeTypeList)
        {
          oprot.writeI32(_iter12.getValue());
        }
      }
      struct.nodeRuntime.write(oprot);
      oprot.writeI32(struct.queueLimit);
      oprot.writeI32(struct.queueNum);
      oprot.writeI64(struct.expectedDelay);
      {
        oprot.writeI32(struct.preferredProgramTypeList.size());
        for (int _iter13 : struct.preferredProgramTypeList)
        {
          oprot.writeI32(_iter13);
        }
      }
      {
        oprot.writeI32(struct.preferredProgramIdList.size());
        for (long _iter14 : struct.preferredProgramIdList)
        {
          oprot.writeI64(_iter14);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NodePayload struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.nodeId = iprot.readString();
      struct.setNodeIdIsSet(true);
      struct.clusterType = ClusterType.findByValue(iprot.readI32());
      struct.setClusterTypeIsSet(true);
      {
        org.apache.thrift.protocol.TSet _set15 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.nodeTypeList = new HashSet<NodeType>(2*_set15.size);
        for (int _i16 = 0; _i16 < _set15.size; ++_i16)
        {
          NodeType _elem17; // required
          _elem17 = NodeType.findByValue(iprot.readI32());
          struct.nodeTypeList.add(_elem17);
        }
      }
      struct.setNodeTypeListIsSet(true);
      struct.nodeRuntime = new NodeRuntime();
      struct.nodeRuntime.read(iprot);
      struct.setNodeRuntimeIsSet(true);
      struct.queueLimit = iprot.readI32();
      struct.setQueueLimitIsSet(true);
      struct.queueNum = iprot.readI32();
      struct.setQueueNumIsSet(true);
      struct.expectedDelay = iprot.readI64();
      struct.setExpectedDelayIsSet(true);
      {
        org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.preferredProgramTypeList = new ArrayList<Integer>(_list18.size);
        for (int _i19 = 0; _i19 < _list18.size; ++_i19)
        {
          int _elem20; // required
          _elem20 = iprot.readI32();
          struct.preferredProgramTypeList.add(_elem20);
        }
      }
      struct.setPreferredProgramTypeListIsSet(true);
      {
        org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
        struct.preferredProgramIdList = new ArrayList<Long>(_list21.size);
        for (int _i22 = 0; _i22 < _list21.size; ++_i22)
        {
          long _elem23; // required
          _elem23 = iprot.readI64();
          struct.preferredProgramIdList.add(_elem23);
        }
      }
      struct.setPreferredProgramIdListIsSet(true);
    }
  }

}

