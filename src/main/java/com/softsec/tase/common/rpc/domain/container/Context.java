/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.softsec.tase.common.rpc.domain.container;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * container context info
 */
public class Context implements org.apache.thrift.TBase<Context, Context._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Context");

  private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("priority", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField JOB_PHASE_FIELD_DESC = new org.apache.thrift.protocol.TField("jobPhase", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField JOB_EXECUTION_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("jobExecutionMode", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField JOB_RETURN_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("jobReturnMode", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField TIMEOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("timeout", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField PROGRAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("programId", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField BUNDLE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("bundleType", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField PROGRAM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("programName", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField SCRIPT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("scriptName", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField SCRIPT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("scriptPath", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField SCRIPT_MD5_FIELD_DESC = new org.apache.thrift.protocol.TField("scriptMd5", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField EXECUTABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("executableName", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField EXECUTABLE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("executablePath", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField EXECUTABLE_MD5_FIELD_DESC = new org.apache.thrift.protocol.TField("executableMd5", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField ENV_VARIABLES_FIELD_DESC = new org.apache.thrift.protocol.TField("envVariables", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField PARAMETER_FIELD_DESC = new org.apache.thrift.protocol.TField("parameter", org.apache.thrift.protocol.TType.STRUCT, (short)17);
  private static final org.apache.thrift.protocol.TField RESULT_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("resultAddress", org.apache.thrift.protocol.TType.STRING, (short)18);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ContextStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ContextTupleSchemeFactory());
  }

  public long taskId; // required
  /**
   * 
   * @see com.softsec.tase.common.rpc.domain.job.JobPriority
   */
  public com.softsec.tase.common.rpc.domain.job.JobPriority priority; // required
  /**
   * 
   * @see com.softsec.tase.common.rpc.domain.job.JobPhase
   */
  public com.softsec.tase.common.rpc.domain.job.JobPhase jobPhase; // required
  /**
   * 
   * @see com.softsec.tase.common.rpc.domain.job.JobExecutionMode
   */
  public com.softsec.tase.common.rpc.domain.job.JobExecutionMode jobExecutionMode; // required
  /**
   * 
   * @see com.softsec.tase.common.rpc.domain.job.JobReturnMode
   */
  public com.softsec.tase.common.rpc.domain.job.JobReturnMode jobReturnMode; // optional
  public long timeout; // optional
  public long programId; // required
  /**
   * 
   * @see BundleType
   */
  public BundleType bundleType; // required
  public String programName; // required
  public String scriptName; // required
  public String scriptPath; // required
  public String scriptMd5; // required
  public String executableName; // required
  public String executablePath; // required
  public String executableMd5; // required
  public String envVariables; // optional
  public com.softsec.tase.common.rpc.domain.job.JobParameter parameter; // optional
  public String resultAddress; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TASK_ID((short)1, "taskId"),
    /**
     * 
     * @see com.softsec.tase.common.rpc.domain.job.JobPriority
     */
    PRIORITY((short)2, "priority"),
    /**
     * 
     * @see com.softsec.tase.common.rpc.domain.job.JobPhase
     */
    JOB_PHASE((short)3, "jobPhase"),
    /**
     * 
     * @see com.softsec.tase.common.rpc.domain.job.JobExecutionMode
     */
    JOB_EXECUTION_MODE((short)4, "jobExecutionMode"),
    /**
     * 
     * @see com.softsec.tase.common.rpc.domain.job.JobReturnMode
     */
    JOB_RETURN_MODE((short)5, "jobReturnMode"),
    TIMEOUT((short)6, "timeout"),
    PROGRAM_ID((short)7, "programId"),
    /**
     * 
     * @see BundleType
     */
    BUNDLE_TYPE((short)8, "bundleType"),
    PROGRAM_NAME((short)9, "programName"),
    SCRIPT_NAME((short)10, "scriptName"),
    SCRIPT_PATH((short)11, "scriptPath"),
    SCRIPT_MD5((short)12, "scriptMd5"),
    EXECUTABLE_NAME((short)13, "executableName"),
    EXECUTABLE_PATH((short)14, "executablePath"),
    EXECUTABLE_MD5((short)15, "executableMd5"),
    ENV_VARIABLES((short)16, "envVariables"),
    PARAMETER((short)17, "parameter"),
    RESULT_ADDRESS((short)18, "resultAddress");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TASK_ID
          return TASK_ID;
        case 2: // PRIORITY
          return PRIORITY;
        case 3: // JOB_PHASE
          return JOB_PHASE;
        case 4: // JOB_EXECUTION_MODE
          return JOB_EXECUTION_MODE;
        case 5: // JOB_RETURN_MODE
          return JOB_RETURN_MODE;
        case 6: // TIMEOUT
          return TIMEOUT;
        case 7: // PROGRAM_ID
          return PROGRAM_ID;
        case 8: // BUNDLE_TYPE
          return BUNDLE_TYPE;
        case 9: // PROGRAM_NAME
          return PROGRAM_NAME;
        case 10: // SCRIPT_NAME
          return SCRIPT_NAME;
        case 11: // SCRIPT_PATH
          return SCRIPT_PATH;
        case 12: // SCRIPT_MD5
          return SCRIPT_MD5;
        case 13: // EXECUTABLE_NAME
          return EXECUTABLE_NAME;
        case 14: // EXECUTABLE_PATH
          return EXECUTABLE_PATH;
        case 15: // EXECUTABLE_MD5
          return EXECUTABLE_MD5;
        case 16: // ENV_VARIABLES
          return ENV_VARIABLES;
        case 17: // PARAMETER
          return PARAMETER;
        case 18: // RESULT_ADDRESS
          return RESULT_ADDRESS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TASKID_ISSET_ID = 0;
  private static final int __TIMEOUT_ISSET_ID = 1;
  private static final int __PROGRAMID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.JOB_RETURN_MODE,_Fields.TIMEOUT,_Fields.ENV_VARIABLES,_Fields.PARAMETER,_Fields.RESULT_ADDRESS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("priority", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.softsec.tase.common.rpc.domain.job.JobPriority.class)));
    tmpMap.put(_Fields.JOB_PHASE, new org.apache.thrift.meta_data.FieldMetaData("jobPhase", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.softsec.tase.common.rpc.domain.job.JobPhase.class)));
    tmpMap.put(_Fields.JOB_EXECUTION_MODE, new org.apache.thrift.meta_data.FieldMetaData("jobExecutionMode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.softsec.tase.common.rpc.domain.job.JobExecutionMode.class)));
    tmpMap.put(_Fields.JOB_RETURN_MODE, new org.apache.thrift.meta_data.FieldMetaData("jobReturnMode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.softsec.tase.common.rpc.domain.job.JobReturnMode.class)));
    tmpMap.put(_Fields.TIMEOUT, new org.apache.thrift.meta_data.FieldMetaData("timeout", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PROGRAM_ID, new org.apache.thrift.meta_data.FieldMetaData("programId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BUNDLE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("bundleType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, BundleType.class)));
    tmpMap.put(_Fields.PROGRAM_NAME, new org.apache.thrift.meta_data.FieldMetaData("programName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCRIPT_NAME, new org.apache.thrift.meta_data.FieldMetaData("scriptName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCRIPT_PATH, new org.apache.thrift.meta_data.FieldMetaData("scriptPath", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCRIPT_MD5, new org.apache.thrift.meta_data.FieldMetaData("scriptMd5", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXECUTABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("executableName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXECUTABLE_PATH, new org.apache.thrift.meta_data.FieldMetaData("executablePath", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXECUTABLE_MD5, new org.apache.thrift.meta_data.FieldMetaData("executableMd5", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENV_VARIABLES, new org.apache.thrift.meta_data.FieldMetaData("envVariables", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARAMETER, new org.apache.thrift.meta_data.FieldMetaData("parameter", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.softsec.tase.common.rpc.domain.job.JobParameter.class)));
    tmpMap.put(_Fields.RESULT_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("resultAddress", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Context.class, metaDataMap);
  }

  public Context() {
  }

  public Context(
    long taskId,
    com.softsec.tase.common.rpc.domain.job.JobPriority priority,
    com.softsec.tase.common.rpc.domain.job.JobPhase jobPhase,
    com.softsec.tase.common.rpc.domain.job.JobExecutionMode jobExecutionMode,
    long programId,
    BundleType bundleType,
    String programName,
    String scriptName,
    String scriptPath,
    String scriptMd5,
    String executableName,
    String executablePath,
    String executableMd5)
  {
    this();
    this.taskId = taskId;
    setTaskIdIsSet(true);
    this.priority = priority;
    this.jobPhase = jobPhase;
    this.jobExecutionMode = jobExecutionMode;
    this.programId = programId;
    setProgramIdIsSet(true);
    this.bundleType = bundleType;
    this.programName = programName;
    this.scriptName = scriptName;
    this.scriptPath = scriptPath;
    this.scriptMd5 = scriptMd5;
    this.executableName = executableName;
    this.executablePath = executablePath;
    this.executableMd5 = executableMd5;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Context(Context other) {
    __isset_bitfield = other.__isset_bitfield;
    this.taskId = other.taskId;
    if (other.isSetPriority()) {
      this.priority = other.priority;
    }
    if (other.isSetJobPhase()) {
      this.jobPhase = other.jobPhase;
    }
    if (other.isSetJobExecutionMode()) {
      this.jobExecutionMode = other.jobExecutionMode;
    }
    if (other.isSetJobReturnMode()) {
      this.jobReturnMode = other.jobReturnMode;
    }
    this.timeout = other.timeout;
    this.programId = other.programId;
    if (other.isSetBundleType()) {
      this.bundleType = other.bundleType;
    }
    if (other.isSetProgramName()) {
      this.programName = other.programName;
    }
    if (other.isSetScriptName()) {
      this.scriptName = other.scriptName;
    }
    if (other.isSetScriptPath()) {
      this.scriptPath = other.scriptPath;
    }
    if (other.isSetScriptMd5()) {
      this.scriptMd5 = other.scriptMd5;
    }
    if (other.isSetExecutableName()) {
      this.executableName = other.executableName;
    }
    if (other.isSetExecutablePath()) {
      this.executablePath = other.executablePath;
    }
    if (other.isSetExecutableMd5()) {
      this.executableMd5 = other.executableMd5;
    }
    if (other.isSetEnvVariables()) {
      this.envVariables = other.envVariables;
    }
    if (other.isSetParameter()) {
      this.parameter = new com.softsec.tase.common.rpc.domain.job.JobParameter(other.parameter);
    }
    if (other.isSetResultAddress()) {
      this.resultAddress = other.resultAddress;
    }
  }

  public Context deepCopy() {
    return new Context(this);
  }

  @Override
  public void clear() {
    setTaskIdIsSet(false);
    this.taskId = 0;
    this.priority = null;
    this.jobPhase = null;
    this.jobExecutionMode = null;
    this.jobReturnMode = null;
    setTimeoutIsSet(false);
    this.timeout = 0;
    setProgramIdIsSet(false);
    this.programId = 0;
    this.bundleType = null;
    this.programName = null;
    this.scriptName = null;
    this.scriptPath = null;
    this.scriptMd5 = null;
    this.executableName = null;
    this.executablePath = null;
    this.executableMd5 = null;
    this.envVariables = null;
    this.parameter = null;
    this.resultAddress = null;
  }

  public long getTaskId() {
    return this.taskId;
  }

  public Context setTaskId(long taskId) {
    this.taskId = taskId;
    setTaskIdIsSet(true);
    return this;
  }

  public void unsetTaskId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TASKID_ISSET_ID);
  }

  /** Returns true if field taskId is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskId() {
    return EncodingUtils.testBit(__isset_bitfield, __TASKID_ISSET_ID);
  }

  public void setTaskIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TASKID_ISSET_ID, value);
  }

  /**
   * 
   * @see com.softsec.tase.common.rpc.domain.job.JobPriority
   */
  public com.softsec.tase.common.rpc.domain.job.JobPriority getPriority() {
    return this.priority;
  }

  /**
   * 
   * @see com.softsec.tase.common.rpc.domain.job.JobPriority
   */
  public Context setPriority(com.softsec.tase.common.rpc.domain.job.JobPriority priority) {
    this.priority = priority;
    return this;
  }

  public void unsetPriority() {
    this.priority = null;
  }

  /** Returns true if field priority is set (has been assigned a value) and false otherwise */
  public boolean isSetPriority() {
    return this.priority != null;
  }

  public void setPriorityIsSet(boolean value) {
    if (!value) {
      this.priority = null;
    }
  }

  /**
   * 
   * @see com.softsec.tase.common.rpc.domain.job.JobPhase
   */
  public com.softsec.tase.common.rpc.domain.job.JobPhase getJobPhase() {
    return this.jobPhase;
  }

  /**
   * 
   * @see com.softsec.tase.common.rpc.domain.job.JobPhase
   */
  public Context setJobPhase(com.softsec.tase.common.rpc.domain.job.JobPhase jobPhase) {
    this.jobPhase = jobPhase;
    return this;
  }

  public void unsetJobPhase() {
    this.jobPhase = null;
  }

  /** Returns true if field jobPhase is set (has been assigned a value) and false otherwise */
  public boolean isSetJobPhase() {
    return this.jobPhase != null;
  }

  public void setJobPhaseIsSet(boolean value) {
    if (!value) {
      this.jobPhase = null;
    }
  }

  /**
   * 
   * @see com.softsec.tase.common.rpc.domain.job.JobExecutionMode
   */
  public com.softsec.tase.common.rpc.domain.job.JobExecutionMode getJobExecutionMode() {
    return this.jobExecutionMode;
  }

  /**
   * 
   * @see com.softsec.tase.common.rpc.domain.job.JobExecutionMode
   */
  public Context setJobExecutionMode(com.softsec.tase.common.rpc.domain.job.JobExecutionMode jobExecutionMode) {
    this.jobExecutionMode = jobExecutionMode;
    return this;
  }

  public void unsetJobExecutionMode() {
    this.jobExecutionMode = null;
  }

  /** Returns true if field jobExecutionMode is set (has been assigned a value) and false otherwise */
  public boolean isSetJobExecutionMode() {
    return this.jobExecutionMode != null;
  }

  public void setJobExecutionModeIsSet(boolean value) {
    if (!value) {
      this.jobExecutionMode = null;
    }
  }

  /**
   * 
   * @see com.softsec.tase.common.rpc.domain.job.JobReturnMode
   */
  public com.softsec.tase.common.rpc.domain.job.JobReturnMode getJobReturnMode() {
    return this.jobReturnMode;
  }

  /**
   * 
   * @see com.softsec.tase.common.rpc.domain.job.JobReturnMode
   */
  public Context setJobReturnMode(com.softsec.tase.common.rpc.domain.job.JobReturnMode jobReturnMode) {
    this.jobReturnMode = jobReturnMode;
    return this;
  }

  public void unsetJobReturnMode() {
    this.jobReturnMode = null;
  }

  /** Returns true if field jobReturnMode is set (has been assigned a value) and false otherwise */
  public boolean isSetJobReturnMode() {
    return this.jobReturnMode != null;
  }

  public void setJobReturnModeIsSet(boolean value) {
    if (!value) {
      this.jobReturnMode = null;
    }
  }

  public long getTimeout() {
    return this.timeout;
  }

  public Context setTimeout(long timeout) {
    this.timeout = timeout;
    setTimeoutIsSet(true);
    return this;
  }

  public void unsetTimeout() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMEOUT_ISSET_ID);
  }

  /** Returns true if field timeout is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeout() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMEOUT_ISSET_ID);
  }

  public void setTimeoutIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMEOUT_ISSET_ID, value);
  }

  public long getProgramId() {
    return this.programId;
  }

  public Context setProgramId(long programId) {
    this.programId = programId;
    setProgramIdIsSet(true);
    return this;
  }

  public void unsetProgramId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROGRAMID_ISSET_ID);
  }

  /** Returns true if field programId is set (has been assigned a value) and false otherwise */
  public boolean isSetProgramId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROGRAMID_ISSET_ID);
  }

  public void setProgramIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROGRAMID_ISSET_ID, value);
  }

  /**
   * 
   * @see BundleType
   */
  public BundleType getBundleType() {
    return this.bundleType;
  }

  /**
   * 
   * @see BundleType
   */
  public Context setBundleType(BundleType bundleType) {
    this.bundleType = bundleType;
    return this;
  }

  public void unsetBundleType() {
    this.bundleType = null;
  }

  /** Returns true if field bundleType is set (has been assigned a value) and false otherwise */
  public boolean isSetBundleType() {
    return this.bundleType != null;
  }

  public void setBundleTypeIsSet(boolean value) {
    if (!value) {
      this.bundleType = null;
    }
  }

  public String getProgramName() {
    return this.programName;
  }

  public Context setProgramName(String programName) {
    this.programName = programName;
    return this;
  }

  public void unsetProgramName() {
    this.programName = null;
  }

  /** Returns true if field programName is set (has been assigned a value) and false otherwise */
  public boolean isSetProgramName() {
    return this.programName != null;
  }

  public void setProgramNameIsSet(boolean value) {
    if (!value) {
      this.programName = null;
    }
  }

  public String getScriptName() {
    return this.scriptName;
  }

  public Context setScriptName(String scriptName) {
    this.scriptName = scriptName;
    return this;
  }

  public void unsetScriptName() {
    this.scriptName = null;
  }

  /** Returns true if field scriptName is set (has been assigned a value) and false otherwise */
  public boolean isSetScriptName() {
    return this.scriptName != null;
  }

  public void setScriptNameIsSet(boolean value) {
    if (!value) {
      this.scriptName = null;
    }
  }

  public String getScriptPath() {
    return this.scriptPath;
  }

  public Context setScriptPath(String scriptPath) {
    this.scriptPath = scriptPath;
    return this;
  }

  public void unsetScriptPath() {
    this.scriptPath = null;
  }

  /** Returns true if field scriptPath is set (has been assigned a value) and false otherwise */
  public boolean isSetScriptPath() {
    return this.scriptPath != null;
  }

  public void setScriptPathIsSet(boolean value) {
    if (!value) {
      this.scriptPath = null;
    }
  }

  public String getScriptMd5() {
    return this.scriptMd5;
  }

  public Context setScriptMd5(String scriptMd5) {
    this.scriptMd5 = scriptMd5;
    return this;
  }

  public void unsetScriptMd5() {
    this.scriptMd5 = null;
  }

  /** Returns true if field scriptMd5 is set (has been assigned a value) and false otherwise */
  public boolean isSetScriptMd5() {
    return this.scriptMd5 != null;
  }

  public void setScriptMd5IsSet(boolean value) {
    if (!value) {
      this.scriptMd5 = null;
    }
  }

  public String getExecutableName() {
    return this.executableName;
  }

  public Context setExecutableName(String executableName) {
    this.executableName = executableName;
    return this;
  }

  public void unsetExecutableName() {
    this.executableName = null;
  }

  /** Returns true if field executableName is set (has been assigned a value) and false otherwise */
  public boolean isSetExecutableName() {
    return this.executableName != null;
  }

  public void setExecutableNameIsSet(boolean value) {
    if (!value) {
      this.executableName = null;
    }
  }

  public String getExecutablePath() {
    return this.executablePath;
  }

  public Context setExecutablePath(String executablePath) {
    this.executablePath = executablePath;
    return this;
  }

  public void unsetExecutablePath() {
    this.executablePath = null;
  }

  /** Returns true if field executablePath is set (has been assigned a value) and false otherwise */
  public boolean isSetExecutablePath() {
    return this.executablePath != null;
  }

  public void setExecutablePathIsSet(boolean value) {
    if (!value) {
      this.executablePath = null;
    }
  }

  public String getExecutableMd5() {
    return this.executableMd5;
  }

  public Context setExecutableMd5(String executableMd5) {
    this.executableMd5 = executableMd5;
    return this;
  }

  public void unsetExecutableMd5() {
    this.executableMd5 = null;
  }

  /** Returns true if field executableMd5 is set (has been assigned a value) and false otherwise */
  public boolean isSetExecutableMd5() {
    return this.executableMd5 != null;
  }

  public void setExecutableMd5IsSet(boolean value) {
    if (!value) {
      this.executableMd5 = null;
    }
  }

  public String getEnvVariables() {
    return this.envVariables;
  }

  public Context setEnvVariables(String envVariables) {
    this.envVariables = envVariables;
    return this;
  }

  public void unsetEnvVariables() {
    this.envVariables = null;
  }

  /** Returns true if field envVariables is set (has been assigned a value) and false otherwise */
  public boolean isSetEnvVariables() {
    return this.envVariables != null;
  }

  public void setEnvVariablesIsSet(boolean value) {
    if (!value) {
      this.envVariables = null;
    }
  }

  public com.softsec.tase.common.rpc.domain.job.JobParameter getParameter() {
    return this.parameter;
  }

  public Context setParameter(com.softsec.tase.common.rpc.domain.job.JobParameter parameter) {
    this.parameter = parameter;
    return this;
  }

  public void unsetParameter() {
    this.parameter = null;
  }

  /** Returns true if field parameter is set (has been assigned a value) and false otherwise */
  public boolean isSetParameter() {
    return this.parameter != null;
  }

  public void setParameterIsSet(boolean value) {
    if (!value) {
      this.parameter = null;
    }
  }

  public String getResultAddress() {
    return this.resultAddress;
  }

  public Context setResultAddress(String resultAddress) {
    this.resultAddress = resultAddress;
    return this;
  }

  public void unsetResultAddress() {
    this.resultAddress = null;
  }

  /** Returns true if field resultAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetResultAddress() {
    return this.resultAddress != null;
  }

  public void setResultAddressIsSet(boolean value) {
    if (!value) {
      this.resultAddress = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TASK_ID:
      if (value == null) {
        unsetTaskId();
      } else {
        setTaskId((Long)value);
      }
      break;

    case PRIORITY:
      if (value == null) {
        unsetPriority();
      } else {
        setPriority((com.softsec.tase.common.rpc.domain.job.JobPriority)value);
      }
      break;

    case JOB_PHASE:
      if (value == null) {
        unsetJobPhase();
      } else {
        setJobPhase((com.softsec.tase.common.rpc.domain.job.JobPhase)value);
      }
      break;

    case JOB_EXECUTION_MODE:
      if (value == null) {
        unsetJobExecutionMode();
      } else {
        setJobExecutionMode((com.softsec.tase.common.rpc.domain.job.JobExecutionMode)value);
      }
      break;

    case JOB_RETURN_MODE:
      if (value == null) {
        unsetJobReturnMode();
      } else {
        setJobReturnMode((com.softsec.tase.common.rpc.domain.job.JobReturnMode)value);
      }
      break;

    case TIMEOUT:
      if (value == null) {
        unsetTimeout();
      } else {
        setTimeout((Long)value);
      }
      break;

    case PROGRAM_ID:
      if (value == null) {
        unsetProgramId();
      } else {
        setProgramId((Long)value);
      }
      break;

    case BUNDLE_TYPE:
      if (value == null) {
        unsetBundleType();
      } else {
        setBundleType((BundleType)value);
      }
      break;

    case PROGRAM_NAME:
      if (value == null) {
        unsetProgramName();
      } else {
        setProgramName((String)value);
      }
      break;

    case SCRIPT_NAME:
      if (value == null) {
        unsetScriptName();
      } else {
        setScriptName((String)value);
      }
      break;

    case SCRIPT_PATH:
      if (value == null) {
        unsetScriptPath();
      } else {
        setScriptPath((String)value);
      }
      break;

    case SCRIPT_MD5:
      if (value == null) {
        unsetScriptMd5();
      } else {
        setScriptMd5((String)value);
      }
      break;

    case EXECUTABLE_NAME:
      if (value == null) {
        unsetExecutableName();
      } else {
        setExecutableName((String)value);
      }
      break;

    case EXECUTABLE_PATH:
      if (value == null) {
        unsetExecutablePath();
      } else {
        setExecutablePath((String)value);
      }
      break;

    case EXECUTABLE_MD5:
      if (value == null) {
        unsetExecutableMd5();
      } else {
        setExecutableMd5((String)value);
      }
      break;

    case ENV_VARIABLES:
      if (value == null) {
        unsetEnvVariables();
      } else {
        setEnvVariables((String)value);
      }
      break;

    case PARAMETER:
      if (value == null) {
        unsetParameter();
      } else {
        setParameter((com.softsec.tase.common.rpc.domain.job.JobParameter)value);
      }
      break;

    case RESULT_ADDRESS:
      if (value == null) {
        unsetResultAddress();
      } else {
        setResultAddress((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TASK_ID:
      return Long.valueOf(getTaskId());

    case PRIORITY:
      return getPriority();

    case JOB_PHASE:
      return getJobPhase();

    case JOB_EXECUTION_MODE:
      return getJobExecutionMode();

    case JOB_RETURN_MODE:
      return getJobReturnMode();

    case TIMEOUT:
      return Long.valueOf(getTimeout());

    case PROGRAM_ID:
      return Long.valueOf(getProgramId());

    case BUNDLE_TYPE:
      return getBundleType();

    case PROGRAM_NAME:
      return getProgramName();

    case SCRIPT_NAME:
      return getScriptName();

    case SCRIPT_PATH:
      return getScriptPath();

    case SCRIPT_MD5:
      return getScriptMd5();

    case EXECUTABLE_NAME:
      return getExecutableName();

    case EXECUTABLE_PATH:
      return getExecutablePath();

    case EXECUTABLE_MD5:
      return getExecutableMd5();

    case ENV_VARIABLES:
      return getEnvVariables();

    case PARAMETER:
      return getParameter();

    case RESULT_ADDRESS:
      return getResultAddress();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TASK_ID:
      return isSetTaskId();
    case PRIORITY:
      return isSetPriority();
    case JOB_PHASE:
      return isSetJobPhase();
    case JOB_EXECUTION_MODE:
      return isSetJobExecutionMode();
    case JOB_RETURN_MODE:
      return isSetJobReturnMode();
    case TIMEOUT:
      return isSetTimeout();
    case PROGRAM_ID:
      return isSetProgramId();
    case BUNDLE_TYPE:
      return isSetBundleType();
    case PROGRAM_NAME:
      return isSetProgramName();
    case SCRIPT_NAME:
      return isSetScriptName();
    case SCRIPT_PATH:
      return isSetScriptPath();
    case SCRIPT_MD5:
      return isSetScriptMd5();
    case EXECUTABLE_NAME:
      return isSetExecutableName();
    case EXECUTABLE_PATH:
      return isSetExecutablePath();
    case EXECUTABLE_MD5:
      return isSetExecutableMd5();
    case ENV_VARIABLES:
      return isSetEnvVariables();
    case PARAMETER:
      return isSetParameter();
    case RESULT_ADDRESS:
      return isSetResultAddress();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Context)
      return this.equals((Context)that);
    return false;
  }

  public boolean equals(Context that) {
    if (that == null)
      return false;

    boolean this_present_taskId = true;
    boolean that_present_taskId = true;
    if (this_present_taskId || that_present_taskId) {
      if (!(this_present_taskId && that_present_taskId))
        return false;
      if (this.taskId != that.taskId)
        return false;
    }

    boolean this_present_priority = true && this.isSetPriority();
    boolean that_present_priority = true && that.isSetPriority();
    if (this_present_priority || that_present_priority) {
      if (!(this_present_priority && that_present_priority))
        return false;
      if (!this.priority.equals(that.priority))
        return false;
    }

    boolean this_present_jobPhase = true && this.isSetJobPhase();
    boolean that_present_jobPhase = true && that.isSetJobPhase();
    if (this_present_jobPhase || that_present_jobPhase) {
      if (!(this_present_jobPhase && that_present_jobPhase))
        return false;
      if (!this.jobPhase.equals(that.jobPhase))
        return false;
    }

    boolean this_present_jobExecutionMode = true && this.isSetJobExecutionMode();
    boolean that_present_jobExecutionMode = true && that.isSetJobExecutionMode();
    if (this_present_jobExecutionMode || that_present_jobExecutionMode) {
      if (!(this_present_jobExecutionMode && that_present_jobExecutionMode))
        return false;
      if (!this.jobExecutionMode.equals(that.jobExecutionMode))
        return false;
    }

    boolean this_present_jobReturnMode = true && this.isSetJobReturnMode();
    boolean that_present_jobReturnMode = true && that.isSetJobReturnMode();
    if (this_present_jobReturnMode || that_present_jobReturnMode) {
      if (!(this_present_jobReturnMode && that_present_jobReturnMode))
        return false;
      if (!this.jobReturnMode.equals(that.jobReturnMode))
        return false;
    }

    boolean this_present_timeout = true && this.isSetTimeout();
    boolean that_present_timeout = true && that.isSetTimeout();
    if (this_present_timeout || that_present_timeout) {
      if (!(this_present_timeout && that_present_timeout))
        return false;
      if (this.timeout != that.timeout)
        return false;
    }

    boolean this_present_programId = true;
    boolean that_present_programId = true;
    if (this_present_programId || that_present_programId) {
      if (!(this_present_programId && that_present_programId))
        return false;
      if (this.programId != that.programId)
        return false;
    }

    boolean this_present_bundleType = true && this.isSetBundleType();
    boolean that_present_bundleType = true && that.isSetBundleType();
    if (this_present_bundleType || that_present_bundleType) {
      if (!(this_present_bundleType && that_present_bundleType))
        return false;
      if (!this.bundleType.equals(that.bundleType))
        return false;
    }

    boolean this_present_programName = true && this.isSetProgramName();
    boolean that_present_programName = true && that.isSetProgramName();
    if (this_present_programName || that_present_programName) {
      if (!(this_present_programName && that_present_programName))
        return false;
      if (!this.programName.equals(that.programName))
        return false;
    }

    boolean this_present_scriptName = true && this.isSetScriptName();
    boolean that_present_scriptName = true && that.isSetScriptName();
    if (this_present_scriptName || that_present_scriptName) {
      if (!(this_present_scriptName && that_present_scriptName))
        return false;
      if (!this.scriptName.equals(that.scriptName))
        return false;
    }

    boolean this_present_scriptPath = true && this.isSetScriptPath();
    boolean that_present_scriptPath = true && that.isSetScriptPath();
    if (this_present_scriptPath || that_present_scriptPath) {
      if (!(this_present_scriptPath && that_present_scriptPath))
        return false;
      if (!this.scriptPath.equals(that.scriptPath))
        return false;
    }

    boolean this_present_scriptMd5 = true && this.isSetScriptMd5();
    boolean that_present_scriptMd5 = true && that.isSetScriptMd5();
    if (this_present_scriptMd5 || that_present_scriptMd5) {
      if (!(this_present_scriptMd5 && that_present_scriptMd5))
        return false;
      if (!this.scriptMd5.equals(that.scriptMd5))
        return false;
    }

    boolean this_present_executableName = true && this.isSetExecutableName();
    boolean that_present_executableName = true && that.isSetExecutableName();
    if (this_present_executableName || that_present_executableName) {
      if (!(this_present_executableName && that_present_executableName))
        return false;
      if (!this.executableName.equals(that.executableName))
        return false;
    }

    boolean this_present_executablePath = true && this.isSetExecutablePath();
    boolean that_present_executablePath = true && that.isSetExecutablePath();
    if (this_present_executablePath || that_present_executablePath) {
      if (!(this_present_executablePath && that_present_executablePath))
        return false;
      if (!this.executablePath.equals(that.executablePath))
        return false;
    }

    boolean this_present_executableMd5 = true && this.isSetExecutableMd5();
    boolean that_present_executableMd5 = true && that.isSetExecutableMd5();
    if (this_present_executableMd5 || that_present_executableMd5) {
      if (!(this_present_executableMd5 && that_present_executableMd5))
        return false;
      if (!this.executableMd5.equals(that.executableMd5))
        return false;
    }

    boolean this_present_envVariables = true && this.isSetEnvVariables();
    boolean that_present_envVariables = true && that.isSetEnvVariables();
    if (this_present_envVariables || that_present_envVariables) {
      if (!(this_present_envVariables && that_present_envVariables))
        return false;
      if (!this.envVariables.equals(that.envVariables))
        return false;
    }

    boolean this_present_parameter = true && this.isSetParameter();
    boolean that_present_parameter = true && that.isSetParameter();
    if (this_present_parameter || that_present_parameter) {
      if (!(this_present_parameter && that_present_parameter))
        return false;
      if (!this.parameter.equals(that.parameter))
        return false;
    }

    boolean this_present_resultAddress = true && this.isSetResultAddress();
    boolean that_present_resultAddress = true && that.isSetResultAddress();
    if (this_present_resultAddress || that_present_resultAddress) {
      if (!(this_present_resultAddress && that_present_resultAddress))
        return false;
      if (!this.resultAddress.equals(that.resultAddress))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Context other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Context typedOther = (Context)other;

    lastComparison = Boolean.valueOf(isSetTaskId()).compareTo(typedOther.isSetTaskId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, typedOther.taskId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriority()).compareTo(typedOther.isSetPriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priority, typedOther.priority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobPhase()).compareTo(typedOther.isSetJobPhase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobPhase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobPhase, typedOther.jobPhase);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobExecutionMode()).compareTo(typedOther.isSetJobExecutionMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobExecutionMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobExecutionMode, typedOther.jobExecutionMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobReturnMode()).compareTo(typedOther.isSetJobReturnMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobReturnMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobReturnMode, typedOther.jobReturnMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeout()).compareTo(typedOther.isSetTimeout());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeout()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeout, typedOther.timeout);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProgramId()).compareTo(typedOther.isSetProgramId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProgramId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.programId, typedOther.programId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBundleType()).compareTo(typedOther.isSetBundleType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBundleType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bundleType, typedOther.bundleType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProgramName()).compareTo(typedOther.isSetProgramName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProgramName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.programName, typedOther.programName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScriptName()).compareTo(typedOther.isSetScriptName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScriptName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scriptName, typedOther.scriptName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScriptPath()).compareTo(typedOther.isSetScriptPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScriptPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scriptPath, typedOther.scriptPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScriptMd5()).compareTo(typedOther.isSetScriptMd5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScriptMd5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scriptMd5, typedOther.scriptMd5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecutableName()).compareTo(typedOther.isSetExecutableName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecutableName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executableName, typedOther.executableName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecutablePath()).compareTo(typedOther.isSetExecutablePath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecutablePath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executablePath, typedOther.executablePath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecutableMd5()).compareTo(typedOther.isSetExecutableMd5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecutableMd5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executableMd5, typedOther.executableMd5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnvVariables()).compareTo(typedOther.isSetEnvVariables());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnvVariables()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.envVariables, typedOther.envVariables);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParameter()).compareTo(typedOther.isSetParameter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParameter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parameter, typedOther.parameter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResultAddress()).compareTo(typedOther.isSetResultAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultAddress, typedOther.resultAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Context(");
    boolean first = true;

    sb.append("taskId:");
    sb.append(this.taskId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("priority:");
    if (this.priority == null) {
      sb.append("null");
    } else {
      sb.append(this.priority);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jobPhase:");
    if (this.jobPhase == null) {
      sb.append("null");
    } else {
      sb.append(this.jobPhase);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jobExecutionMode:");
    if (this.jobExecutionMode == null) {
      sb.append("null");
    } else {
      sb.append(this.jobExecutionMode);
    }
    first = false;
    if (isSetJobReturnMode()) {
      if (!first) sb.append(", ");
      sb.append("jobReturnMode:");
      if (this.jobReturnMode == null) {
        sb.append("null");
      } else {
        sb.append(this.jobReturnMode);
      }
      first = false;
    }
    if (isSetTimeout()) {
      if (!first) sb.append(", ");
      sb.append("timeout:");
      sb.append(this.timeout);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("programId:");
    sb.append(this.programId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bundleType:");
    if (this.bundleType == null) {
      sb.append("null");
    } else {
      sb.append(this.bundleType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("programName:");
    if (this.programName == null) {
      sb.append("null");
    } else {
      sb.append(this.programName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("scriptName:");
    if (this.scriptName == null) {
      sb.append("null");
    } else {
      sb.append(this.scriptName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("scriptPath:");
    if (this.scriptPath == null) {
      sb.append("null");
    } else {
      sb.append(this.scriptPath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("scriptMd5:");
    if (this.scriptMd5 == null) {
      sb.append("null");
    } else {
      sb.append(this.scriptMd5);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("executableName:");
    if (this.executableName == null) {
      sb.append("null");
    } else {
      sb.append(this.executableName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("executablePath:");
    if (this.executablePath == null) {
      sb.append("null");
    } else {
      sb.append(this.executablePath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("executableMd5:");
    if (this.executableMd5 == null) {
      sb.append("null");
    } else {
      sb.append(this.executableMd5);
    }
    first = false;
    if (isSetEnvVariables()) {
      if (!first) sb.append(", ");
      sb.append("envVariables:");
      if (this.envVariables == null) {
        sb.append("null");
      } else {
        sb.append(this.envVariables);
      }
      first = false;
    }
    if (isSetParameter()) {
      if (!first) sb.append(", ");
      sb.append("parameter:");
      if (this.parameter == null) {
        sb.append("null");
      } else {
        sb.append(this.parameter);
      }
      first = false;
    }
    if (isSetResultAddress()) {
      if (!first) sb.append(", ");
      sb.append("resultAddress:");
      if (this.resultAddress == null) {
        sb.append("null");
      } else {
        sb.append(this.resultAddress);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'taskId' because it's a primitive and you chose the non-beans generator.
    if (priority == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'priority' was not present! Struct: " + toString());
    }
    if (jobPhase == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'jobPhase' was not present! Struct: " + toString());
    }
    if (jobExecutionMode == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'jobExecutionMode' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'programId' because it's a primitive and you chose the non-beans generator.
    if (bundleType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'bundleType' was not present! Struct: " + toString());
    }
    if (programName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'programName' was not present! Struct: " + toString());
    }
    if (scriptName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'scriptName' was not present! Struct: " + toString());
    }
    if (scriptPath == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'scriptPath' was not present! Struct: " + toString());
    }
    if (scriptMd5 == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'scriptMd5' was not present! Struct: " + toString());
    }
    if (executableName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'executableName' was not present! Struct: " + toString());
    }
    if (executablePath == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'executablePath' was not present! Struct: " + toString());
    }
    if (executableMd5 == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'executableMd5' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (parameter != null) {
      parameter.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ContextStandardSchemeFactory implements SchemeFactory {
    public ContextStandardScheme getScheme() {
      return new ContextStandardScheme();
    }
  }

  private static class ContextStandardScheme extends StandardScheme<Context> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Context struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TASK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.taskId = iprot.readI64();
              struct.setTaskIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.priority = com.softsec.tase.common.rpc.domain.job.JobPriority.findByValue(iprot.readI32());
              struct.setPriorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // JOB_PHASE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.jobPhase = com.softsec.tase.common.rpc.domain.job.JobPhase.findByValue(iprot.readI32());
              struct.setJobPhaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // JOB_EXECUTION_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.jobExecutionMode = com.softsec.tase.common.rpc.domain.job.JobExecutionMode.findByValue(iprot.readI32());
              struct.setJobExecutionModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // JOB_RETURN_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.jobReturnMode = com.softsec.tase.common.rpc.domain.job.JobReturnMode.findByValue(iprot.readI32());
              struct.setJobReturnModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TIMEOUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timeout = iprot.readI64();
              struct.setTimeoutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PROGRAM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.programId = iprot.readI64();
              struct.setProgramIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BUNDLE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bundleType = BundleType.findByValue(iprot.readI32());
              struct.setBundleTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PROGRAM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.programName = iprot.readString();
              struct.setProgramNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SCRIPT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.scriptName = iprot.readString();
              struct.setScriptNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SCRIPT_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.scriptPath = iprot.readString();
              struct.setScriptPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SCRIPT_MD5
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.scriptMd5 = iprot.readString();
              struct.setScriptMd5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // EXECUTABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.executableName = iprot.readString();
              struct.setExecutableNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // EXECUTABLE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.executablePath = iprot.readString();
              struct.setExecutablePathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // EXECUTABLE_MD5
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.executableMd5 = iprot.readString();
              struct.setExecutableMd5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // ENV_VARIABLES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.envVariables = iprot.readString();
              struct.setEnvVariablesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // PARAMETER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.parameter = new com.softsec.tase.common.rpc.domain.job.JobParameter();
              struct.parameter.read(iprot);
              struct.setParameterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // RESULT_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resultAddress = iprot.readString();
              struct.setResultAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTaskId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'taskId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetProgramId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'programId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Context struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
      oprot.writeI64(struct.taskId);
      oprot.writeFieldEnd();
      if (struct.priority != null) {
        oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
        oprot.writeI32(struct.priority.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.jobPhase != null) {
        oprot.writeFieldBegin(JOB_PHASE_FIELD_DESC);
        oprot.writeI32(struct.jobPhase.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.jobExecutionMode != null) {
        oprot.writeFieldBegin(JOB_EXECUTION_MODE_FIELD_DESC);
        oprot.writeI32(struct.jobExecutionMode.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.jobReturnMode != null) {
        if (struct.isSetJobReturnMode()) {
          oprot.writeFieldBegin(JOB_RETURN_MODE_FIELD_DESC);
          oprot.writeI32(struct.jobReturnMode.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTimeout()) {
        oprot.writeFieldBegin(TIMEOUT_FIELD_DESC);
        oprot.writeI64(struct.timeout);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PROGRAM_ID_FIELD_DESC);
      oprot.writeI64(struct.programId);
      oprot.writeFieldEnd();
      if (struct.bundleType != null) {
        oprot.writeFieldBegin(BUNDLE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.bundleType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.programName != null) {
        oprot.writeFieldBegin(PROGRAM_NAME_FIELD_DESC);
        oprot.writeString(struct.programName);
        oprot.writeFieldEnd();
      }
      if (struct.scriptName != null) {
        oprot.writeFieldBegin(SCRIPT_NAME_FIELD_DESC);
        oprot.writeString(struct.scriptName);
        oprot.writeFieldEnd();
      }
      if (struct.scriptPath != null) {
        oprot.writeFieldBegin(SCRIPT_PATH_FIELD_DESC);
        oprot.writeString(struct.scriptPath);
        oprot.writeFieldEnd();
      }
      if (struct.scriptMd5 != null) {
        oprot.writeFieldBegin(SCRIPT_MD5_FIELD_DESC);
        oprot.writeString(struct.scriptMd5);
        oprot.writeFieldEnd();
      }
      if (struct.executableName != null) {
        oprot.writeFieldBegin(EXECUTABLE_NAME_FIELD_DESC);
        oprot.writeString(struct.executableName);
        oprot.writeFieldEnd();
      }
      if (struct.executablePath != null) {
        oprot.writeFieldBegin(EXECUTABLE_PATH_FIELD_DESC);
        oprot.writeString(struct.executablePath);
        oprot.writeFieldEnd();
      }
      if (struct.executableMd5 != null) {
        oprot.writeFieldBegin(EXECUTABLE_MD5_FIELD_DESC);
        oprot.writeString(struct.executableMd5);
        oprot.writeFieldEnd();
      }
      if (struct.envVariables != null) {
        if (struct.isSetEnvVariables()) {
          oprot.writeFieldBegin(ENV_VARIABLES_FIELD_DESC);
          oprot.writeString(struct.envVariables);
          oprot.writeFieldEnd();
        }
      }
      if (struct.parameter != null) {
        if (struct.isSetParameter()) {
          oprot.writeFieldBegin(PARAMETER_FIELD_DESC);
          struct.parameter.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.resultAddress != null) {
        if (struct.isSetResultAddress()) {
          oprot.writeFieldBegin(RESULT_ADDRESS_FIELD_DESC);
          oprot.writeString(struct.resultAddress);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ContextTupleSchemeFactory implements SchemeFactory {
    public ContextTupleScheme getScheme() {
      return new ContextTupleScheme();
    }
  }

  private static class ContextTupleScheme extends TupleScheme<Context> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Context struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.taskId);
      oprot.writeI32(struct.priority.getValue());
      oprot.writeI32(struct.jobPhase.getValue());
      oprot.writeI32(struct.jobExecutionMode.getValue());
      oprot.writeI64(struct.programId);
      oprot.writeI32(struct.bundleType.getValue());
      oprot.writeString(struct.programName);
      oprot.writeString(struct.scriptName);
      oprot.writeString(struct.scriptPath);
      oprot.writeString(struct.scriptMd5);
      oprot.writeString(struct.executableName);
      oprot.writeString(struct.executablePath);
      oprot.writeString(struct.executableMd5);
      BitSet optionals = new BitSet();
      if (struct.isSetJobReturnMode()) {
        optionals.set(0);
      }
      if (struct.isSetTimeout()) {
        optionals.set(1);
      }
      if (struct.isSetEnvVariables()) {
        optionals.set(2);
      }
      if (struct.isSetParameter()) {
        optionals.set(3);
      }
      if (struct.isSetResultAddress()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetJobReturnMode()) {
        oprot.writeI32(struct.jobReturnMode.getValue());
      }
      if (struct.isSetTimeout()) {
        oprot.writeI64(struct.timeout);
      }
      if (struct.isSetEnvVariables()) {
        oprot.writeString(struct.envVariables);
      }
      if (struct.isSetParameter()) {
        struct.parameter.write(oprot);
      }
      if (struct.isSetResultAddress()) {
        oprot.writeString(struct.resultAddress);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Context struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.taskId = iprot.readI64();
      struct.setTaskIdIsSet(true);
      struct.priority = com.softsec.tase.common.rpc.domain.job.JobPriority.findByValue(iprot.readI32());
      struct.setPriorityIsSet(true);
      struct.jobPhase = com.softsec.tase.common.rpc.domain.job.JobPhase.findByValue(iprot.readI32());
      struct.setJobPhaseIsSet(true);
      struct.jobExecutionMode = com.softsec.tase.common.rpc.domain.job.JobExecutionMode.findByValue(iprot.readI32());
      struct.setJobExecutionModeIsSet(true);
      struct.programId = iprot.readI64();
      struct.setProgramIdIsSet(true);
      struct.bundleType = BundleType.findByValue(iprot.readI32());
      struct.setBundleTypeIsSet(true);
      struct.programName = iprot.readString();
      struct.setProgramNameIsSet(true);
      struct.scriptName = iprot.readString();
      struct.setScriptNameIsSet(true);
      struct.scriptPath = iprot.readString();
      struct.setScriptPathIsSet(true);
      struct.scriptMd5 = iprot.readString();
      struct.setScriptMd5IsSet(true);
      struct.executableName = iprot.readString();
      struct.setExecutableNameIsSet(true);
      struct.executablePath = iprot.readString();
      struct.setExecutablePathIsSet(true);
      struct.executableMd5 = iprot.readString();
      struct.setExecutableMd5IsSet(true);
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.jobReturnMode = com.softsec.tase.common.rpc.domain.job.JobReturnMode.findByValue(iprot.readI32());
        struct.setJobReturnModeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.timeout = iprot.readI64();
        struct.setTimeoutIsSet(true);
      }
      if (incoming.get(2)) {
        struct.envVariables = iprot.readString();
        struct.setEnvVariablesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.parameter = new com.softsec.tase.common.rpc.domain.job.JobParameter();
        struct.parameter.read(iprot);
        struct.setParameterIsSet(true);
      }
      if (incoming.get(4)) {
        struct.resultAddress = iprot.readString();
        struct.setResultAddressIsSet(true);
      }
    }
  }

}

