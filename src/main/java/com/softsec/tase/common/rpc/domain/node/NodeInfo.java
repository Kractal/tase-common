/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.softsec.tase.common.rpc.domain.node;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * node info
 */
public class NodeInfo implements org.apache.thrift.TBase<NodeInfo, NodeInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NodeInfo");

  private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CPU_VENDOR_FIELD_DESC = new org.apache.thrift.protocol.TField("cpuVendor", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CPU_MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("cpuModel", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CPU_CORES_FIELD_DESC = new org.apache.thrift.protocol.TField("cpuCores", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField CPU_MHZ_FIELD_DESC = new org.apache.thrift.protocol.TField("cpuMhz", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField MEM_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("memSize", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField FS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fsName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField FS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("fsType", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField FS_FORMAT_FIELD_DESC = new org.apache.thrift.protocol.TField("fsFormat", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField FS_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("fsSize", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField OS_ARCH_FIELD_DESC = new org.apache.thrift.protocol.TField("osArch", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField OS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("osName", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField OS_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("osDesc", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField OS_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("osVersion", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField JVM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmName", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField JVM_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmVersion", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField JVM_MAX_MEM_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmMaxMem", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField NODE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeType", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField QUEUE_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("queueLimit", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField DOMAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("domain", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField MAC_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("macAddress", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField INTERNET_CONNECTIVITY_FIELD_DESC = new org.apache.thrift.protocol.TField("internetConnectivity", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField IP_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("ipAddress", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField RPC_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("rpcPort", org.apache.thrift.protocol.TType.I32, (short)24);
  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField PROC_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("procName", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField PROGRAM_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("programIdList", org.apache.thrift.protocol.TType.LIST, (short)29);
  private static final org.apache.thrift.protocol.TField CPU_PERC_FIELD_DESC = new org.apache.thrift.protocol.TField("cpuPerc", org.apache.thrift.protocol.TType.DOUBLE, (short)30);
  private static final org.apache.thrift.protocol.TField MEM_USED_FIELD_DESC = new org.apache.thrift.protocol.TField("memUsed", org.apache.thrift.protocol.TType.I32, (short)31);
  private static final org.apache.thrift.protocol.TField JVM_ALLOC_MEM_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmAllocMem", org.apache.thrift.protocol.TType.I32, (short)32);
  private static final org.apache.thrift.protocol.TField JVM_FREE_MEM_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmFreeMem", org.apache.thrift.protocol.TType.I32, (short)33);
  private static final org.apache.thrift.protocol.TField FS_AVAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("fsAvail", org.apache.thrift.protocol.TType.I32, (short)34);
  private static final org.apache.thrift.protocol.TField FS_USED_FIELD_DESC = new org.apache.thrift.protocol.TField("fsUsed", org.apache.thrift.protocol.TType.I32, (short)35);
  private static final org.apache.thrift.protocol.TField FS_USED_PERC_FIELD_DESC = new org.apache.thrift.protocol.TField("fsUsedPerc", org.apache.thrift.protocol.TType.DOUBLE, (short)36);
  private static final org.apache.thrift.protocol.TField QUEUE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("queueNum", org.apache.thrift.protocol.TType.I32, (short)37);
  private static final org.apache.thrift.protocol.TField CONFIG_UPDATED_FIELD_DESC = new org.apache.thrift.protocol.TField("configUpdated", org.apache.thrift.protocol.TType.I64, (short)38);
  private static final org.apache.thrift.protocol.TField PAYLOAD_UPDATED_FIELD_DESC = new org.apache.thrift.protocol.TField("payloadUpdated", org.apache.thrift.protocol.TType.I64, (short)39);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new NodeInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new NodeInfoTupleSchemeFactory());
  }

  public String nodeId; // required
  public String cpuVendor; // required
  public String cpuModel; // required
  public int cpuCores; // required
  public int cpuMhz; // required
  public int memSize; // required
  public String fsName; // required
  public String fsType; // required
  public String fsFormat; // required
  public int fsSize; // required
  public String osArch; // required
  public String osName; // required
  public String osDesc; // required
  public String osVersion; // required
  public String jvmName; // required
  public String jvmVersion; // required
  public int jvmMaxMem; // required
  /**
   * 
   * @see NodeType
   */
  public NodeType nodeType; // required
  public int queueLimit; // required
  public String domain; // required
  public String macAddress; // required
  public int internetConnectivity; // required
  public String ipAddress; // required
  public int rpcPort; // required
  public int pid; // required
  public String user; // required
  public String startTime; // required
  public String procName; // required
  public List<Long> programIdList; // required
  public double cpuPerc; // required
  public int memUsed; // required
  public int jvmAllocMem; // required
  public int jvmFreeMem; // required
  public int fsAvail; // required
  public int fsUsed; // required
  public double fsUsedPerc; // required
  public int queueNum; // required
  public long configUpdated; // required
  public long payloadUpdated; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NODE_ID((short)1, "nodeId"),
    CPU_VENDOR((short)2, "cpuVendor"),
    CPU_MODEL((short)3, "cpuModel"),
    CPU_CORES((short)4, "cpuCores"),
    CPU_MHZ((short)5, "cpuMhz"),
    MEM_SIZE((short)6, "memSize"),
    FS_NAME((short)7, "fsName"),
    FS_TYPE((short)8, "fsType"),
    FS_FORMAT((short)9, "fsFormat"),
    FS_SIZE((short)10, "fsSize"),
    OS_ARCH((short)11, "osArch"),
    OS_NAME((short)12, "osName"),
    OS_DESC((short)13, "osDesc"),
    OS_VERSION((short)14, "osVersion"),
    JVM_NAME((short)15, "jvmName"),
    JVM_VERSION((short)16, "jvmVersion"),
    JVM_MAX_MEM((short)17, "jvmMaxMem"),
    /**
     * 
     * @see NodeType
     */
    NODE_TYPE((short)18, "nodeType"),
    QUEUE_LIMIT((short)19, "queueLimit"),
    DOMAIN((short)20, "domain"),
    MAC_ADDRESS((short)21, "macAddress"),
    INTERNET_CONNECTIVITY((short)22, "internetConnectivity"),
    IP_ADDRESS((short)23, "ipAddress"),
    RPC_PORT((short)24, "rpcPort"),
    PID((short)25, "pid"),
    USER((short)26, "user"),
    START_TIME((short)27, "startTime"),
    PROC_NAME((short)28, "procName"),
    PROGRAM_ID_LIST((short)29, "programIdList"),
    CPU_PERC((short)30, "cpuPerc"),
    MEM_USED((short)31, "memUsed"),
    JVM_ALLOC_MEM((short)32, "jvmAllocMem"),
    JVM_FREE_MEM((short)33, "jvmFreeMem"),
    FS_AVAIL((short)34, "fsAvail"),
    FS_USED((short)35, "fsUsed"),
    FS_USED_PERC((short)36, "fsUsedPerc"),
    QUEUE_NUM((short)37, "queueNum"),
    CONFIG_UPDATED((short)38, "configUpdated"),
    PAYLOAD_UPDATED((short)39, "payloadUpdated");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NODE_ID
          return NODE_ID;
        case 2: // CPU_VENDOR
          return CPU_VENDOR;
        case 3: // CPU_MODEL
          return CPU_MODEL;
        case 4: // CPU_CORES
          return CPU_CORES;
        case 5: // CPU_MHZ
          return CPU_MHZ;
        case 6: // MEM_SIZE
          return MEM_SIZE;
        case 7: // FS_NAME
          return FS_NAME;
        case 8: // FS_TYPE
          return FS_TYPE;
        case 9: // FS_FORMAT
          return FS_FORMAT;
        case 10: // FS_SIZE
          return FS_SIZE;
        case 11: // OS_ARCH
          return OS_ARCH;
        case 12: // OS_NAME
          return OS_NAME;
        case 13: // OS_DESC
          return OS_DESC;
        case 14: // OS_VERSION
          return OS_VERSION;
        case 15: // JVM_NAME
          return JVM_NAME;
        case 16: // JVM_VERSION
          return JVM_VERSION;
        case 17: // JVM_MAX_MEM
          return JVM_MAX_MEM;
        case 18: // NODE_TYPE
          return NODE_TYPE;
        case 19: // QUEUE_LIMIT
          return QUEUE_LIMIT;
        case 20: // DOMAIN
          return DOMAIN;
        case 21: // MAC_ADDRESS
          return MAC_ADDRESS;
        case 22: // INTERNET_CONNECTIVITY
          return INTERNET_CONNECTIVITY;
        case 23: // IP_ADDRESS
          return IP_ADDRESS;
        case 24: // RPC_PORT
          return RPC_PORT;
        case 25: // PID
          return PID;
        case 26: // USER
          return USER;
        case 27: // START_TIME
          return START_TIME;
        case 28: // PROC_NAME
          return PROC_NAME;
        case 29: // PROGRAM_ID_LIST
          return PROGRAM_ID_LIST;
        case 30: // CPU_PERC
          return CPU_PERC;
        case 31: // MEM_USED
          return MEM_USED;
        case 32: // JVM_ALLOC_MEM
          return JVM_ALLOC_MEM;
        case 33: // JVM_FREE_MEM
          return JVM_FREE_MEM;
        case 34: // FS_AVAIL
          return FS_AVAIL;
        case 35: // FS_USED
          return FS_USED;
        case 36: // FS_USED_PERC
          return FS_USED_PERC;
        case 37: // QUEUE_NUM
          return QUEUE_NUM;
        case 38: // CONFIG_UPDATED
          return CONFIG_UPDATED;
        case 39: // PAYLOAD_UPDATED
          return PAYLOAD_UPDATED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CPUCORES_ISSET_ID = 0;
  private static final int __CPUMHZ_ISSET_ID = 1;
  private static final int __MEMSIZE_ISSET_ID = 2;
  private static final int __FSSIZE_ISSET_ID = 3;
  private static final int __JVMMAXMEM_ISSET_ID = 4;
  private static final int __QUEUELIMIT_ISSET_ID = 5;
  private static final int __INTERNETCONNECTIVITY_ISSET_ID = 6;
  private static final int __RPCPORT_ISSET_ID = 7;
  private static final int __PID_ISSET_ID = 8;
  private static final int __CPUPERC_ISSET_ID = 9;
  private static final int __MEMUSED_ISSET_ID = 10;
  private static final int __JVMALLOCMEM_ISSET_ID = 11;
  private static final int __JVMFREEMEM_ISSET_ID = 12;
  private static final int __FSAVAIL_ISSET_ID = 13;
  private static final int __FSUSED_ISSET_ID = 14;
  private static final int __FSUSEDPERC_ISSET_ID = 15;
  private static final int __QUEUENUM_ISSET_ID = 16;
  private static final int __CONFIGUPDATED_ISSET_ID = 17;
  private static final int __PAYLOADUPDATED_ISSET_ID = 18;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodeId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CPU_VENDOR, new org.apache.thrift.meta_data.FieldMetaData("cpuVendor", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CPU_MODEL, new org.apache.thrift.meta_data.FieldMetaData("cpuModel", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CPU_CORES, new org.apache.thrift.meta_data.FieldMetaData("cpuCores", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CPU_MHZ, new org.apache.thrift.meta_data.FieldMetaData("cpuMhz", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MEM_SIZE, new org.apache.thrift.meta_data.FieldMetaData("memSize", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FS_NAME, new org.apache.thrift.meta_data.FieldMetaData("fsName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("fsType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FS_FORMAT, new org.apache.thrift.meta_data.FieldMetaData("fsFormat", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FS_SIZE, new org.apache.thrift.meta_data.FieldMetaData("fsSize", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OS_ARCH, new org.apache.thrift.meta_data.FieldMetaData("osArch", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OS_NAME, new org.apache.thrift.meta_data.FieldMetaData("osName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OS_DESC, new org.apache.thrift.meta_data.FieldMetaData("osDesc", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OS_VERSION, new org.apache.thrift.meta_data.FieldMetaData("osVersion", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JVM_NAME, new org.apache.thrift.meta_data.FieldMetaData("jvmName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JVM_VERSION, new org.apache.thrift.meta_data.FieldMetaData("jvmVersion", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JVM_MAX_MEM, new org.apache.thrift.meta_data.FieldMetaData("jvmMaxMem", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NODE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("nodeType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, NodeType.class)));
    tmpMap.put(_Fields.QUEUE_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("queueLimit", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DOMAIN, new org.apache.thrift.meta_data.FieldMetaData("domain", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAC_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("macAddress", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INTERNET_CONNECTIVITY, new org.apache.thrift.meta_data.FieldMetaData("internetConnectivity", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IP_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("ipAddress", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RPC_PORT, new org.apache.thrift.meta_data.FieldMetaData("rpcPort", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROC_NAME, new org.apache.thrift.meta_data.FieldMetaData("procName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROGRAM_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("programIdList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.CPU_PERC, new org.apache.thrift.meta_data.FieldMetaData("cpuPerc", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MEM_USED, new org.apache.thrift.meta_data.FieldMetaData("memUsed", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.JVM_ALLOC_MEM, new org.apache.thrift.meta_data.FieldMetaData("jvmAllocMem", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.JVM_FREE_MEM, new org.apache.thrift.meta_data.FieldMetaData("jvmFreeMem", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FS_AVAIL, new org.apache.thrift.meta_data.FieldMetaData("fsAvail", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FS_USED, new org.apache.thrift.meta_data.FieldMetaData("fsUsed", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FS_USED_PERC, new org.apache.thrift.meta_data.FieldMetaData("fsUsedPerc", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.QUEUE_NUM, new org.apache.thrift.meta_data.FieldMetaData("queueNum", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONFIG_UPDATED, new org.apache.thrift.meta_data.FieldMetaData("configUpdated", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PAYLOAD_UPDATED, new org.apache.thrift.meta_data.FieldMetaData("payloadUpdated", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NodeInfo.class, metaDataMap);
  }

  public NodeInfo() {
  }

  public NodeInfo(
    String nodeId,
    String cpuVendor,
    String cpuModel,
    int cpuCores,
    int cpuMhz,
    int memSize,
    String fsName,
    String fsType,
    String fsFormat,
    int fsSize,
    String osArch,
    String osName,
    String osDesc,
    String osVersion,
    String jvmName,
    String jvmVersion,
    int jvmMaxMem,
    NodeType nodeType,
    int queueLimit,
    String domain,
    String macAddress,
    int internetConnectivity,
    String ipAddress,
    int rpcPort,
    int pid,
    String user,
    String startTime,
    String procName,
    List<Long> programIdList,
    double cpuPerc,
    int memUsed,
    int jvmAllocMem,
    int jvmFreeMem,
    int fsAvail,
    int fsUsed,
    double fsUsedPerc,
    int queueNum,
    long configUpdated,
    long payloadUpdated)
  {
    this();
    this.nodeId = nodeId;
    this.cpuVendor = cpuVendor;
    this.cpuModel = cpuModel;
    this.cpuCores = cpuCores;
    setCpuCoresIsSet(true);
    this.cpuMhz = cpuMhz;
    setCpuMhzIsSet(true);
    this.memSize = memSize;
    setMemSizeIsSet(true);
    this.fsName = fsName;
    this.fsType = fsType;
    this.fsFormat = fsFormat;
    this.fsSize = fsSize;
    setFsSizeIsSet(true);
    this.osArch = osArch;
    this.osName = osName;
    this.osDesc = osDesc;
    this.osVersion = osVersion;
    this.jvmName = jvmName;
    this.jvmVersion = jvmVersion;
    this.jvmMaxMem = jvmMaxMem;
    setJvmMaxMemIsSet(true);
    this.nodeType = nodeType;
    this.queueLimit = queueLimit;
    setQueueLimitIsSet(true);
    this.domain = domain;
    this.macAddress = macAddress;
    this.internetConnectivity = internetConnectivity;
    setInternetConnectivityIsSet(true);
    this.ipAddress = ipAddress;
    this.rpcPort = rpcPort;
    setRpcPortIsSet(true);
    this.pid = pid;
    setPidIsSet(true);
    this.user = user;
    this.startTime = startTime;
    this.procName = procName;
    this.programIdList = programIdList;
    this.cpuPerc = cpuPerc;
    setCpuPercIsSet(true);
    this.memUsed = memUsed;
    setMemUsedIsSet(true);
    this.jvmAllocMem = jvmAllocMem;
    setJvmAllocMemIsSet(true);
    this.jvmFreeMem = jvmFreeMem;
    setJvmFreeMemIsSet(true);
    this.fsAvail = fsAvail;
    setFsAvailIsSet(true);
    this.fsUsed = fsUsed;
    setFsUsedIsSet(true);
    this.fsUsedPerc = fsUsedPerc;
    setFsUsedPercIsSet(true);
    this.queueNum = queueNum;
    setQueueNumIsSet(true);
    this.configUpdated = configUpdated;
    setConfigUpdatedIsSet(true);
    this.payloadUpdated = payloadUpdated;
    setPayloadUpdatedIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NodeInfo(NodeInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetNodeId()) {
      this.nodeId = other.nodeId;
    }
    if (other.isSetCpuVendor()) {
      this.cpuVendor = other.cpuVendor;
    }
    if (other.isSetCpuModel()) {
      this.cpuModel = other.cpuModel;
    }
    this.cpuCores = other.cpuCores;
    this.cpuMhz = other.cpuMhz;
    this.memSize = other.memSize;
    if (other.isSetFsName()) {
      this.fsName = other.fsName;
    }
    if (other.isSetFsType()) {
      this.fsType = other.fsType;
    }
    if (other.isSetFsFormat()) {
      this.fsFormat = other.fsFormat;
    }
    this.fsSize = other.fsSize;
    if (other.isSetOsArch()) {
      this.osArch = other.osArch;
    }
    if (other.isSetOsName()) {
      this.osName = other.osName;
    }
    if (other.isSetOsDesc()) {
      this.osDesc = other.osDesc;
    }
    if (other.isSetOsVersion()) {
      this.osVersion = other.osVersion;
    }
    if (other.isSetJvmName()) {
      this.jvmName = other.jvmName;
    }
    if (other.isSetJvmVersion()) {
      this.jvmVersion = other.jvmVersion;
    }
    this.jvmMaxMem = other.jvmMaxMem;
    if (other.isSetNodeType()) {
      this.nodeType = other.nodeType;
    }
    this.queueLimit = other.queueLimit;
    if (other.isSetDomain()) {
      this.domain = other.domain;
    }
    if (other.isSetMacAddress()) {
      this.macAddress = other.macAddress;
    }
    this.internetConnectivity = other.internetConnectivity;
    if (other.isSetIpAddress()) {
      this.ipAddress = other.ipAddress;
    }
    this.rpcPort = other.rpcPort;
    this.pid = other.pid;
    if (other.isSetUser()) {
      this.user = other.user;
    }
    if (other.isSetStartTime()) {
      this.startTime = other.startTime;
    }
    if (other.isSetProcName()) {
      this.procName = other.procName;
    }
    if (other.isSetProgramIdList()) {
      List<Long> __this__programIdList = new ArrayList<Long>();
      for (Long other_element : other.programIdList) {
        __this__programIdList.add(other_element);
      }
      this.programIdList = __this__programIdList;
    }
    this.cpuPerc = other.cpuPerc;
    this.memUsed = other.memUsed;
    this.jvmAllocMem = other.jvmAllocMem;
    this.jvmFreeMem = other.jvmFreeMem;
    this.fsAvail = other.fsAvail;
    this.fsUsed = other.fsUsed;
    this.fsUsedPerc = other.fsUsedPerc;
    this.queueNum = other.queueNum;
    this.configUpdated = other.configUpdated;
    this.payloadUpdated = other.payloadUpdated;
  }

  public NodeInfo deepCopy() {
    return new NodeInfo(this);
  }

  @Override
  public void clear() {
    this.nodeId = null;
    this.cpuVendor = null;
    this.cpuModel = null;
    setCpuCoresIsSet(false);
    this.cpuCores = 0;
    setCpuMhzIsSet(false);
    this.cpuMhz = 0;
    setMemSizeIsSet(false);
    this.memSize = 0;
    this.fsName = null;
    this.fsType = null;
    this.fsFormat = null;
    setFsSizeIsSet(false);
    this.fsSize = 0;
    this.osArch = null;
    this.osName = null;
    this.osDesc = null;
    this.osVersion = null;
    this.jvmName = null;
    this.jvmVersion = null;
    setJvmMaxMemIsSet(false);
    this.jvmMaxMem = 0;
    this.nodeType = null;
    setQueueLimitIsSet(false);
    this.queueLimit = 0;
    this.domain = null;
    this.macAddress = null;
    setInternetConnectivityIsSet(false);
    this.internetConnectivity = 0;
    this.ipAddress = null;
    setRpcPortIsSet(false);
    this.rpcPort = 0;
    setPidIsSet(false);
    this.pid = 0;
    this.user = null;
    this.startTime = null;
    this.procName = null;
    this.programIdList = null;
    setCpuPercIsSet(false);
    this.cpuPerc = 0.0;
    setMemUsedIsSet(false);
    this.memUsed = 0;
    setJvmAllocMemIsSet(false);
    this.jvmAllocMem = 0;
    setJvmFreeMemIsSet(false);
    this.jvmFreeMem = 0;
    setFsAvailIsSet(false);
    this.fsAvail = 0;
    setFsUsedIsSet(false);
    this.fsUsed = 0;
    setFsUsedPercIsSet(false);
    this.fsUsedPerc = 0.0;
    setQueueNumIsSet(false);
    this.queueNum = 0;
    setConfigUpdatedIsSet(false);
    this.configUpdated = 0;
    setPayloadUpdatedIsSet(false);
    this.payloadUpdated = 0;
  }

  public String getNodeId() {
    return this.nodeId;
  }

  public NodeInfo setNodeId(String nodeId) {
    this.nodeId = nodeId;
    return this;
  }

  public void unsetNodeId() {
    this.nodeId = null;
  }

  /** Returns true if field nodeId is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeId() {
    return this.nodeId != null;
  }

  public void setNodeIdIsSet(boolean value) {
    if (!value) {
      this.nodeId = null;
    }
  }

  public String getCpuVendor() {
    return this.cpuVendor;
  }

  public NodeInfo setCpuVendor(String cpuVendor) {
    this.cpuVendor = cpuVendor;
    return this;
  }

  public void unsetCpuVendor() {
    this.cpuVendor = null;
  }

  /** Returns true if field cpuVendor is set (has been assigned a value) and false otherwise */
  public boolean isSetCpuVendor() {
    return this.cpuVendor != null;
  }

  public void setCpuVendorIsSet(boolean value) {
    if (!value) {
      this.cpuVendor = null;
    }
  }

  public String getCpuModel() {
    return this.cpuModel;
  }

  public NodeInfo setCpuModel(String cpuModel) {
    this.cpuModel = cpuModel;
    return this;
  }

  public void unsetCpuModel() {
    this.cpuModel = null;
  }

  /** Returns true if field cpuModel is set (has been assigned a value) and false otherwise */
  public boolean isSetCpuModel() {
    return this.cpuModel != null;
  }

  public void setCpuModelIsSet(boolean value) {
    if (!value) {
      this.cpuModel = null;
    }
  }

  public int getCpuCores() {
    return this.cpuCores;
  }

  public NodeInfo setCpuCores(int cpuCores) {
    this.cpuCores = cpuCores;
    setCpuCoresIsSet(true);
    return this;
  }

  public void unsetCpuCores() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CPUCORES_ISSET_ID);
  }

  /** Returns true if field cpuCores is set (has been assigned a value) and false otherwise */
  public boolean isSetCpuCores() {
    return EncodingUtils.testBit(__isset_bitfield, __CPUCORES_ISSET_ID);
  }

  public void setCpuCoresIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CPUCORES_ISSET_ID, value);
  }

  public int getCpuMhz() {
    return this.cpuMhz;
  }

  public NodeInfo setCpuMhz(int cpuMhz) {
    this.cpuMhz = cpuMhz;
    setCpuMhzIsSet(true);
    return this;
  }

  public void unsetCpuMhz() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CPUMHZ_ISSET_ID);
  }

  /** Returns true if field cpuMhz is set (has been assigned a value) and false otherwise */
  public boolean isSetCpuMhz() {
    return EncodingUtils.testBit(__isset_bitfield, __CPUMHZ_ISSET_ID);
  }

  public void setCpuMhzIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CPUMHZ_ISSET_ID, value);
  }

  public int getMemSize() {
    return this.memSize;
  }

  public NodeInfo setMemSize(int memSize) {
    this.memSize = memSize;
    setMemSizeIsSet(true);
    return this;
  }

  public void unsetMemSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMSIZE_ISSET_ID);
  }

  /** Returns true if field memSize is set (has been assigned a value) and false otherwise */
  public boolean isSetMemSize() {
    return EncodingUtils.testBit(__isset_bitfield, __MEMSIZE_ISSET_ID);
  }

  public void setMemSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMSIZE_ISSET_ID, value);
  }

  public String getFsName() {
    return this.fsName;
  }

  public NodeInfo setFsName(String fsName) {
    this.fsName = fsName;
    return this;
  }

  public void unsetFsName() {
    this.fsName = null;
  }

  /** Returns true if field fsName is set (has been assigned a value) and false otherwise */
  public boolean isSetFsName() {
    return this.fsName != null;
  }

  public void setFsNameIsSet(boolean value) {
    if (!value) {
      this.fsName = null;
    }
  }

  public String getFsType() {
    return this.fsType;
  }

  public NodeInfo setFsType(String fsType) {
    this.fsType = fsType;
    return this;
  }

  public void unsetFsType() {
    this.fsType = null;
  }

  /** Returns true if field fsType is set (has been assigned a value) and false otherwise */
  public boolean isSetFsType() {
    return this.fsType != null;
  }

  public void setFsTypeIsSet(boolean value) {
    if (!value) {
      this.fsType = null;
    }
  }

  public String getFsFormat() {
    return this.fsFormat;
  }

  public NodeInfo setFsFormat(String fsFormat) {
    this.fsFormat = fsFormat;
    return this;
  }

  public void unsetFsFormat() {
    this.fsFormat = null;
  }

  /** Returns true if field fsFormat is set (has been assigned a value) and false otherwise */
  public boolean isSetFsFormat() {
    return this.fsFormat != null;
  }

  public void setFsFormatIsSet(boolean value) {
    if (!value) {
      this.fsFormat = null;
    }
  }

  public int getFsSize() {
    return this.fsSize;
  }

  public NodeInfo setFsSize(int fsSize) {
    this.fsSize = fsSize;
    setFsSizeIsSet(true);
    return this;
  }

  public void unsetFsSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FSSIZE_ISSET_ID);
  }

  /** Returns true if field fsSize is set (has been assigned a value) and false otherwise */
  public boolean isSetFsSize() {
    return EncodingUtils.testBit(__isset_bitfield, __FSSIZE_ISSET_ID);
  }

  public void setFsSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FSSIZE_ISSET_ID, value);
  }

  public String getOsArch() {
    return this.osArch;
  }

  public NodeInfo setOsArch(String osArch) {
    this.osArch = osArch;
    return this;
  }

  public void unsetOsArch() {
    this.osArch = null;
  }

  /** Returns true if field osArch is set (has been assigned a value) and false otherwise */
  public boolean isSetOsArch() {
    return this.osArch != null;
  }

  public void setOsArchIsSet(boolean value) {
    if (!value) {
      this.osArch = null;
    }
  }

  public String getOsName() {
    return this.osName;
  }

  public NodeInfo setOsName(String osName) {
    this.osName = osName;
    return this;
  }

  public void unsetOsName() {
    this.osName = null;
  }

  /** Returns true if field osName is set (has been assigned a value) and false otherwise */
  public boolean isSetOsName() {
    return this.osName != null;
  }

  public void setOsNameIsSet(boolean value) {
    if (!value) {
      this.osName = null;
    }
  }

  public String getOsDesc() {
    return this.osDesc;
  }

  public NodeInfo setOsDesc(String osDesc) {
    this.osDesc = osDesc;
    return this;
  }

  public void unsetOsDesc() {
    this.osDesc = null;
  }

  /** Returns true if field osDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetOsDesc() {
    return this.osDesc != null;
  }

  public void setOsDescIsSet(boolean value) {
    if (!value) {
      this.osDesc = null;
    }
  }

  public String getOsVersion() {
    return this.osVersion;
  }

  public NodeInfo setOsVersion(String osVersion) {
    this.osVersion = osVersion;
    return this;
  }

  public void unsetOsVersion() {
    this.osVersion = null;
  }

  /** Returns true if field osVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetOsVersion() {
    return this.osVersion != null;
  }

  public void setOsVersionIsSet(boolean value) {
    if (!value) {
      this.osVersion = null;
    }
  }

  public String getJvmName() {
    return this.jvmName;
  }

  public NodeInfo setJvmName(String jvmName) {
    this.jvmName = jvmName;
    return this;
  }

  public void unsetJvmName() {
    this.jvmName = null;
  }

  /** Returns true if field jvmName is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmName() {
    return this.jvmName != null;
  }

  public void setJvmNameIsSet(boolean value) {
    if (!value) {
      this.jvmName = null;
    }
  }

  public String getJvmVersion() {
    return this.jvmVersion;
  }

  public NodeInfo setJvmVersion(String jvmVersion) {
    this.jvmVersion = jvmVersion;
    return this;
  }

  public void unsetJvmVersion() {
    this.jvmVersion = null;
  }

  /** Returns true if field jvmVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmVersion() {
    return this.jvmVersion != null;
  }

  public void setJvmVersionIsSet(boolean value) {
    if (!value) {
      this.jvmVersion = null;
    }
  }

  public int getJvmMaxMem() {
    return this.jvmMaxMem;
  }

  public NodeInfo setJvmMaxMem(int jvmMaxMem) {
    this.jvmMaxMem = jvmMaxMem;
    setJvmMaxMemIsSet(true);
    return this;
  }

  public void unsetJvmMaxMem() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JVMMAXMEM_ISSET_ID);
  }

  /** Returns true if field jvmMaxMem is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmMaxMem() {
    return EncodingUtils.testBit(__isset_bitfield, __JVMMAXMEM_ISSET_ID);
  }

  public void setJvmMaxMemIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JVMMAXMEM_ISSET_ID, value);
  }

  /**
   * 
   * @see NodeType
   */
  public NodeType getNodeType() {
    return this.nodeType;
  }

  /**
   * 
   * @see NodeType
   */
  public NodeInfo setNodeType(NodeType nodeType) {
    this.nodeType = nodeType;
    return this;
  }

  public void unsetNodeType() {
    this.nodeType = null;
  }

  /** Returns true if field nodeType is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeType() {
    return this.nodeType != null;
  }

  public void setNodeTypeIsSet(boolean value) {
    if (!value) {
      this.nodeType = null;
    }
  }

  public int getQueueLimit() {
    return this.queueLimit;
  }

  public NodeInfo setQueueLimit(int queueLimit) {
    this.queueLimit = queueLimit;
    setQueueLimitIsSet(true);
    return this;
  }

  public void unsetQueueLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUEUELIMIT_ISSET_ID);
  }

  /** Returns true if field queueLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetQueueLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __QUEUELIMIT_ISSET_ID);
  }

  public void setQueueLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUEUELIMIT_ISSET_ID, value);
  }

  public String getDomain() {
    return this.domain;
  }

  public NodeInfo setDomain(String domain) {
    this.domain = domain;
    return this;
  }

  public void unsetDomain() {
    this.domain = null;
  }

  /** Returns true if field domain is set (has been assigned a value) and false otherwise */
  public boolean isSetDomain() {
    return this.domain != null;
  }

  public void setDomainIsSet(boolean value) {
    if (!value) {
      this.domain = null;
    }
  }

  public String getMacAddress() {
    return this.macAddress;
  }

  public NodeInfo setMacAddress(String macAddress) {
    this.macAddress = macAddress;
    return this;
  }

  public void unsetMacAddress() {
    this.macAddress = null;
  }

  /** Returns true if field macAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetMacAddress() {
    return this.macAddress != null;
  }

  public void setMacAddressIsSet(boolean value) {
    if (!value) {
      this.macAddress = null;
    }
  }

  public int getInternetConnectivity() {
    return this.internetConnectivity;
  }

  public NodeInfo setInternetConnectivity(int internetConnectivity) {
    this.internetConnectivity = internetConnectivity;
    setInternetConnectivityIsSet(true);
    return this;
  }

  public void unsetInternetConnectivity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTERNETCONNECTIVITY_ISSET_ID);
  }

  /** Returns true if field internetConnectivity is set (has been assigned a value) and false otherwise */
  public boolean isSetInternetConnectivity() {
    return EncodingUtils.testBit(__isset_bitfield, __INTERNETCONNECTIVITY_ISSET_ID);
  }

  public void setInternetConnectivityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTERNETCONNECTIVITY_ISSET_ID, value);
  }

  public String getIpAddress() {
    return this.ipAddress;
  }

  public NodeInfo setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  public void unsetIpAddress() {
    this.ipAddress = null;
  }

  /** Returns true if field ipAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetIpAddress() {
    return this.ipAddress != null;
  }

  public void setIpAddressIsSet(boolean value) {
    if (!value) {
      this.ipAddress = null;
    }
  }

  public int getRpcPort() {
    return this.rpcPort;
  }

  public NodeInfo setRpcPort(int rpcPort) {
    this.rpcPort = rpcPort;
    setRpcPortIsSet(true);
    return this;
  }

  public void unsetRpcPort() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RPCPORT_ISSET_ID);
  }

  /** Returns true if field rpcPort is set (has been assigned a value) and false otherwise */
  public boolean isSetRpcPort() {
    return EncodingUtils.testBit(__isset_bitfield, __RPCPORT_ISSET_ID);
  }

  public void setRpcPortIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RPCPORT_ISSET_ID, value);
  }

  public int getPid() {
    return this.pid;
  }

  public NodeInfo setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public String getUser() {
    return this.user;
  }

  public NodeInfo setUser(String user) {
    this.user = user;
    return this;
  }

  public void unsetUser() {
    this.user = null;
  }

  /** Returns true if field user is set (has been assigned a value) and false otherwise */
  public boolean isSetUser() {
    return this.user != null;
  }

  public void setUserIsSet(boolean value) {
    if (!value) {
      this.user = null;
    }
  }

  public String getStartTime() {
    return this.startTime;
  }

  public NodeInfo setStartTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  public void unsetStartTime() {
    this.startTime = null;
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return this.startTime != null;
  }

  public void setStartTimeIsSet(boolean value) {
    if (!value) {
      this.startTime = null;
    }
  }

  public String getProcName() {
    return this.procName;
  }

  public NodeInfo setProcName(String procName) {
    this.procName = procName;
    return this;
  }

  public void unsetProcName() {
    this.procName = null;
  }

  /** Returns true if field procName is set (has been assigned a value) and false otherwise */
  public boolean isSetProcName() {
    return this.procName != null;
  }

  public void setProcNameIsSet(boolean value) {
    if (!value) {
      this.procName = null;
    }
  }

  public int getProgramIdListSize() {
    return (this.programIdList == null) ? 0 : this.programIdList.size();
  }

  public java.util.Iterator<Long> getProgramIdListIterator() {
    return (this.programIdList == null) ? null : this.programIdList.iterator();
  }

  public void addToProgramIdList(long elem) {
    if (this.programIdList == null) {
      this.programIdList = new ArrayList<Long>();
    }
    this.programIdList.add(elem);
  }

  public List<Long> getProgramIdList() {
    return this.programIdList;
  }

  public NodeInfo setProgramIdList(List<Long> programIdList) {
    this.programIdList = programIdList;
    return this;
  }

  public void unsetProgramIdList() {
    this.programIdList = null;
  }

  /** Returns true if field programIdList is set (has been assigned a value) and false otherwise */
  public boolean isSetProgramIdList() {
    return this.programIdList != null;
  }

  public void setProgramIdListIsSet(boolean value) {
    if (!value) {
      this.programIdList = null;
    }
  }

  public double getCpuPerc() {
    return this.cpuPerc;
  }

  public NodeInfo setCpuPerc(double cpuPerc) {
    this.cpuPerc = cpuPerc;
    setCpuPercIsSet(true);
    return this;
  }

  public void unsetCpuPerc() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CPUPERC_ISSET_ID);
  }

  /** Returns true if field cpuPerc is set (has been assigned a value) and false otherwise */
  public boolean isSetCpuPerc() {
    return EncodingUtils.testBit(__isset_bitfield, __CPUPERC_ISSET_ID);
  }

  public void setCpuPercIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CPUPERC_ISSET_ID, value);
  }

  public int getMemUsed() {
    return this.memUsed;
  }

  public NodeInfo setMemUsed(int memUsed) {
    this.memUsed = memUsed;
    setMemUsedIsSet(true);
    return this;
  }

  public void unsetMemUsed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMUSED_ISSET_ID);
  }

  /** Returns true if field memUsed is set (has been assigned a value) and false otherwise */
  public boolean isSetMemUsed() {
    return EncodingUtils.testBit(__isset_bitfield, __MEMUSED_ISSET_ID);
  }

  public void setMemUsedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMUSED_ISSET_ID, value);
  }

  public int getJvmAllocMem() {
    return this.jvmAllocMem;
  }

  public NodeInfo setJvmAllocMem(int jvmAllocMem) {
    this.jvmAllocMem = jvmAllocMem;
    setJvmAllocMemIsSet(true);
    return this;
  }

  public void unsetJvmAllocMem() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JVMALLOCMEM_ISSET_ID);
  }

  /** Returns true if field jvmAllocMem is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmAllocMem() {
    return EncodingUtils.testBit(__isset_bitfield, __JVMALLOCMEM_ISSET_ID);
  }

  public void setJvmAllocMemIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JVMALLOCMEM_ISSET_ID, value);
  }

  public int getJvmFreeMem() {
    return this.jvmFreeMem;
  }

  public NodeInfo setJvmFreeMem(int jvmFreeMem) {
    this.jvmFreeMem = jvmFreeMem;
    setJvmFreeMemIsSet(true);
    return this;
  }

  public void unsetJvmFreeMem() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JVMFREEMEM_ISSET_ID);
  }

  /** Returns true if field jvmFreeMem is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmFreeMem() {
    return EncodingUtils.testBit(__isset_bitfield, __JVMFREEMEM_ISSET_ID);
  }

  public void setJvmFreeMemIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JVMFREEMEM_ISSET_ID, value);
  }

  public int getFsAvail() {
    return this.fsAvail;
  }

  public NodeInfo setFsAvail(int fsAvail) {
    this.fsAvail = fsAvail;
    setFsAvailIsSet(true);
    return this;
  }

  public void unsetFsAvail() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FSAVAIL_ISSET_ID);
  }

  /** Returns true if field fsAvail is set (has been assigned a value) and false otherwise */
  public boolean isSetFsAvail() {
    return EncodingUtils.testBit(__isset_bitfield, __FSAVAIL_ISSET_ID);
  }

  public void setFsAvailIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FSAVAIL_ISSET_ID, value);
  }

  public int getFsUsed() {
    return this.fsUsed;
  }

  public NodeInfo setFsUsed(int fsUsed) {
    this.fsUsed = fsUsed;
    setFsUsedIsSet(true);
    return this;
  }

  public void unsetFsUsed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FSUSED_ISSET_ID);
  }

  /** Returns true if field fsUsed is set (has been assigned a value) and false otherwise */
  public boolean isSetFsUsed() {
    return EncodingUtils.testBit(__isset_bitfield, __FSUSED_ISSET_ID);
  }

  public void setFsUsedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FSUSED_ISSET_ID, value);
  }

  public double getFsUsedPerc() {
    return this.fsUsedPerc;
  }

  public NodeInfo setFsUsedPerc(double fsUsedPerc) {
    this.fsUsedPerc = fsUsedPerc;
    setFsUsedPercIsSet(true);
    return this;
  }

  public void unsetFsUsedPerc() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FSUSEDPERC_ISSET_ID);
  }

  /** Returns true if field fsUsedPerc is set (has been assigned a value) and false otherwise */
  public boolean isSetFsUsedPerc() {
    return EncodingUtils.testBit(__isset_bitfield, __FSUSEDPERC_ISSET_ID);
  }

  public void setFsUsedPercIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FSUSEDPERC_ISSET_ID, value);
  }

  public int getQueueNum() {
    return this.queueNum;
  }

  public NodeInfo setQueueNum(int queueNum) {
    this.queueNum = queueNum;
    setQueueNumIsSet(true);
    return this;
  }

  public void unsetQueueNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUEUENUM_ISSET_ID);
  }

  /** Returns true if field queueNum is set (has been assigned a value) and false otherwise */
  public boolean isSetQueueNum() {
    return EncodingUtils.testBit(__isset_bitfield, __QUEUENUM_ISSET_ID);
  }

  public void setQueueNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUEUENUM_ISSET_ID, value);
  }

  public long getConfigUpdated() {
    return this.configUpdated;
  }

  public NodeInfo setConfigUpdated(long configUpdated) {
    this.configUpdated = configUpdated;
    setConfigUpdatedIsSet(true);
    return this;
  }

  public void unsetConfigUpdated() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONFIGUPDATED_ISSET_ID);
  }

  /** Returns true if field configUpdated is set (has been assigned a value) and false otherwise */
  public boolean isSetConfigUpdated() {
    return EncodingUtils.testBit(__isset_bitfield, __CONFIGUPDATED_ISSET_ID);
  }

  public void setConfigUpdatedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONFIGUPDATED_ISSET_ID, value);
  }

  public long getPayloadUpdated() {
    return this.payloadUpdated;
  }

  public NodeInfo setPayloadUpdated(long payloadUpdated) {
    this.payloadUpdated = payloadUpdated;
    setPayloadUpdatedIsSet(true);
    return this;
  }

  public void unsetPayloadUpdated() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYLOADUPDATED_ISSET_ID);
  }

  /** Returns true if field payloadUpdated is set (has been assigned a value) and false otherwise */
  public boolean isSetPayloadUpdated() {
    return EncodingUtils.testBit(__isset_bitfield, __PAYLOADUPDATED_ISSET_ID);
  }

  public void setPayloadUpdatedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYLOADUPDATED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NODE_ID:
      if (value == null) {
        unsetNodeId();
      } else {
        setNodeId((String)value);
      }
      break;

    case CPU_VENDOR:
      if (value == null) {
        unsetCpuVendor();
      } else {
        setCpuVendor((String)value);
      }
      break;

    case CPU_MODEL:
      if (value == null) {
        unsetCpuModel();
      } else {
        setCpuModel((String)value);
      }
      break;

    case CPU_CORES:
      if (value == null) {
        unsetCpuCores();
      } else {
        setCpuCores((Integer)value);
      }
      break;

    case CPU_MHZ:
      if (value == null) {
        unsetCpuMhz();
      } else {
        setCpuMhz((Integer)value);
      }
      break;

    case MEM_SIZE:
      if (value == null) {
        unsetMemSize();
      } else {
        setMemSize((Integer)value);
      }
      break;

    case FS_NAME:
      if (value == null) {
        unsetFsName();
      } else {
        setFsName((String)value);
      }
      break;

    case FS_TYPE:
      if (value == null) {
        unsetFsType();
      } else {
        setFsType((String)value);
      }
      break;

    case FS_FORMAT:
      if (value == null) {
        unsetFsFormat();
      } else {
        setFsFormat((String)value);
      }
      break;

    case FS_SIZE:
      if (value == null) {
        unsetFsSize();
      } else {
        setFsSize((Integer)value);
      }
      break;

    case OS_ARCH:
      if (value == null) {
        unsetOsArch();
      } else {
        setOsArch((String)value);
      }
      break;

    case OS_NAME:
      if (value == null) {
        unsetOsName();
      } else {
        setOsName((String)value);
      }
      break;

    case OS_DESC:
      if (value == null) {
        unsetOsDesc();
      } else {
        setOsDesc((String)value);
      }
      break;

    case OS_VERSION:
      if (value == null) {
        unsetOsVersion();
      } else {
        setOsVersion((String)value);
      }
      break;

    case JVM_NAME:
      if (value == null) {
        unsetJvmName();
      } else {
        setJvmName((String)value);
      }
      break;

    case JVM_VERSION:
      if (value == null) {
        unsetJvmVersion();
      } else {
        setJvmVersion((String)value);
      }
      break;

    case JVM_MAX_MEM:
      if (value == null) {
        unsetJvmMaxMem();
      } else {
        setJvmMaxMem((Integer)value);
      }
      break;

    case NODE_TYPE:
      if (value == null) {
        unsetNodeType();
      } else {
        setNodeType((NodeType)value);
      }
      break;

    case QUEUE_LIMIT:
      if (value == null) {
        unsetQueueLimit();
      } else {
        setQueueLimit((Integer)value);
      }
      break;

    case DOMAIN:
      if (value == null) {
        unsetDomain();
      } else {
        setDomain((String)value);
      }
      break;

    case MAC_ADDRESS:
      if (value == null) {
        unsetMacAddress();
      } else {
        setMacAddress((String)value);
      }
      break;

    case INTERNET_CONNECTIVITY:
      if (value == null) {
        unsetInternetConnectivity();
      } else {
        setInternetConnectivity((Integer)value);
      }
      break;

    case IP_ADDRESS:
      if (value == null) {
        unsetIpAddress();
      } else {
        setIpAddress((String)value);
      }
      break;

    case RPC_PORT:
      if (value == null) {
        unsetRpcPort();
      } else {
        setRpcPort((Integer)value);
      }
      break;

    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case USER:
      if (value == null) {
        unsetUser();
      } else {
        setUser((String)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((String)value);
      }
      break;

    case PROC_NAME:
      if (value == null) {
        unsetProcName();
      } else {
        setProcName((String)value);
      }
      break;

    case PROGRAM_ID_LIST:
      if (value == null) {
        unsetProgramIdList();
      } else {
        setProgramIdList((List<Long>)value);
      }
      break;

    case CPU_PERC:
      if (value == null) {
        unsetCpuPerc();
      } else {
        setCpuPerc((Double)value);
      }
      break;

    case MEM_USED:
      if (value == null) {
        unsetMemUsed();
      } else {
        setMemUsed((Integer)value);
      }
      break;

    case JVM_ALLOC_MEM:
      if (value == null) {
        unsetJvmAllocMem();
      } else {
        setJvmAllocMem((Integer)value);
      }
      break;

    case JVM_FREE_MEM:
      if (value == null) {
        unsetJvmFreeMem();
      } else {
        setJvmFreeMem((Integer)value);
      }
      break;

    case FS_AVAIL:
      if (value == null) {
        unsetFsAvail();
      } else {
        setFsAvail((Integer)value);
      }
      break;

    case FS_USED:
      if (value == null) {
        unsetFsUsed();
      } else {
        setFsUsed((Integer)value);
      }
      break;

    case FS_USED_PERC:
      if (value == null) {
        unsetFsUsedPerc();
      } else {
        setFsUsedPerc((Double)value);
      }
      break;

    case QUEUE_NUM:
      if (value == null) {
        unsetQueueNum();
      } else {
        setQueueNum((Integer)value);
      }
      break;

    case CONFIG_UPDATED:
      if (value == null) {
        unsetConfigUpdated();
      } else {
        setConfigUpdated((Long)value);
      }
      break;

    case PAYLOAD_UPDATED:
      if (value == null) {
        unsetPayloadUpdated();
      } else {
        setPayloadUpdated((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NODE_ID:
      return getNodeId();

    case CPU_VENDOR:
      return getCpuVendor();

    case CPU_MODEL:
      return getCpuModel();

    case CPU_CORES:
      return Integer.valueOf(getCpuCores());

    case CPU_MHZ:
      return Integer.valueOf(getCpuMhz());

    case MEM_SIZE:
      return Integer.valueOf(getMemSize());

    case FS_NAME:
      return getFsName();

    case FS_TYPE:
      return getFsType();

    case FS_FORMAT:
      return getFsFormat();

    case FS_SIZE:
      return Integer.valueOf(getFsSize());

    case OS_ARCH:
      return getOsArch();

    case OS_NAME:
      return getOsName();

    case OS_DESC:
      return getOsDesc();

    case OS_VERSION:
      return getOsVersion();

    case JVM_NAME:
      return getJvmName();

    case JVM_VERSION:
      return getJvmVersion();

    case JVM_MAX_MEM:
      return Integer.valueOf(getJvmMaxMem());

    case NODE_TYPE:
      return getNodeType();

    case QUEUE_LIMIT:
      return Integer.valueOf(getQueueLimit());

    case DOMAIN:
      return getDomain();

    case MAC_ADDRESS:
      return getMacAddress();

    case INTERNET_CONNECTIVITY:
      return Integer.valueOf(getInternetConnectivity());

    case IP_ADDRESS:
      return getIpAddress();

    case RPC_PORT:
      return Integer.valueOf(getRpcPort());

    case PID:
      return Integer.valueOf(getPid());

    case USER:
      return getUser();

    case START_TIME:
      return getStartTime();

    case PROC_NAME:
      return getProcName();

    case PROGRAM_ID_LIST:
      return getProgramIdList();

    case CPU_PERC:
      return Double.valueOf(getCpuPerc());

    case MEM_USED:
      return Integer.valueOf(getMemUsed());

    case JVM_ALLOC_MEM:
      return Integer.valueOf(getJvmAllocMem());

    case JVM_FREE_MEM:
      return Integer.valueOf(getJvmFreeMem());

    case FS_AVAIL:
      return Integer.valueOf(getFsAvail());

    case FS_USED:
      return Integer.valueOf(getFsUsed());

    case FS_USED_PERC:
      return Double.valueOf(getFsUsedPerc());

    case QUEUE_NUM:
      return Integer.valueOf(getQueueNum());

    case CONFIG_UPDATED:
      return Long.valueOf(getConfigUpdated());

    case PAYLOAD_UPDATED:
      return Long.valueOf(getPayloadUpdated());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NODE_ID:
      return isSetNodeId();
    case CPU_VENDOR:
      return isSetCpuVendor();
    case CPU_MODEL:
      return isSetCpuModel();
    case CPU_CORES:
      return isSetCpuCores();
    case CPU_MHZ:
      return isSetCpuMhz();
    case MEM_SIZE:
      return isSetMemSize();
    case FS_NAME:
      return isSetFsName();
    case FS_TYPE:
      return isSetFsType();
    case FS_FORMAT:
      return isSetFsFormat();
    case FS_SIZE:
      return isSetFsSize();
    case OS_ARCH:
      return isSetOsArch();
    case OS_NAME:
      return isSetOsName();
    case OS_DESC:
      return isSetOsDesc();
    case OS_VERSION:
      return isSetOsVersion();
    case JVM_NAME:
      return isSetJvmName();
    case JVM_VERSION:
      return isSetJvmVersion();
    case JVM_MAX_MEM:
      return isSetJvmMaxMem();
    case NODE_TYPE:
      return isSetNodeType();
    case QUEUE_LIMIT:
      return isSetQueueLimit();
    case DOMAIN:
      return isSetDomain();
    case MAC_ADDRESS:
      return isSetMacAddress();
    case INTERNET_CONNECTIVITY:
      return isSetInternetConnectivity();
    case IP_ADDRESS:
      return isSetIpAddress();
    case RPC_PORT:
      return isSetRpcPort();
    case PID:
      return isSetPid();
    case USER:
      return isSetUser();
    case START_TIME:
      return isSetStartTime();
    case PROC_NAME:
      return isSetProcName();
    case PROGRAM_ID_LIST:
      return isSetProgramIdList();
    case CPU_PERC:
      return isSetCpuPerc();
    case MEM_USED:
      return isSetMemUsed();
    case JVM_ALLOC_MEM:
      return isSetJvmAllocMem();
    case JVM_FREE_MEM:
      return isSetJvmFreeMem();
    case FS_AVAIL:
      return isSetFsAvail();
    case FS_USED:
      return isSetFsUsed();
    case FS_USED_PERC:
      return isSetFsUsedPerc();
    case QUEUE_NUM:
      return isSetQueueNum();
    case CONFIG_UPDATED:
      return isSetConfigUpdated();
    case PAYLOAD_UPDATED:
      return isSetPayloadUpdated();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof NodeInfo)
      return this.equals((NodeInfo)that);
    return false;
  }

  public boolean equals(NodeInfo that) {
    if (that == null)
      return false;

    boolean this_present_nodeId = true && this.isSetNodeId();
    boolean that_present_nodeId = true && that.isSetNodeId();
    if (this_present_nodeId || that_present_nodeId) {
      if (!(this_present_nodeId && that_present_nodeId))
        return false;
      if (!this.nodeId.equals(that.nodeId))
        return false;
    }

    boolean this_present_cpuVendor = true && this.isSetCpuVendor();
    boolean that_present_cpuVendor = true && that.isSetCpuVendor();
    if (this_present_cpuVendor || that_present_cpuVendor) {
      if (!(this_present_cpuVendor && that_present_cpuVendor))
        return false;
      if (!this.cpuVendor.equals(that.cpuVendor))
        return false;
    }

    boolean this_present_cpuModel = true && this.isSetCpuModel();
    boolean that_present_cpuModel = true && that.isSetCpuModel();
    if (this_present_cpuModel || that_present_cpuModel) {
      if (!(this_present_cpuModel && that_present_cpuModel))
        return false;
      if (!this.cpuModel.equals(that.cpuModel))
        return false;
    }

    boolean this_present_cpuCores = true;
    boolean that_present_cpuCores = true;
    if (this_present_cpuCores || that_present_cpuCores) {
      if (!(this_present_cpuCores && that_present_cpuCores))
        return false;
      if (this.cpuCores != that.cpuCores)
        return false;
    }

    boolean this_present_cpuMhz = true;
    boolean that_present_cpuMhz = true;
    if (this_present_cpuMhz || that_present_cpuMhz) {
      if (!(this_present_cpuMhz && that_present_cpuMhz))
        return false;
      if (this.cpuMhz != that.cpuMhz)
        return false;
    }

    boolean this_present_memSize = true;
    boolean that_present_memSize = true;
    if (this_present_memSize || that_present_memSize) {
      if (!(this_present_memSize && that_present_memSize))
        return false;
      if (this.memSize != that.memSize)
        return false;
    }

    boolean this_present_fsName = true && this.isSetFsName();
    boolean that_present_fsName = true && that.isSetFsName();
    if (this_present_fsName || that_present_fsName) {
      if (!(this_present_fsName && that_present_fsName))
        return false;
      if (!this.fsName.equals(that.fsName))
        return false;
    }

    boolean this_present_fsType = true && this.isSetFsType();
    boolean that_present_fsType = true && that.isSetFsType();
    if (this_present_fsType || that_present_fsType) {
      if (!(this_present_fsType && that_present_fsType))
        return false;
      if (!this.fsType.equals(that.fsType))
        return false;
    }

    boolean this_present_fsFormat = true && this.isSetFsFormat();
    boolean that_present_fsFormat = true && that.isSetFsFormat();
    if (this_present_fsFormat || that_present_fsFormat) {
      if (!(this_present_fsFormat && that_present_fsFormat))
        return false;
      if (!this.fsFormat.equals(that.fsFormat))
        return false;
    }

    boolean this_present_fsSize = true;
    boolean that_present_fsSize = true;
    if (this_present_fsSize || that_present_fsSize) {
      if (!(this_present_fsSize && that_present_fsSize))
        return false;
      if (this.fsSize != that.fsSize)
        return false;
    }

    boolean this_present_osArch = true && this.isSetOsArch();
    boolean that_present_osArch = true && that.isSetOsArch();
    if (this_present_osArch || that_present_osArch) {
      if (!(this_present_osArch && that_present_osArch))
        return false;
      if (!this.osArch.equals(that.osArch))
        return false;
    }

    boolean this_present_osName = true && this.isSetOsName();
    boolean that_present_osName = true && that.isSetOsName();
    if (this_present_osName || that_present_osName) {
      if (!(this_present_osName && that_present_osName))
        return false;
      if (!this.osName.equals(that.osName))
        return false;
    }

    boolean this_present_osDesc = true && this.isSetOsDesc();
    boolean that_present_osDesc = true && that.isSetOsDesc();
    if (this_present_osDesc || that_present_osDesc) {
      if (!(this_present_osDesc && that_present_osDesc))
        return false;
      if (!this.osDesc.equals(that.osDesc))
        return false;
    }

    boolean this_present_osVersion = true && this.isSetOsVersion();
    boolean that_present_osVersion = true && that.isSetOsVersion();
    if (this_present_osVersion || that_present_osVersion) {
      if (!(this_present_osVersion && that_present_osVersion))
        return false;
      if (!this.osVersion.equals(that.osVersion))
        return false;
    }

    boolean this_present_jvmName = true && this.isSetJvmName();
    boolean that_present_jvmName = true && that.isSetJvmName();
    if (this_present_jvmName || that_present_jvmName) {
      if (!(this_present_jvmName && that_present_jvmName))
        return false;
      if (!this.jvmName.equals(that.jvmName))
        return false;
    }

    boolean this_present_jvmVersion = true && this.isSetJvmVersion();
    boolean that_present_jvmVersion = true && that.isSetJvmVersion();
    if (this_present_jvmVersion || that_present_jvmVersion) {
      if (!(this_present_jvmVersion && that_present_jvmVersion))
        return false;
      if (!this.jvmVersion.equals(that.jvmVersion))
        return false;
    }

    boolean this_present_jvmMaxMem = true;
    boolean that_present_jvmMaxMem = true;
    if (this_present_jvmMaxMem || that_present_jvmMaxMem) {
      if (!(this_present_jvmMaxMem && that_present_jvmMaxMem))
        return false;
      if (this.jvmMaxMem != that.jvmMaxMem)
        return false;
    }

    boolean this_present_nodeType = true && this.isSetNodeType();
    boolean that_present_nodeType = true && that.isSetNodeType();
    if (this_present_nodeType || that_present_nodeType) {
      if (!(this_present_nodeType && that_present_nodeType))
        return false;
      if (!this.nodeType.equals(that.nodeType))
        return false;
    }

    boolean this_present_queueLimit = true;
    boolean that_present_queueLimit = true;
    if (this_present_queueLimit || that_present_queueLimit) {
      if (!(this_present_queueLimit && that_present_queueLimit))
        return false;
      if (this.queueLimit != that.queueLimit)
        return false;
    }

    boolean this_present_domain = true && this.isSetDomain();
    boolean that_present_domain = true && that.isSetDomain();
    if (this_present_domain || that_present_domain) {
      if (!(this_present_domain && that_present_domain))
        return false;
      if (!this.domain.equals(that.domain))
        return false;
    }

    boolean this_present_macAddress = true && this.isSetMacAddress();
    boolean that_present_macAddress = true && that.isSetMacAddress();
    if (this_present_macAddress || that_present_macAddress) {
      if (!(this_present_macAddress && that_present_macAddress))
        return false;
      if (!this.macAddress.equals(that.macAddress))
        return false;
    }

    boolean this_present_internetConnectivity = true;
    boolean that_present_internetConnectivity = true;
    if (this_present_internetConnectivity || that_present_internetConnectivity) {
      if (!(this_present_internetConnectivity && that_present_internetConnectivity))
        return false;
      if (this.internetConnectivity != that.internetConnectivity)
        return false;
    }

    boolean this_present_ipAddress = true && this.isSetIpAddress();
    boolean that_present_ipAddress = true && that.isSetIpAddress();
    if (this_present_ipAddress || that_present_ipAddress) {
      if (!(this_present_ipAddress && that_present_ipAddress))
        return false;
      if (!this.ipAddress.equals(that.ipAddress))
        return false;
    }

    boolean this_present_rpcPort = true;
    boolean that_present_rpcPort = true;
    if (this_present_rpcPort || that_present_rpcPort) {
      if (!(this_present_rpcPort && that_present_rpcPort))
        return false;
      if (this.rpcPort != that.rpcPort)
        return false;
    }

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_user = true && this.isSetUser();
    boolean that_present_user = true && that.isSetUser();
    if (this_present_user || that_present_user) {
      if (!(this_present_user && that_present_user))
        return false;
      if (!this.user.equals(that.user))
        return false;
    }

    boolean this_present_startTime = true && this.isSetStartTime();
    boolean that_present_startTime = true && that.isSetStartTime();
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (!this.startTime.equals(that.startTime))
        return false;
    }

    boolean this_present_procName = true && this.isSetProcName();
    boolean that_present_procName = true && that.isSetProcName();
    if (this_present_procName || that_present_procName) {
      if (!(this_present_procName && that_present_procName))
        return false;
      if (!this.procName.equals(that.procName))
        return false;
    }

    boolean this_present_programIdList = true && this.isSetProgramIdList();
    boolean that_present_programIdList = true && that.isSetProgramIdList();
    if (this_present_programIdList || that_present_programIdList) {
      if (!(this_present_programIdList && that_present_programIdList))
        return false;
      if (!this.programIdList.equals(that.programIdList))
        return false;
    }

    boolean this_present_cpuPerc = true;
    boolean that_present_cpuPerc = true;
    if (this_present_cpuPerc || that_present_cpuPerc) {
      if (!(this_present_cpuPerc && that_present_cpuPerc))
        return false;
      if (this.cpuPerc != that.cpuPerc)
        return false;
    }

    boolean this_present_memUsed = true;
    boolean that_present_memUsed = true;
    if (this_present_memUsed || that_present_memUsed) {
      if (!(this_present_memUsed && that_present_memUsed))
        return false;
      if (this.memUsed != that.memUsed)
        return false;
    }

    boolean this_present_jvmAllocMem = true;
    boolean that_present_jvmAllocMem = true;
    if (this_present_jvmAllocMem || that_present_jvmAllocMem) {
      if (!(this_present_jvmAllocMem && that_present_jvmAllocMem))
        return false;
      if (this.jvmAllocMem != that.jvmAllocMem)
        return false;
    }

    boolean this_present_jvmFreeMem = true;
    boolean that_present_jvmFreeMem = true;
    if (this_present_jvmFreeMem || that_present_jvmFreeMem) {
      if (!(this_present_jvmFreeMem && that_present_jvmFreeMem))
        return false;
      if (this.jvmFreeMem != that.jvmFreeMem)
        return false;
    }

    boolean this_present_fsAvail = true;
    boolean that_present_fsAvail = true;
    if (this_present_fsAvail || that_present_fsAvail) {
      if (!(this_present_fsAvail && that_present_fsAvail))
        return false;
      if (this.fsAvail != that.fsAvail)
        return false;
    }

    boolean this_present_fsUsed = true;
    boolean that_present_fsUsed = true;
    if (this_present_fsUsed || that_present_fsUsed) {
      if (!(this_present_fsUsed && that_present_fsUsed))
        return false;
      if (this.fsUsed != that.fsUsed)
        return false;
    }

    boolean this_present_fsUsedPerc = true;
    boolean that_present_fsUsedPerc = true;
    if (this_present_fsUsedPerc || that_present_fsUsedPerc) {
      if (!(this_present_fsUsedPerc && that_present_fsUsedPerc))
        return false;
      if (this.fsUsedPerc != that.fsUsedPerc)
        return false;
    }

    boolean this_present_queueNum = true;
    boolean that_present_queueNum = true;
    if (this_present_queueNum || that_present_queueNum) {
      if (!(this_present_queueNum && that_present_queueNum))
        return false;
      if (this.queueNum != that.queueNum)
        return false;
    }

    boolean this_present_configUpdated = true;
    boolean that_present_configUpdated = true;
    if (this_present_configUpdated || that_present_configUpdated) {
      if (!(this_present_configUpdated && that_present_configUpdated))
        return false;
      if (this.configUpdated != that.configUpdated)
        return false;
    }

    boolean this_present_payloadUpdated = true;
    boolean that_present_payloadUpdated = true;
    if (this_present_payloadUpdated || that_present_payloadUpdated) {
      if (!(this_present_payloadUpdated && that_present_payloadUpdated))
        return false;
      if (this.payloadUpdated != that.payloadUpdated)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(NodeInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    NodeInfo typedOther = (NodeInfo)other;

    lastComparison = Boolean.valueOf(isSetNodeId()).compareTo(typedOther.isSetNodeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeId, typedOther.nodeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpuVendor()).compareTo(typedOther.isSetCpuVendor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpuVendor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpuVendor, typedOther.cpuVendor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpuModel()).compareTo(typedOther.isSetCpuModel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpuModel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpuModel, typedOther.cpuModel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpuCores()).compareTo(typedOther.isSetCpuCores());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpuCores()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpuCores, typedOther.cpuCores);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpuMhz()).compareTo(typedOther.isSetCpuMhz());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpuMhz()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpuMhz, typedOther.cpuMhz);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemSize()).compareTo(typedOther.isSetMemSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memSize, typedOther.memSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFsName()).compareTo(typedOther.isSetFsName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFsName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fsName, typedOther.fsName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFsType()).compareTo(typedOther.isSetFsType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFsType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fsType, typedOther.fsType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFsFormat()).compareTo(typedOther.isSetFsFormat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFsFormat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fsFormat, typedOther.fsFormat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFsSize()).compareTo(typedOther.isSetFsSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFsSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fsSize, typedOther.fsSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOsArch()).compareTo(typedOther.isSetOsArch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOsArch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.osArch, typedOther.osArch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOsName()).compareTo(typedOther.isSetOsName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOsName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.osName, typedOther.osName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOsDesc()).compareTo(typedOther.isSetOsDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOsDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.osDesc, typedOther.osDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOsVersion()).compareTo(typedOther.isSetOsVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOsVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.osVersion, typedOther.osVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmName()).compareTo(typedOther.isSetJvmName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmName, typedOther.jvmName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmVersion()).compareTo(typedOther.isSetJvmVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmVersion, typedOther.jvmVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmMaxMem()).compareTo(typedOther.isSetJvmMaxMem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmMaxMem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmMaxMem, typedOther.jvmMaxMem);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNodeType()).compareTo(typedOther.isSetNodeType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeType, typedOther.nodeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueueLimit()).compareTo(typedOther.isSetQueueLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueueLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queueLimit, typedOther.queueLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDomain()).compareTo(typedOther.isSetDomain());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDomain()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.domain, typedOther.domain);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMacAddress()).compareTo(typedOther.isSetMacAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMacAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.macAddress, typedOther.macAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInternetConnectivity()).compareTo(typedOther.isSetInternetConnectivity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInternetConnectivity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.internetConnectivity, typedOther.internetConnectivity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIpAddress()).compareTo(typedOther.isSetIpAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIpAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipAddress, typedOther.ipAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRpcPort()).compareTo(typedOther.isSetRpcPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRpcPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rpcPort, typedOther.rpcPort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPid()).compareTo(typedOther.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, typedOther.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUser()).compareTo(typedOther.isSetUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, typedOther.user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(typedOther.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, typedOther.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProcName()).compareTo(typedOther.isSetProcName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProcName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.procName, typedOther.procName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProgramIdList()).compareTo(typedOther.isSetProgramIdList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProgramIdList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.programIdList, typedOther.programIdList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpuPerc()).compareTo(typedOther.isSetCpuPerc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpuPerc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpuPerc, typedOther.cpuPerc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemUsed()).compareTo(typedOther.isSetMemUsed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemUsed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memUsed, typedOther.memUsed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmAllocMem()).compareTo(typedOther.isSetJvmAllocMem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmAllocMem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmAllocMem, typedOther.jvmAllocMem);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmFreeMem()).compareTo(typedOther.isSetJvmFreeMem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmFreeMem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmFreeMem, typedOther.jvmFreeMem);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFsAvail()).compareTo(typedOther.isSetFsAvail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFsAvail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fsAvail, typedOther.fsAvail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFsUsed()).compareTo(typedOther.isSetFsUsed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFsUsed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fsUsed, typedOther.fsUsed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFsUsedPerc()).compareTo(typedOther.isSetFsUsedPerc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFsUsedPerc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fsUsedPerc, typedOther.fsUsedPerc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueueNum()).compareTo(typedOther.isSetQueueNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueueNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queueNum, typedOther.queueNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConfigUpdated()).compareTo(typedOther.isSetConfigUpdated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfigUpdated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configUpdated, typedOther.configUpdated);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayloadUpdated()).compareTo(typedOther.isSetPayloadUpdated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayloadUpdated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payloadUpdated, typedOther.payloadUpdated);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("NodeInfo(");
    boolean first = true;

    sb.append("nodeId:");
    if (this.nodeId == null) {
      sb.append("null");
    } else {
      sb.append(this.nodeId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cpuVendor:");
    if (this.cpuVendor == null) {
      sb.append("null");
    } else {
      sb.append(this.cpuVendor);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cpuModel:");
    if (this.cpuModel == null) {
      sb.append("null");
    } else {
      sb.append(this.cpuModel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cpuCores:");
    sb.append(this.cpuCores);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cpuMhz:");
    sb.append(this.cpuMhz);
    first = false;
    if (!first) sb.append(", ");
    sb.append("memSize:");
    sb.append(this.memSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fsName:");
    if (this.fsName == null) {
      sb.append("null");
    } else {
      sb.append(this.fsName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fsType:");
    if (this.fsType == null) {
      sb.append("null");
    } else {
      sb.append(this.fsType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fsFormat:");
    if (this.fsFormat == null) {
      sb.append("null");
    } else {
      sb.append(this.fsFormat);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fsSize:");
    sb.append(this.fsSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("osArch:");
    if (this.osArch == null) {
      sb.append("null");
    } else {
      sb.append(this.osArch);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("osName:");
    if (this.osName == null) {
      sb.append("null");
    } else {
      sb.append(this.osName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("osDesc:");
    if (this.osDesc == null) {
      sb.append("null");
    } else {
      sb.append(this.osDesc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("osVersion:");
    if (this.osVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.osVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmName:");
    if (this.jvmName == null) {
      sb.append("null");
    } else {
      sb.append(this.jvmName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmVersion:");
    if (this.jvmVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.jvmVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmMaxMem:");
    sb.append(this.jvmMaxMem);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nodeType:");
    if (this.nodeType == null) {
      sb.append("null");
    } else {
      sb.append(this.nodeType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("queueLimit:");
    sb.append(this.queueLimit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("domain:");
    if (this.domain == null) {
      sb.append("null");
    } else {
      sb.append(this.domain);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("macAddress:");
    if (this.macAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.macAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("internetConnectivity:");
    sb.append(this.internetConnectivity);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ipAddress:");
    if (this.ipAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.ipAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rpcPort:");
    sb.append(this.rpcPort);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("user:");
    if (this.user == null) {
      sb.append("null");
    } else {
      sb.append(this.user);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime:");
    if (this.startTime == null) {
      sb.append("null");
    } else {
      sb.append(this.startTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("procName:");
    if (this.procName == null) {
      sb.append("null");
    } else {
      sb.append(this.procName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("programIdList:");
    if (this.programIdList == null) {
      sb.append("null");
    } else {
      sb.append(this.programIdList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cpuPerc:");
    sb.append(this.cpuPerc);
    first = false;
    if (!first) sb.append(", ");
    sb.append("memUsed:");
    sb.append(this.memUsed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmAllocMem:");
    sb.append(this.jvmAllocMem);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmFreeMem:");
    sb.append(this.jvmFreeMem);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fsAvail:");
    sb.append(this.fsAvail);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fsUsed:");
    sb.append(this.fsUsed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fsUsedPerc:");
    sb.append(this.fsUsedPerc);
    first = false;
    if (!first) sb.append(", ");
    sb.append("queueNum:");
    sb.append(this.queueNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("configUpdated:");
    sb.append(this.configUpdated);
    first = false;
    if (!first) sb.append(", ");
    sb.append("payloadUpdated:");
    sb.append(this.payloadUpdated);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (nodeId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'nodeId' was not present! Struct: " + toString());
    }
    if (cpuVendor == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'cpuVendor' was not present! Struct: " + toString());
    }
    if (cpuModel == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'cpuModel' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'cpuCores' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'cpuMhz' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'memSize' because it's a primitive and you chose the non-beans generator.
    if (fsName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fsName' was not present! Struct: " + toString());
    }
    if (fsType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fsType' was not present! Struct: " + toString());
    }
    if (fsFormat == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fsFormat' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'fsSize' because it's a primitive and you chose the non-beans generator.
    if (osArch == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'osArch' was not present! Struct: " + toString());
    }
    if (osName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'osName' was not present! Struct: " + toString());
    }
    if (osDesc == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'osDesc' was not present! Struct: " + toString());
    }
    if (osVersion == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'osVersion' was not present! Struct: " + toString());
    }
    if (jvmName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'jvmName' was not present! Struct: " + toString());
    }
    if (jvmVersion == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'jvmVersion' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'jvmMaxMem' because it's a primitive and you chose the non-beans generator.
    if (nodeType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'nodeType' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'queueLimit' because it's a primitive and you chose the non-beans generator.
    if (domain == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'domain' was not present! Struct: " + toString());
    }
    if (macAddress == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'macAddress' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'internetConnectivity' because it's a primitive and you chose the non-beans generator.
    if (ipAddress == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ipAddress' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'rpcPort' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'pid' because it's a primitive and you chose the non-beans generator.
    if (user == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'user' was not present! Struct: " + toString());
    }
    if (startTime == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'startTime' was not present! Struct: " + toString());
    }
    if (procName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'procName' was not present! Struct: " + toString());
    }
    if (programIdList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'programIdList' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'cpuPerc' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'memUsed' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'jvmAllocMem' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'jvmFreeMem' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'fsAvail' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'fsUsed' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'fsUsedPerc' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'queueNum' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'configUpdated' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'payloadUpdated' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NodeInfoStandardSchemeFactory implements SchemeFactory {
    public NodeInfoStandardScheme getScheme() {
      return new NodeInfoStandardScheme();
    }
  }

  private static class NodeInfoStandardScheme extends StandardScheme<NodeInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NodeInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NODE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nodeId = iprot.readString();
              struct.setNodeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CPU_VENDOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cpuVendor = iprot.readString();
              struct.setCpuVendorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CPU_MODEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cpuModel = iprot.readString();
              struct.setCpuModelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CPU_CORES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cpuCores = iprot.readI32();
              struct.setCpuCoresIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CPU_MHZ
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cpuMhz = iprot.readI32();
              struct.setCpuMhzIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MEM_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.memSize = iprot.readI32();
              struct.setMemSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fsName = iprot.readString();
              struct.setFsNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fsType = iprot.readString();
              struct.setFsTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FS_FORMAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fsFormat = iprot.readString();
              struct.setFsFormatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // FS_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fsSize = iprot.readI32();
              struct.setFsSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // OS_ARCH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.osArch = iprot.readString();
              struct.setOsArchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // OS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.osName = iprot.readString();
              struct.setOsNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // OS_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.osDesc = iprot.readString();
              struct.setOsDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // OS_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.osVersion = iprot.readString();
              struct.setOsVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // JVM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jvmName = iprot.readString();
              struct.setJvmNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // JVM_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jvmVersion = iprot.readString();
              struct.setJvmVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // JVM_MAX_MEM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.jvmMaxMem = iprot.readI32();
              struct.setJvmMaxMemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // NODE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nodeType = NodeType.findByValue(iprot.readI32());
              struct.setNodeTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // QUEUE_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.queueLimit = iprot.readI32();
              struct.setQueueLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // DOMAIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.domain = iprot.readString();
              struct.setDomainIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // MAC_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.macAddress = iprot.readString();
              struct.setMacAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // INTERNET_CONNECTIVITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.internetConnectivity = iprot.readI32();
              struct.setInternetConnectivityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // IP_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ipAddress = iprot.readString();
              struct.setIpAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // RPC_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rpcPort = iprot.readI32();
              struct.setRpcPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user = iprot.readString();
              struct.setUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startTime = iprot.readString();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // PROC_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.procName = iprot.readString();
              struct.setProcNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // PROGRAM_ID_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.programIdList = new ArrayList<Long>(_list24.size);
                for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                {
                  long _elem26; // required
                  _elem26 = iprot.readI64();
                  struct.programIdList.add(_elem26);
                }
                iprot.readListEnd();
              }
              struct.setProgramIdListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // CPU_PERC
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cpuPerc = iprot.readDouble();
              struct.setCpuPercIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // MEM_USED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.memUsed = iprot.readI32();
              struct.setMemUsedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // JVM_ALLOC_MEM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.jvmAllocMem = iprot.readI32();
              struct.setJvmAllocMemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // JVM_FREE_MEM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.jvmFreeMem = iprot.readI32();
              struct.setJvmFreeMemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // FS_AVAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fsAvail = iprot.readI32();
              struct.setFsAvailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // FS_USED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fsUsed = iprot.readI32();
              struct.setFsUsedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // FS_USED_PERC
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fsUsedPerc = iprot.readDouble();
              struct.setFsUsedPercIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // QUEUE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.queueNum = iprot.readI32();
              struct.setQueueNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // CONFIG_UPDATED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.configUpdated = iprot.readI64();
              struct.setConfigUpdatedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // PAYLOAD_UPDATED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.payloadUpdated = iprot.readI64();
              struct.setPayloadUpdatedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetCpuCores()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'cpuCores' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCpuMhz()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'cpuMhz' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMemSize()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'memSize' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetFsSize()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'fsSize' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetJvmMaxMem()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'jvmMaxMem' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetQueueLimit()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'queueLimit' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetInternetConnectivity()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'internetConnectivity' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetRpcPort()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'rpcPort' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPid()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'pid' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCpuPerc()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'cpuPerc' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMemUsed()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'memUsed' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetJvmAllocMem()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'jvmAllocMem' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetJvmFreeMem()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'jvmFreeMem' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetFsAvail()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'fsAvail' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetFsUsed()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'fsUsed' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetFsUsedPerc()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'fsUsedPerc' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetQueueNum()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'queueNum' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetConfigUpdated()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'configUpdated' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPayloadUpdated()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'payloadUpdated' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NodeInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.nodeId != null) {
        oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
        oprot.writeString(struct.nodeId);
        oprot.writeFieldEnd();
      }
      if (struct.cpuVendor != null) {
        oprot.writeFieldBegin(CPU_VENDOR_FIELD_DESC);
        oprot.writeString(struct.cpuVendor);
        oprot.writeFieldEnd();
      }
      if (struct.cpuModel != null) {
        oprot.writeFieldBegin(CPU_MODEL_FIELD_DESC);
        oprot.writeString(struct.cpuModel);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CPU_CORES_FIELD_DESC);
      oprot.writeI32(struct.cpuCores);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CPU_MHZ_FIELD_DESC);
      oprot.writeI32(struct.cpuMhz);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MEM_SIZE_FIELD_DESC);
      oprot.writeI32(struct.memSize);
      oprot.writeFieldEnd();
      if (struct.fsName != null) {
        oprot.writeFieldBegin(FS_NAME_FIELD_DESC);
        oprot.writeString(struct.fsName);
        oprot.writeFieldEnd();
      }
      if (struct.fsType != null) {
        oprot.writeFieldBegin(FS_TYPE_FIELD_DESC);
        oprot.writeString(struct.fsType);
        oprot.writeFieldEnd();
      }
      if (struct.fsFormat != null) {
        oprot.writeFieldBegin(FS_FORMAT_FIELD_DESC);
        oprot.writeString(struct.fsFormat);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FS_SIZE_FIELD_DESC);
      oprot.writeI32(struct.fsSize);
      oprot.writeFieldEnd();
      if (struct.osArch != null) {
        oprot.writeFieldBegin(OS_ARCH_FIELD_DESC);
        oprot.writeString(struct.osArch);
        oprot.writeFieldEnd();
      }
      if (struct.osName != null) {
        oprot.writeFieldBegin(OS_NAME_FIELD_DESC);
        oprot.writeString(struct.osName);
        oprot.writeFieldEnd();
      }
      if (struct.osDesc != null) {
        oprot.writeFieldBegin(OS_DESC_FIELD_DESC);
        oprot.writeString(struct.osDesc);
        oprot.writeFieldEnd();
      }
      if (struct.osVersion != null) {
        oprot.writeFieldBegin(OS_VERSION_FIELD_DESC);
        oprot.writeString(struct.osVersion);
        oprot.writeFieldEnd();
      }
      if (struct.jvmName != null) {
        oprot.writeFieldBegin(JVM_NAME_FIELD_DESC);
        oprot.writeString(struct.jvmName);
        oprot.writeFieldEnd();
      }
      if (struct.jvmVersion != null) {
        oprot.writeFieldBegin(JVM_VERSION_FIELD_DESC);
        oprot.writeString(struct.jvmVersion);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(JVM_MAX_MEM_FIELD_DESC);
      oprot.writeI32(struct.jvmMaxMem);
      oprot.writeFieldEnd();
      if (struct.nodeType != null) {
        oprot.writeFieldBegin(NODE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.nodeType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(QUEUE_LIMIT_FIELD_DESC);
      oprot.writeI32(struct.queueLimit);
      oprot.writeFieldEnd();
      if (struct.domain != null) {
        oprot.writeFieldBegin(DOMAIN_FIELD_DESC);
        oprot.writeString(struct.domain);
        oprot.writeFieldEnd();
      }
      if (struct.macAddress != null) {
        oprot.writeFieldBegin(MAC_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.macAddress);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INTERNET_CONNECTIVITY_FIELD_DESC);
      oprot.writeI32(struct.internetConnectivity);
      oprot.writeFieldEnd();
      if (struct.ipAddress != null) {
        oprot.writeFieldBegin(IP_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.ipAddress);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RPC_PORT_FIELD_DESC);
      oprot.writeI32(struct.rpcPort);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.user != null) {
        oprot.writeFieldBegin(USER_FIELD_DESC);
        oprot.writeString(struct.user);
        oprot.writeFieldEnd();
      }
      if (struct.startTime != null) {
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeString(struct.startTime);
        oprot.writeFieldEnd();
      }
      if (struct.procName != null) {
        oprot.writeFieldBegin(PROC_NAME_FIELD_DESC);
        oprot.writeString(struct.procName);
        oprot.writeFieldEnd();
      }
      if (struct.programIdList != null) {
        oprot.writeFieldBegin(PROGRAM_ID_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.programIdList.size()));
          for (long _iter27 : struct.programIdList)
          {
            oprot.writeI64(_iter27);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CPU_PERC_FIELD_DESC);
      oprot.writeDouble(struct.cpuPerc);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MEM_USED_FIELD_DESC);
      oprot.writeI32(struct.memUsed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JVM_ALLOC_MEM_FIELD_DESC);
      oprot.writeI32(struct.jvmAllocMem);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JVM_FREE_MEM_FIELD_DESC);
      oprot.writeI32(struct.jvmFreeMem);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FS_AVAIL_FIELD_DESC);
      oprot.writeI32(struct.fsAvail);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FS_USED_FIELD_DESC);
      oprot.writeI32(struct.fsUsed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FS_USED_PERC_FIELD_DESC);
      oprot.writeDouble(struct.fsUsedPerc);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(QUEUE_NUM_FIELD_DESC);
      oprot.writeI32(struct.queueNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONFIG_UPDATED_FIELD_DESC);
      oprot.writeI64(struct.configUpdated);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAYLOAD_UPDATED_FIELD_DESC);
      oprot.writeI64(struct.payloadUpdated);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NodeInfoTupleSchemeFactory implements SchemeFactory {
    public NodeInfoTupleScheme getScheme() {
      return new NodeInfoTupleScheme();
    }
  }

  private static class NodeInfoTupleScheme extends TupleScheme<NodeInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NodeInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.nodeId);
      oprot.writeString(struct.cpuVendor);
      oprot.writeString(struct.cpuModel);
      oprot.writeI32(struct.cpuCores);
      oprot.writeI32(struct.cpuMhz);
      oprot.writeI32(struct.memSize);
      oprot.writeString(struct.fsName);
      oprot.writeString(struct.fsType);
      oprot.writeString(struct.fsFormat);
      oprot.writeI32(struct.fsSize);
      oprot.writeString(struct.osArch);
      oprot.writeString(struct.osName);
      oprot.writeString(struct.osDesc);
      oprot.writeString(struct.osVersion);
      oprot.writeString(struct.jvmName);
      oprot.writeString(struct.jvmVersion);
      oprot.writeI32(struct.jvmMaxMem);
      oprot.writeI32(struct.nodeType.getValue());
      oprot.writeI32(struct.queueLimit);
      oprot.writeString(struct.domain);
      oprot.writeString(struct.macAddress);
      oprot.writeI32(struct.internetConnectivity);
      oprot.writeString(struct.ipAddress);
      oprot.writeI32(struct.rpcPort);
      oprot.writeI32(struct.pid);
      oprot.writeString(struct.user);
      oprot.writeString(struct.startTime);
      oprot.writeString(struct.procName);
      {
        oprot.writeI32(struct.programIdList.size());
        for (long _iter28 : struct.programIdList)
        {
          oprot.writeI64(_iter28);
        }
      }
      oprot.writeDouble(struct.cpuPerc);
      oprot.writeI32(struct.memUsed);
      oprot.writeI32(struct.jvmAllocMem);
      oprot.writeI32(struct.jvmFreeMem);
      oprot.writeI32(struct.fsAvail);
      oprot.writeI32(struct.fsUsed);
      oprot.writeDouble(struct.fsUsedPerc);
      oprot.writeI32(struct.queueNum);
      oprot.writeI64(struct.configUpdated);
      oprot.writeI64(struct.payloadUpdated);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NodeInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.nodeId = iprot.readString();
      struct.setNodeIdIsSet(true);
      struct.cpuVendor = iprot.readString();
      struct.setCpuVendorIsSet(true);
      struct.cpuModel = iprot.readString();
      struct.setCpuModelIsSet(true);
      struct.cpuCores = iprot.readI32();
      struct.setCpuCoresIsSet(true);
      struct.cpuMhz = iprot.readI32();
      struct.setCpuMhzIsSet(true);
      struct.memSize = iprot.readI32();
      struct.setMemSizeIsSet(true);
      struct.fsName = iprot.readString();
      struct.setFsNameIsSet(true);
      struct.fsType = iprot.readString();
      struct.setFsTypeIsSet(true);
      struct.fsFormat = iprot.readString();
      struct.setFsFormatIsSet(true);
      struct.fsSize = iprot.readI32();
      struct.setFsSizeIsSet(true);
      struct.osArch = iprot.readString();
      struct.setOsArchIsSet(true);
      struct.osName = iprot.readString();
      struct.setOsNameIsSet(true);
      struct.osDesc = iprot.readString();
      struct.setOsDescIsSet(true);
      struct.osVersion = iprot.readString();
      struct.setOsVersionIsSet(true);
      struct.jvmName = iprot.readString();
      struct.setJvmNameIsSet(true);
      struct.jvmVersion = iprot.readString();
      struct.setJvmVersionIsSet(true);
      struct.jvmMaxMem = iprot.readI32();
      struct.setJvmMaxMemIsSet(true);
      struct.nodeType = NodeType.findByValue(iprot.readI32());
      struct.setNodeTypeIsSet(true);
      struct.queueLimit = iprot.readI32();
      struct.setQueueLimitIsSet(true);
      struct.domain = iprot.readString();
      struct.setDomainIsSet(true);
      struct.macAddress = iprot.readString();
      struct.setMacAddressIsSet(true);
      struct.internetConnectivity = iprot.readI32();
      struct.setInternetConnectivityIsSet(true);
      struct.ipAddress = iprot.readString();
      struct.setIpAddressIsSet(true);
      struct.rpcPort = iprot.readI32();
      struct.setRpcPortIsSet(true);
      struct.pid = iprot.readI32();
      struct.setPidIsSet(true);
      struct.user = iprot.readString();
      struct.setUserIsSet(true);
      struct.startTime = iprot.readString();
      struct.setStartTimeIsSet(true);
      struct.procName = iprot.readString();
      struct.setProcNameIsSet(true);
      {
        org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
        struct.programIdList = new ArrayList<Long>(_list29.size);
        for (int _i30 = 0; _i30 < _list29.size; ++_i30)
        {
          long _elem31; // required
          _elem31 = iprot.readI64();
          struct.programIdList.add(_elem31);
        }
      }
      struct.setProgramIdListIsSet(true);
      struct.cpuPerc = iprot.readDouble();
      struct.setCpuPercIsSet(true);
      struct.memUsed = iprot.readI32();
      struct.setMemUsedIsSet(true);
      struct.jvmAllocMem = iprot.readI32();
      struct.setJvmAllocMemIsSet(true);
      struct.jvmFreeMem = iprot.readI32();
      struct.setJvmFreeMemIsSet(true);
      struct.fsAvail = iprot.readI32();
      struct.setFsAvailIsSet(true);
      struct.fsUsed = iprot.readI32();
      struct.setFsUsedIsSet(true);
      struct.fsUsedPerc = iprot.readDouble();
      struct.setFsUsedPercIsSet(true);
      struct.queueNum = iprot.readI32();
      struct.setQueueNumIsSet(true);
      struct.configUpdated = iprot.readI64();
      struct.setConfigUpdatedIsSet(true);
      struct.payloadUpdated = iprot.readI64();
      struct.setPayloadUpdatedIsSet(true);
    }
  }

}

