/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.softsec.tase.common.rpc.service.node;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ProgramTrackerService {

  /**
   * Program Service response for RPCs from all programs
   */
  public interface Iface {

    /**
     * upload result from program to its node manager
     * @param	jobLifecycle
     * @param	resultType
     * @param	content
     * @param	identifier for appId or jobId
     * @return	succeed or not
     * 
     * @param appType
     * @param jobLifecycle
     * @param resultType
     * @param content
     * @param taskId
     * @param identifier
     */
    public int transferResult(com.softsec.tase.common.rpc.domain.app.AppType appType, com.softsec.tase.common.rpc.domain.job.JobLifecycle jobLifecycle, com.softsec.tase.common.rpc.domain.job.JobPhase resultType, ByteBuffer content, long taskId, String identifier) throws com.softsec.tase.common.rpc.exception.InvalidRequestException, com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException;

    /**
     * fetch app file from ftp
     * @param	sourceFileName fileName
     * @param	destinationFilePath
     * @return	0 if succeed, <0 if failed
     * 
     * @param repository
     * @param sourceFileName
     * @param destinationFilePath
     */
    public int fetchApp(String repository, String sourceFileName, String destinationFilePath) throws com.softsec.tase.common.rpc.exception.InvalidRequestException, com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void transferResult(com.softsec.tase.common.rpc.domain.app.AppType appType, com.softsec.tase.common.rpc.domain.job.JobLifecycle jobLifecycle, com.softsec.tase.common.rpc.domain.job.JobPhase resultType, ByteBuffer content, long taskId, String identifier, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.transferResult_call> resultHandler) throws org.apache.thrift.TException;

    public void fetchApp(String repository, String sourceFileName, String destinationFilePath, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.fetchApp_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public int transferResult(com.softsec.tase.common.rpc.domain.app.AppType appType, com.softsec.tase.common.rpc.domain.job.JobLifecycle jobLifecycle, com.softsec.tase.common.rpc.domain.job.JobPhase resultType, ByteBuffer content, long taskId, String identifier) throws com.softsec.tase.common.rpc.exception.InvalidRequestException, com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException
    {
      send_transferResult(appType, jobLifecycle, resultType, content, taskId, identifier);
      return recv_transferResult();
    }

    public void send_transferResult(com.softsec.tase.common.rpc.domain.app.AppType appType, com.softsec.tase.common.rpc.domain.job.JobLifecycle jobLifecycle, com.softsec.tase.common.rpc.domain.job.JobPhase resultType, ByteBuffer content, long taskId, String identifier) throws org.apache.thrift.TException
    {
      transferResult_args args = new transferResult_args();
      args.setAppType(appType);
      args.setJobLifecycle(jobLifecycle);
      args.setResultType(resultType);
      args.setContent(content);
      args.setTaskId(taskId);
      args.setIdentifier(identifier);
      sendBase("transferResult", args);
    }

    public int recv_transferResult() throws com.softsec.tase.common.rpc.exception.InvalidRequestException, com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException
    {
      transferResult_result result = new transferResult_result();
      receiveBase(result, "transferResult");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      if (result.te != null) {
        throw result.te;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "transferResult failed: unknown result");
    }

    public int fetchApp(String repository, String sourceFileName, String destinationFilePath) throws com.softsec.tase.common.rpc.exception.InvalidRequestException, com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException
    {
      send_fetchApp(repository, sourceFileName, destinationFilePath);
      return recv_fetchApp();
    }

    public void send_fetchApp(String repository, String sourceFileName, String destinationFilePath) throws org.apache.thrift.TException
    {
      fetchApp_args args = new fetchApp_args();
      args.setRepository(repository);
      args.setSourceFileName(sourceFileName);
      args.setDestinationFilePath(destinationFilePath);
      sendBase("fetchApp", args);
    }

    public int recv_fetchApp() throws com.softsec.tase.common.rpc.exception.InvalidRequestException, com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException
    {
      fetchApp_result result = new fetchApp_result();
      receiveBase(result, "fetchApp");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      if (result.te != null) {
        throw result.te;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "fetchApp failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void transferResult(com.softsec.tase.common.rpc.domain.app.AppType appType, com.softsec.tase.common.rpc.domain.job.JobLifecycle jobLifecycle, com.softsec.tase.common.rpc.domain.job.JobPhase resultType, ByteBuffer content, long taskId, String identifier, org.apache.thrift.async.AsyncMethodCallback<transferResult_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      transferResult_call method_call = new transferResult_call(appType, jobLifecycle, resultType, content, taskId, identifier, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class transferResult_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.softsec.tase.common.rpc.domain.app.AppType appType;
      private com.softsec.tase.common.rpc.domain.job.JobLifecycle jobLifecycle;
      private com.softsec.tase.common.rpc.domain.job.JobPhase resultType;
      private ByteBuffer content;
      private long taskId;
      private String identifier;
      public transferResult_call(com.softsec.tase.common.rpc.domain.app.AppType appType, com.softsec.tase.common.rpc.domain.job.JobLifecycle jobLifecycle, com.softsec.tase.common.rpc.domain.job.JobPhase resultType, ByteBuffer content, long taskId, String identifier, org.apache.thrift.async.AsyncMethodCallback<transferResult_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appType = appType;
        this.jobLifecycle = jobLifecycle;
        this.resultType = resultType;
        this.content = content;
        this.taskId = taskId;
        this.identifier = identifier;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("transferResult", org.apache.thrift.protocol.TMessageType.CALL, 0));
        transferResult_args args = new transferResult_args();
        args.setAppType(appType);
        args.setJobLifecycle(jobLifecycle);
        args.setResultType(resultType);
        args.setContent(content);
        args.setTaskId(taskId);
        args.setIdentifier(identifier);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.softsec.tase.common.rpc.exception.InvalidRequestException, com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_transferResult();
      }
    }

    public void fetchApp(String repository, String sourceFileName, String destinationFilePath, org.apache.thrift.async.AsyncMethodCallback<fetchApp_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      fetchApp_call method_call = new fetchApp_call(repository, sourceFileName, destinationFilePath, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class fetchApp_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String repository;
      private String sourceFileName;
      private String destinationFilePath;
      public fetchApp_call(String repository, String sourceFileName, String destinationFilePath, org.apache.thrift.async.AsyncMethodCallback<fetchApp_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.repository = repository;
        this.sourceFileName = sourceFileName;
        this.destinationFilePath = destinationFilePath;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fetchApp", org.apache.thrift.protocol.TMessageType.CALL, 0));
        fetchApp_args args = new fetchApp_args();
        args.setRepository(repository);
        args.setSourceFileName(sourceFileName);
        args.setDestinationFilePath(destinationFilePath);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.softsec.tase.common.rpc.exception.InvalidRequestException, com.softsec.tase.common.rpc.exception.UnavailableException, com.softsec.tase.common.rpc.exception.TimeoutException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_fetchApp();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("transferResult", new transferResult());
      processMap.put("fetchApp", new fetchApp());
      return processMap;
    }

    public static class transferResult<I extends Iface> extends org.apache.thrift.ProcessFunction<I, transferResult_args> {
      public transferResult() {
        super("transferResult");
      }

      public transferResult_args getEmptyArgsInstance() {
        return new transferResult_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public transferResult_result getResult(I iface, transferResult_args args) throws org.apache.thrift.TException {
        transferResult_result result = new transferResult_result();
        try {
          result.success = iface.transferResult(args.appType, args.jobLifecycle, args.resultType, args.content, args.taskId, args.identifier);
          result.setSuccessIsSet(true);
        } catch (com.softsec.tase.common.rpc.exception.InvalidRequestException ire) {
          result.ire = ire;
        } catch (com.softsec.tase.common.rpc.exception.UnavailableException ue) {
          result.ue = ue;
        } catch (com.softsec.tase.common.rpc.exception.TimeoutException te) {
          result.te = te;
        }
        return result;
      }
    }

    public static class fetchApp<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fetchApp_args> {
      public fetchApp() {
        super("fetchApp");
      }

      public fetchApp_args getEmptyArgsInstance() {
        return new fetchApp_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public fetchApp_result getResult(I iface, fetchApp_args args) throws org.apache.thrift.TException {
        fetchApp_result result = new fetchApp_result();
        try {
          result.success = iface.fetchApp(args.repository, args.sourceFileName, args.destinationFilePath);
          result.setSuccessIsSet(true);
        } catch (com.softsec.tase.common.rpc.exception.InvalidRequestException ire) {
          result.ire = ire;
        } catch (com.softsec.tase.common.rpc.exception.UnavailableException ue) {
          result.ue = ue;
        } catch (com.softsec.tase.common.rpc.exception.TimeoutException te) {
          result.te = te;
        }
        return result;
      }
    }

  }

  public static class transferResult_args implements org.apache.thrift.TBase<transferResult_args, transferResult_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("transferResult_args");

    private static final org.apache.thrift.protocol.TField APP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("appType", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField JOB_LIFECYCLE_FIELD_DESC = new org.apache.thrift.protocol.TField("jobLifecycle", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField RESULT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("resultType", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskId", org.apache.thrift.protocol.TType.I64, (short)5);
    private static final org.apache.thrift.protocol.TField IDENTIFIER_FIELD_DESC = new org.apache.thrift.protocol.TField("identifier", org.apache.thrift.protocol.TType.STRING, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new transferResult_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new transferResult_argsTupleSchemeFactory());
    }

    /**
     * 
     * @see com.softsec.tase.common.rpc.domain.app.AppType
     */
    public com.softsec.tase.common.rpc.domain.app.AppType appType; // required
    /**
     * 
     * @see com.softsec.tase.common.rpc.domain.job.JobLifecycle
     */
    public com.softsec.tase.common.rpc.domain.job.JobLifecycle jobLifecycle; // required
    /**
     * 
     * @see com.softsec.tase.common.rpc.domain.job.JobPhase
     */
    public com.softsec.tase.common.rpc.domain.job.JobPhase resultType; // required
    public ByteBuffer content; // required
    public long taskId; // required
    public String identifier; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see com.softsec.tase.common.rpc.domain.app.AppType
       */
      APP_TYPE((short)1, "appType"),
      /**
       * 
       * @see com.softsec.tase.common.rpc.domain.job.JobLifecycle
       */
      JOB_LIFECYCLE((short)2, "jobLifecycle"),
      /**
       * 
       * @see com.softsec.tase.common.rpc.domain.job.JobPhase
       */
      RESULT_TYPE((short)3, "resultType"),
      CONTENT((short)4, "content"),
      TASK_ID((short)5, "taskId"),
      IDENTIFIER((short)6, "identifier");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_TYPE
            return APP_TYPE;
          case 2: // JOB_LIFECYCLE
            return JOB_LIFECYCLE;
          case 3: // RESULT_TYPE
            return RESULT_TYPE;
          case 4: // CONTENT
            return CONTENT;
          case 5: // TASK_ID
            return TASK_ID;
          case 6: // IDENTIFIER
            return IDENTIFIER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TASKID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("appType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.softsec.tase.common.rpc.domain.app.AppType.class)));
      tmpMap.put(_Fields.JOB_LIFECYCLE, new org.apache.thrift.meta_data.FieldMetaData("jobLifecycle", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.softsec.tase.common.rpc.domain.job.JobLifecycle.class)));
      tmpMap.put(_Fields.RESULT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("resultType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.softsec.tase.common.rpc.domain.job.JobPhase.class)));
      tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.IDENTIFIER, new org.apache.thrift.meta_data.FieldMetaData("identifier", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(transferResult_args.class, metaDataMap);
    }

    public transferResult_args() {
    }

    public transferResult_args(
      com.softsec.tase.common.rpc.domain.app.AppType appType,
      com.softsec.tase.common.rpc.domain.job.JobLifecycle jobLifecycle,
      com.softsec.tase.common.rpc.domain.job.JobPhase resultType,
      ByteBuffer content,
      long taskId,
      String identifier)
    {
      this();
      this.appType = appType;
      this.jobLifecycle = jobLifecycle;
      this.resultType = resultType;
      this.content = content;
      this.taskId = taskId;
      setTaskIdIsSet(true);
      this.identifier = identifier;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public transferResult_args(transferResult_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAppType()) {
        this.appType = other.appType;
      }
      if (other.isSetJobLifecycle()) {
        this.jobLifecycle = other.jobLifecycle;
      }
      if (other.isSetResultType()) {
        this.resultType = other.resultType;
      }
      if (other.isSetContent()) {
        this.content = org.apache.thrift.TBaseHelper.copyBinary(other.content);
;
      }
      this.taskId = other.taskId;
      if (other.isSetIdentifier()) {
        this.identifier = other.identifier;
      }
    }

    public transferResult_args deepCopy() {
      return new transferResult_args(this);
    }

    @Override
    public void clear() {
      this.appType = null;
      this.jobLifecycle = null;
      this.resultType = null;
      this.content = null;
      setTaskIdIsSet(false);
      this.taskId = 0;
      this.identifier = null;
    }

    /**
     * 
     * @see com.softsec.tase.common.rpc.domain.app.AppType
     */
    public com.softsec.tase.common.rpc.domain.app.AppType getAppType() {
      return this.appType;
    }

    /**
     * 
     * @see com.softsec.tase.common.rpc.domain.app.AppType
     */
    public transferResult_args setAppType(com.softsec.tase.common.rpc.domain.app.AppType appType) {
      this.appType = appType;
      return this;
    }

    public void unsetAppType() {
      this.appType = null;
    }

    /** Returns true if field appType is set (has been assigned a value) and false otherwise */
    public boolean isSetAppType() {
      return this.appType != null;
    }

    public void setAppTypeIsSet(boolean value) {
      if (!value) {
        this.appType = null;
      }
    }

    /**
     * 
     * @see com.softsec.tase.common.rpc.domain.job.JobLifecycle
     */
    public com.softsec.tase.common.rpc.domain.job.JobLifecycle getJobLifecycle() {
      return this.jobLifecycle;
    }

    /**
     * 
     * @see com.softsec.tase.common.rpc.domain.job.JobLifecycle
     */
    public transferResult_args setJobLifecycle(com.softsec.tase.common.rpc.domain.job.JobLifecycle jobLifecycle) {
      this.jobLifecycle = jobLifecycle;
      return this;
    }

    public void unsetJobLifecycle() {
      this.jobLifecycle = null;
    }

    /** Returns true if field jobLifecycle is set (has been assigned a value) and false otherwise */
    public boolean isSetJobLifecycle() {
      return this.jobLifecycle != null;
    }

    public void setJobLifecycleIsSet(boolean value) {
      if (!value) {
        this.jobLifecycle = null;
      }
    }

    /**
     * 
     * @see com.softsec.tase.common.rpc.domain.job.JobPhase
     */
    public com.softsec.tase.common.rpc.domain.job.JobPhase getResultType() {
      return this.resultType;
    }

    /**
     * 
     * @see com.softsec.tase.common.rpc.domain.job.JobPhase
     */
    public transferResult_args setResultType(com.softsec.tase.common.rpc.domain.job.JobPhase resultType) {
      this.resultType = resultType;
      return this;
    }

    public void unsetResultType() {
      this.resultType = null;
    }

    /** Returns true if field resultType is set (has been assigned a value) and false otherwise */
    public boolean isSetResultType() {
      return this.resultType != null;
    }

    public void setResultTypeIsSet(boolean value) {
      if (!value) {
        this.resultType = null;
      }
    }

    public byte[] getContent() {
      setContent(org.apache.thrift.TBaseHelper.rightSize(content));
      return content == null ? null : content.array();
    }

    public ByteBuffer bufferForContent() {
      return content;
    }

    public transferResult_args setContent(byte[] content) {
      setContent(content == null ? (ByteBuffer)null : ByteBuffer.wrap(content));
      return this;
    }

    public transferResult_args setContent(ByteBuffer content) {
      this.content = content;
      return this;
    }

    public void unsetContent() {
      this.content = null;
    }

    /** Returns true if field content is set (has been assigned a value) and false otherwise */
    public boolean isSetContent() {
      return this.content != null;
    }

    public void setContentIsSet(boolean value) {
      if (!value) {
        this.content = null;
      }
    }

    public long getTaskId() {
      return this.taskId;
    }

    public transferResult_args setTaskId(long taskId) {
      this.taskId = taskId;
      setTaskIdIsSet(true);
      return this;
    }

    public void unsetTaskId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TASKID_ISSET_ID);
    }

    /** Returns true if field taskId is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskId() {
      return EncodingUtils.testBit(__isset_bitfield, __TASKID_ISSET_ID);
    }

    public void setTaskIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TASKID_ISSET_ID, value);
    }

    public String getIdentifier() {
      return this.identifier;
    }

    public transferResult_args setIdentifier(String identifier) {
      this.identifier = identifier;
      return this;
    }

    public void unsetIdentifier() {
      this.identifier = null;
    }

    /** Returns true if field identifier is set (has been assigned a value) and false otherwise */
    public boolean isSetIdentifier() {
      return this.identifier != null;
    }

    public void setIdentifierIsSet(boolean value) {
      if (!value) {
        this.identifier = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_TYPE:
        if (value == null) {
          unsetAppType();
        } else {
          setAppType((com.softsec.tase.common.rpc.domain.app.AppType)value);
        }
        break;

      case JOB_LIFECYCLE:
        if (value == null) {
          unsetJobLifecycle();
        } else {
          setJobLifecycle((com.softsec.tase.common.rpc.domain.job.JobLifecycle)value);
        }
        break;

      case RESULT_TYPE:
        if (value == null) {
          unsetResultType();
        } else {
          setResultType((com.softsec.tase.common.rpc.domain.job.JobPhase)value);
        }
        break;

      case CONTENT:
        if (value == null) {
          unsetContent();
        } else {
          setContent((ByteBuffer)value);
        }
        break;

      case TASK_ID:
        if (value == null) {
          unsetTaskId();
        } else {
          setTaskId((Long)value);
        }
        break;

      case IDENTIFIER:
        if (value == null) {
          unsetIdentifier();
        } else {
          setIdentifier((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_TYPE:
        return getAppType();

      case JOB_LIFECYCLE:
        return getJobLifecycle();

      case RESULT_TYPE:
        return getResultType();

      case CONTENT:
        return getContent();

      case TASK_ID:
        return Long.valueOf(getTaskId());

      case IDENTIFIER:
        return getIdentifier();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_TYPE:
        return isSetAppType();
      case JOB_LIFECYCLE:
        return isSetJobLifecycle();
      case RESULT_TYPE:
        return isSetResultType();
      case CONTENT:
        return isSetContent();
      case TASK_ID:
        return isSetTaskId();
      case IDENTIFIER:
        return isSetIdentifier();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof transferResult_args)
        return this.equals((transferResult_args)that);
      return false;
    }

    public boolean equals(transferResult_args that) {
      if (that == null)
        return false;

      boolean this_present_appType = true && this.isSetAppType();
      boolean that_present_appType = true && that.isSetAppType();
      if (this_present_appType || that_present_appType) {
        if (!(this_present_appType && that_present_appType))
          return false;
        if (!this.appType.equals(that.appType))
          return false;
      }

      boolean this_present_jobLifecycle = true && this.isSetJobLifecycle();
      boolean that_present_jobLifecycle = true && that.isSetJobLifecycle();
      if (this_present_jobLifecycle || that_present_jobLifecycle) {
        if (!(this_present_jobLifecycle && that_present_jobLifecycle))
          return false;
        if (!this.jobLifecycle.equals(that.jobLifecycle))
          return false;
      }

      boolean this_present_resultType = true && this.isSetResultType();
      boolean that_present_resultType = true && that.isSetResultType();
      if (this_present_resultType || that_present_resultType) {
        if (!(this_present_resultType && that_present_resultType))
          return false;
        if (!this.resultType.equals(that.resultType))
          return false;
      }

      boolean this_present_content = true && this.isSetContent();
      boolean that_present_content = true && that.isSetContent();
      if (this_present_content || that_present_content) {
        if (!(this_present_content && that_present_content))
          return false;
        if (!this.content.equals(that.content))
          return false;
      }

      boolean this_present_taskId = true;
      boolean that_present_taskId = true;
      if (this_present_taskId || that_present_taskId) {
        if (!(this_present_taskId && that_present_taskId))
          return false;
        if (this.taskId != that.taskId)
          return false;
      }

      boolean this_present_identifier = true && this.isSetIdentifier();
      boolean that_present_identifier = true && that.isSetIdentifier();
      if (this_present_identifier || that_present_identifier) {
        if (!(this_present_identifier && that_present_identifier))
          return false;
        if (!this.identifier.equals(that.identifier))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(transferResult_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      transferResult_args typedOther = (transferResult_args)other;

      lastComparison = Boolean.valueOf(isSetAppType()).compareTo(typedOther.isSetAppType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appType, typedOther.appType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetJobLifecycle()).compareTo(typedOther.isSetJobLifecycle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobLifecycle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobLifecycle, typedOther.jobLifecycle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetResultType()).compareTo(typedOther.isSetResultType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResultType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultType, typedOther.resultType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetContent()).compareTo(typedOther.isSetContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, typedOther.content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTaskId()).compareTo(typedOther.isSetTaskId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, typedOther.taskId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIdentifier()).compareTo(typedOther.isSetIdentifier());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdentifier()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identifier, typedOther.identifier);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("transferResult_args(");
      boolean first = true;

      sb.append("appType:");
      if (this.appType == null) {
        sb.append("null");
      } else {
        sb.append(this.appType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jobLifecycle:");
      if (this.jobLifecycle == null) {
        sb.append("null");
      } else {
        sb.append(this.jobLifecycle);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("resultType:");
      if (this.resultType == null) {
        sb.append("null");
      } else {
        sb.append(this.resultType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.content, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("taskId:");
      sb.append(this.taskId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("identifier:");
      if (this.identifier == null) {
        sb.append("null");
      } else {
        sb.append(this.identifier);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (appType == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'appType' was not present! Struct: " + toString());
      }
      if (jobLifecycle == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'jobLifecycle' was not present! Struct: " + toString());
      }
      if (resultType == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'resultType' was not present! Struct: " + toString());
      }
      if (content == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'content' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'taskId' because it's a primitive and you chose the non-beans generator.
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class transferResult_argsStandardSchemeFactory implements SchemeFactory {
      public transferResult_argsStandardScheme getScheme() {
        return new transferResult_argsStandardScheme();
      }
    }

    private static class transferResult_argsStandardScheme extends StandardScheme<transferResult_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, transferResult_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APP_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.appType = com.softsec.tase.common.rpc.domain.app.AppType.findByValue(iprot.readI32());
                struct.setAppTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // JOB_LIFECYCLE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.jobLifecycle = com.softsec.tase.common.rpc.domain.job.JobLifecycle.findByValue(iprot.readI32());
                struct.setJobLifecycleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RESULT_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.resultType = com.softsec.tase.common.rpc.domain.job.JobPhase.findByValue(iprot.readI32());
                struct.setResultTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.content = iprot.readBinary();
                struct.setContentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TASK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.taskId = iprot.readI64();
                struct.setTaskIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // IDENTIFIER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.identifier = iprot.readString();
                struct.setIdentifierIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetTaskId()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'taskId' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, transferResult_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.appType != null) {
          oprot.writeFieldBegin(APP_TYPE_FIELD_DESC);
          oprot.writeI32(struct.appType.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.jobLifecycle != null) {
          oprot.writeFieldBegin(JOB_LIFECYCLE_FIELD_DESC);
          oprot.writeI32(struct.jobLifecycle.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.resultType != null) {
          oprot.writeFieldBegin(RESULT_TYPE_FIELD_DESC);
          oprot.writeI32(struct.resultType.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.content != null) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeBinary(struct.content);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
        oprot.writeI64(struct.taskId);
        oprot.writeFieldEnd();
        if (struct.identifier != null) {
          oprot.writeFieldBegin(IDENTIFIER_FIELD_DESC);
          oprot.writeString(struct.identifier);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class transferResult_argsTupleSchemeFactory implements SchemeFactory {
      public transferResult_argsTupleScheme getScheme() {
        return new transferResult_argsTupleScheme();
      }
    }

    private static class transferResult_argsTupleScheme extends TupleScheme<transferResult_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, transferResult_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeI32(struct.appType.getValue());
        oprot.writeI32(struct.jobLifecycle.getValue());
        oprot.writeI32(struct.resultType.getValue());
        oprot.writeBinary(struct.content);
        oprot.writeI64(struct.taskId);
        BitSet optionals = new BitSet();
        if (struct.isSetIdentifier()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIdentifier()) {
          oprot.writeString(struct.identifier);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, transferResult_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.appType = com.softsec.tase.common.rpc.domain.app.AppType.findByValue(iprot.readI32());
        struct.setAppTypeIsSet(true);
        struct.jobLifecycle = com.softsec.tase.common.rpc.domain.job.JobLifecycle.findByValue(iprot.readI32());
        struct.setJobLifecycleIsSet(true);
        struct.resultType = com.softsec.tase.common.rpc.domain.job.JobPhase.findByValue(iprot.readI32());
        struct.setResultTypeIsSet(true);
        struct.content = iprot.readBinary();
        struct.setContentIsSet(true);
        struct.taskId = iprot.readI64();
        struct.setTaskIdIsSet(true);
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.identifier = iprot.readString();
          struct.setIdentifierIsSet(true);
        }
      }
    }

  }

  public static class transferResult_result implements org.apache.thrift.TBase<transferResult_result, transferResult_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("transferResult_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField TE_FIELD_DESC = new org.apache.thrift.protocol.TField("te", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new transferResult_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new transferResult_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.softsec.tase.common.rpc.exception.InvalidRequestException ire; // required
    public com.softsec.tase.common.rpc.exception.UnavailableException ue; // required
    public com.softsec.tase.common.rpc.exception.TimeoutException te; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      UE((short)2, "ue"),
      TE((short)3, "te");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // UE
            return UE;
          case 3: // TE
            return TE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TE, new org.apache.thrift.meta_data.FieldMetaData("te", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(transferResult_result.class, metaDataMap);
    }

    public transferResult_result() {
    }

    public transferResult_result(
      int success,
      com.softsec.tase.common.rpc.exception.InvalidRequestException ire,
      com.softsec.tase.common.rpc.exception.UnavailableException ue,
      com.softsec.tase.common.rpc.exception.TimeoutException te)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ire = ire;
      this.ue = ue;
      this.te = te;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public transferResult_result(transferResult_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIre()) {
        this.ire = new com.softsec.tase.common.rpc.exception.InvalidRequestException(other.ire);
      }
      if (other.isSetUe()) {
        this.ue = new com.softsec.tase.common.rpc.exception.UnavailableException(other.ue);
      }
      if (other.isSetTe()) {
        this.te = new com.softsec.tase.common.rpc.exception.TimeoutException(other.te);
      }
    }

    public transferResult_result deepCopy() {
      return new transferResult_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ire = null;
      this.ue = null;
      this.te = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public transferResult_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.softsec.tase.common.rpc.exception.InvalidRequestException getIre() {
      return this.ire;
    }

    public transferResult_result setIre(com.softsec.tase.common.rpc.exception.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public com.softsec.tase.common.rpc.exception.UnavailableException getUe() {
      return this.ue;
    }

    public transferResult_result setUe(com.softsec.tase.common.rpc.exception.UnavailableException ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public com.softsec.tase.common.rpc.exception.TimeoutException getTe() {
      return this.te;
    }

    public transferResult_result setTe(com.softsec.tase.common.rpc.exception.TimeoutException te) {
      this.te = te;
      return this;
    }

    public void unsetTe() {
      this.te = null;
    }

    /** Returns true if field te is set (has been assigned a value) and false otherwise */
    public boolean isSetTe() {
      return this.te != null;
    }

    public void setTeIsSet(boolean value) {
      if (!value) {
        this.te = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((com.softsec.tase.common.rpc.exception.InvalidRequestException)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((com.softsec.tase.common.rpc.exception.UnavailableException)value);
        }
        break;

      case TE:
        if (value == null) {
          unsetTe();
        } else {
          setTe((com.softsec.tase.common.rpc.exception.TimeoutException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case IRE:
        return getIre();

      case UE:
        return getUe();

      case TE:
        return getTe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case UE:
        return isSetUe();
      case TE:
        return isSetTe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof transferResult_result)
        return this.equals((transferResult_result)that);
      return false;
    }

    public boolean equals(transferResult_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      boolean this_present_te = true && this.isSetTe();
      boolean that_present_te = true && that.isSetTe();
      if (this_present_te || that_present_te) {
        if (!(this_present_te && that_present_te))
          return false;
        if (!this.te.equals(that.te))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(transferResult_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      transferResult_result typedOther = (transferResult_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(typedOther.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, typedOther.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUe()).compareTo(typedOther.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, typedOther.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTe()).compareTo(typedOther.isSetTe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.te, typedOther.te);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("transferResult_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("te:");
      if (this.te == null) {
        sb.append("null");
      } else {
        sb.append(this.te);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class transferResult_resultStandardSchemeFactory implements SchemeFactory {
      public transferResult_resultStandardScheme getScheme() {
        return new transferResult_resultStandardScheme();
      }
    }

    private static class transferResult_resultStandardScheme extends StandardScheme<transferResult_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, transferResult_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new com.softsec.tase.common.rpc.exception.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new com.softsec.tase.common.rpc.exception.UnavailableException();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.te = new com.softsec.tase.common.rpc.exception.TimeoutException();
                struct.te.read(iprot);
                struct.setTeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, transferResult_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ue != null) {
          oprot.writeFieldBegin(UE_FIELD_DESC);
          struct.ue.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.te != null) {
          oprot.writeFieldBegin(TE_FIELD_DESC);
          struct.te.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class transferResult_resultTupleSchemeFactory implements SchemeFactory {
      public transferResult_resultTupleScheme getScheme() {
        return new transferResult_resultTupleScheme();
      }
    }

    private static class transferResult_resultTupleScheme extends TupleScheme<transferResult_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, transferResult_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetUe()) {
          optionals.set(2);
        }
        if (struct.isSetTe()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetUe()) {
          struct.ue.write(oprot);
        }
        if (struct.isSetTe()) {
          struct.te.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, transferResult_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new com.softsec.tase.common.rpc.exception.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ue = new com.softsec.tase.common.rpc.exception.UnavailableException();
          struct.ue.read(iprot);
          struct.setUeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.te = new com.softsec.tase.common.rpc.exception.TimeoutException();
          struct.te.read(iprot);
          struct.setTeIsSet(true);
        }
      }
    }

  }

  public static class fetchApp_args implements org.apache.thrift.TBase<fetchApp_args, fetchApp_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchApp_args");

    private static final org.apache.thrift.protocol.TField REPOSITORY_FIELD_DESC = new org.apache.thrift.protocol.TField("repository", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SOURCE_FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceFileName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField DESTINATION_FILE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("destinationFilePath", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fetchApp_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fetchApp_argsTupleSchemeFactory());
    }

    public String repository; // required
    public String sourceFileName; // required
    public String destinationFilePath; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPOSITORY((short)1, "repository"),
      SOURCE_FILE_NAME((short)2, "sourceFileName"),
      DESTINATION_FILE_PATH((short)3, "destinationFilePath");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPOSITORY
            return REPOSITORY;
          case 2: // SOURCE_FILE_NAME
            return SOURCE_FILE_NAME;
          case 3: // DESTINATION_FILE_PATH
            return DESTINATION_FILE_PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPOSITORY, new org.apache.thrift.meta_data.FieldMetaData("repository", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SOURCE_FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("sourceFileName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DESTINATION_FILE_PATH, new org.apache.thrift.meta_data.FieldMetaData("destinationFilePath", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchApp_args.class, metaDataMap);
    }

    public fetchApp_args() {
    }

    public fetchApp_args(
      String repository,
      String sourceFileName,
      String destinationFilePath)
    {
      this();
      this.repository = repository;
      this.sourceFileName = sourceFileName;
      this.destinationFilePath = destinationFilePath;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchApp_args(fetchApp_args other) {
      if (other.isSetRepository()) {
        this.repository = other.repository;
      }
      if (other.isSetSourceFileName()) {
        this.sourceFileName = other.sourceFileName;
      }
      if (other.isSetDestinationFilePath()) {
        this.destinationFilePath = other.destinationFilePath;
      }
    }

    public fetchApp_args deepCopy() {
      return new fetchApp_args(this);
    }

    @Override
    public void clear() {
      this.repository = null;
      this.sourceFileName = null;
      this.destinationFilePath = null;
    }

    public String getRepository() {
      return this.repository;
    }

    public fetchApp_args setRepository(String repository) {
      this.repository = repository;
      return this;
    }

    public void unsetRepository() {
      this.repository = null;
    }

    /** Returns true if field repository is set (has been assigned a value) and false otherwise */
    public boolean isSetRepository() {
      return this.repository != null;
    }

    public void setRepositoryIsSet(boolean value) {
      if (!value) {
        this.repository = null;
      }
    }

    public String getSourceFileName() {
      return this.sourceFileName;
    }

    public fetchApp_args setSourceFileName(String sourceFileName) {
      this.sourceFileName = sourceFileName;
      return this;
    }

    public void unsetSourceFileName() {
      this.sourceFileName = null;
    }

    /** Returns true if field sourceFileName is set (has been assigned a value) and false otherwise */
    public boolean isSetSourceFileName() {
      return this.sourceFileName != null;
    }

    public void setSourceFileNameIsSet(boolean value) {
      if (!value) {
        this.sourceFileName = null;
      }
    }

    public String getDestinationFilePath() {
      return this.destinationFilePath;
    }

    public fetchApp_args setDestinationFilePath(String destinationFilePath) {
      this.destinationFilePath = destinationFilePath;
      return this;
    }

    public void unsetDestinationFilePath() {
      this.destinationFilePath = null;
    }

    /** Returns true if field destinationFilePath is set (has been assigned a value) and false otherwise */
    public boolean isSetDestinationFilePath() {
      return this.destinationFilePath != null;
    }

    public void setDestinationFilePathIsSet(boolean value) {
      if (!value) {
        this.destinationFilePath = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REPOSITORY:
        if (value == null) {
          unsetRepository();
        } else {
          setRepository((String)value);
        }
        break;

      case SOURCE_FILE_NAME:
        if (value == null) {
          unsetSourceFileName();
        } else {
          setSourceFileName((String)value);
        }
        break;

      case DESTINATION_FILE_PATH:
        if (value == null) {
          unsetDestinationFilePath();
        } else {
          setDestinationFilePath((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPOSITORY:
        return getRepository();

      case SOURCE_FILE_NAME:
        return getSourceFileName();

      case DESTINATION_FILE_PATH:
        return getDestinationFilePath();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPOSITORY:
        return isSetRepository();
      case SOURCE_FILE_NAME:
        return isSetSourceFileName();
      case DESTINATION_FILE_PATH:
        return isSetDestinationFilePath();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchApp_args)
        return this.equals((fetchApp_args)that);
      return false;
    }

    public boolean equals(fetchApp_args that) {
      if (that == null)
        return false;

      boolean this_present_repository = true && this.isSetRepository();
      boolean that_present_repository = true && that.isSetRepository();
      if (this_present_repository || that_present_repository) {
        if (!(this_present_repository && that_present_repository))
          return false;
        if (!this.repository.equals(that.repository))
          return false;
      }

      boolean this_present_sourceFileName = true && this.isSetSourceFileName();
      boolean that_present_sourceFileName = true && that.isSetSourceFileName();
      if (this_present_sourceFileName || that_present_sourceFileName) {
        if (!(this_present_sourceFileName && that_present_sourceFileName))
          return false;
        if (!this.sourceFileName.equals(that.sourceFileName))
          return false;
      }

      boolean this_present_destinationFilePath = true && this.isSetDestinationFilePath();
      boolean that_present_destinationFilePath = true && that.isSetDestinationFilePath();
      if (this_present_destinationFilePath || that_present_destinationFilePath) {
        if (!(this_present_destinationFilePath && that_present_destinationFilePath))
          return false;
        if (!this.destinationFilePath.equals(that.destinationFilePath))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(fetchApp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      fetchApp_args typedOther = (fetchApp_args)other;

      lastComparison = Boolean.valueOf(isSetRepository()).compareTo(typedOther.isSetRepository());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepository()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repository, typedOther.repository);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSourceFileName()).compareTo(typedOther.isSetSourceFileName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSourceFileName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceFileName, typedOther.sourceFileName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDestinationFilePath()).compareTo(typedOther.isSetDestinationFilePath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDestinationFilePath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.destinationFilePath, typedOther.destinationFilePath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetchApp_args(");
      boolean first = true;

      sb.append("repository:");
      if (this.repository == null) {
        sb.append("null");
      } else {
        sb.append(this.repository);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sourceFileName:");
      if (this.sourceFileName == null) {
        sb.append("null");
      } else {
        sb.append(this.sourceFileName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("destinationFilePath:");
      if (this.destinationFilePath == null) {
        sb.append("null");
      } else {
        sb.append(this.destinationFilePath);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (repository == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'repository' was not present! Struct: " + toString());
      }
      if (sourceFileName == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sourceFileName' was not present! Struct: " + toString());
      }
      if (destinationFilePath == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'destinationFilePath' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchApp_argsStandardSchemeFactory implements SchemeFactory {
      public fetchApp_argsStandardScheme getScheme() {
        return new fetchApp_argsStandardScheme();
      }
    }

    private static class fetchApp_argsStandardScheme extends StandardScheme<fetchApp_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchApp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPOSITORY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.repository = iprot.readString();
                struct.setRepositoryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SOURCE_FILE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sourceFileName = iprot.readString();
                struct.setSourceFileNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DESTINATION_FILE_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.destinationFilePath = iprot.readString();
                struct.setDestinationFilePathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchApp_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.repository != null) {
          oprot.writeFieldBegin(REPOSITORY_FIELD_DESC);
          oprot.writeString(struct.repository);
          oprot.writeFieldEnd();
        }
        if (struct.sourceFileName != null) {
          oprot.writeFieldBegin(SOURCE_FILE_NAME_FIELD_DESC);
          oprot.writeString(struct.sourceFileName);
          oprot.writeFieldEnd();
        }
        if (struct.destinationFilePath != null) {
          oprot.writeFieldBegin(DESTINATION_FILE_PATH_FIELD_DESC);
          oprot.writeString(struct.destinationFilePath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchApp_argsTupleSchemeFactory implements SchemeFactory {
      public fetchApp_argsTupleScheme getScheme() {
        return new fetchApp_argsTupleScheme();
      }
    }

    private static class fetchApp_argsTupleScheme extends TupleScheme<fetchApp_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetchApp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.repository);
        oprot.writeString(struct.sourceFileName);
        oprot.writeString(struct.destinationFilePath);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetchApp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.repository = iprot.readString();
        struct.setRepositoryIsSet(true);
        struct.sourceFileName = iprot.readString();
        struct.setSourceFileNameIsSet(true);
        struct.destinationFilePath = iprot.readString();
        struct.setDestinationFilePathIsSet(true);
      }
    }

  }

  public static class fetchApp_result implements org.apache.thrift.TBase<fetchApp_result, fetchApp_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchApp_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField TE_FIELD_DESC = new org.apache.thrift.protocol.TField("te", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fetchApp_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fetchApp_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.softsec.tase.common.rpc.exception.InvalidRequestException ire; // required
    public com.softsec.tase.common.rpc.exception.UnavailableException ue; // required
    public com.softsec.tase.common.rpc.exception.TimeoutException te; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      UE((short)2, "ue"),
      TE((short)3, "te");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // UE
            return UE;
          case 3: // TE
            return TE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TE, new org.apache.thrift.meta_data.FieldMetaData("te", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchApp_result.class, metaDataMap);
    }

    public fetchApp_result() {
    }

    public fetchApp_result(
      int success,
      com.softsec.tase.common.rpc.exception.InvalidRequestException ire,
      com.softsec.tase.common.rpc.exception.UnavailableException ue,
      com.softsec.tase.common.rpc.exception.TimeoutException te)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ire = ire;
      this.ue = ue;
      this.te = te;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchApp_result(fetchApp_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIre()) {
        this.ire = new com.softsec.tase.common.rpc.exception.InvalidRequestException(other.ire);
      }
      if (other.isSetUe()) {
        this.ue = new com.softsec.tase.common.rpc.exception.UnavailableException(other.ue);
      }
      if (other.isSetTe()) {
        this.te = new com.softsec.tase.common.rpc.exception.TimeoutException(other.te);
      }
    }

    public fetchApp_result deepCopy() {
      return new fetchApp_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ire = null;
      this.ue = null;
      this.te = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public fetchApp_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.softsec.tase.common.rpc.exception.InvalidRequestException getIre() {
      return this.ire;
    }

    public fetchApp_result setIre(com.softsec.tase.common.rpc.exception.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public com.softsec.tase.common.rpc.exception.UnavailableException getUe() {
      return this.ue;
    }

    public fetchApp_result setUe(com.softsec.tase.common.rpc.exception.UnavailableException ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public com.softsec.tase.common.rpc.exception.TimeoutException getTe() {
      return this.te;
    }

    public fetchApp_result setTe(com.softsec.tase.common.rpc.exception.TimeoutException te) {
      this.te = te;
      return this;
    }

    public void unsetTe() {
      this.te = null;
    }

    /** Returns true if field te is set (has been assigned a value) and false otherwise */
    public boolean isSetTe() {
      return this.te != null;
    }

    public void setTeIsSet(boolean value) {
      if (!value) {
        this.te = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((com.softsec.tase.common.rpc.exception.InvalidRequestException)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((com.softsec.tase.common.rpc.exception.UnavailableException)value);
        }
        break;

      case TE:
        if (value == null) {
          unsetTe();
        } else {
          setTe((com.softsec.tase.common.rpc.exception.TimeoutException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case IRE:
        return getIre();

      case UE:
        return getUe();

      case TE:
        return getTe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case UE:
        return isSetUe();
      case TE:
        return isSetTe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchApp_result)
        return this.equals((fetchApp_result)that);
      return false;
    }

    public boolean equals(fetchApp_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      boolean this_present_te = true && this.isSetTe();
      boolean that_present_te = true && that.isSetTe();
      if (this_present_te || that_present_te) {
        if (!(this_present_te && that_present_te))
          return false;
        if (!this.te.equals(that.te))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(fetchApp_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      fetchApp_result typedOther = (fetchApp_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(typedOther.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, typedOther.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUe()).compareTo(typedOther.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, typedOther.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTe()).compareTo(typedOther.isSetTe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.te, typedOther.te);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetchApp_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("te:");
      if (this.te == null) {
        sb.append("null");
      } else {
        sb.append(this.te);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchApp_resultStandardSchemeFactory implements SchemeFactory {
      public fetchApp_resultStandardScheme getScheme() {
        return new fetchApp_resultStandardScheme();
      }
    }

    private static class fetchApp_resultStandardScheme extends StandardScheme<fetchApp_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchApp_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new com.softsec.tase.common.rpc.exception.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new com.softsec.tase.common.rpc.exception.UnavailableException();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.te = new com.softsec.tase.common.rpc.exception.TimeoutException();
                struct.te.read(iprot);
                struct.setTeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchApp_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ue != null) {
          oprot.writeFieldBegin(UE_FIELD_DESC);
          struct.ue.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.te != null) {
          oprot.writeFieldBegin(TE_FIELD_DESC);
          struct.te.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchApp_resultTupleSchemeFactory implements SchemeFactory {
      public fetchApp_resultTupleScheme getScheme() {
        return new fetchApp_resultTupleScheme();
      }
    }

    private static class fetchApp_resultTupleScheme extends TupleScheme<fetchApp_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetchApp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetUe()) {
          optionals.set(2);
        }
        if (struct.isSetTe()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetUe()) {
          struct.ue.write(oprot);
        }
        if (struct.isSetTe()) {
          struct.te.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetchApp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new com.softsec.tase.common.rpc.exception.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ue = new com.softsec.tase.common.rpc.exception.UnavailableException();
          struct.ue.read(iprot);
          struct.setUeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.te = new com.softsec.tase.common.rpc.exception.TimeoutException();
          struct.te.read(iprot);
          struct.setTeIsSet(true);
        }
      }
    }

  }

}
